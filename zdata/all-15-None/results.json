{
    "scrabble": {
        "times": [
            1746.818,
            822.799,
            876.688,
            772.422,
            664.922,
            767.926,
            771.953,
            713.175,
            705.321,
            595.178,
            653.981,
            671.613,
            614.5,
            687.061,
            698.12
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 111.440 ms, heap usage 193.716 MB -> 76.034 MB.\n====== scrabble (functional) [default], iteration 0 completed (1746.818 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 75.425 ms, heap usage 124.295 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 1 completed (822.799 ms) ======\n====== scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 103.806 ms, heap usage 309.363 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 2 completed (876.688 ms) ======\n====== scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 108.057 ms, heap usage 131.528 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 3 completed (772.422 ms) ======\n====== scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 90.330 ms, heap usage 339.197 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 4 completed (664.922 ms) ======\n====== scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 78.633 ms, heap usage 242.581 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 5 completed (767.926 ms) ======\n====== scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 80.529 ms, heap usage 243.067 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 6 completed (771.953 ms) ======\n====== scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 87.821 ms, heap usage 169.966 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 7 completed (713.175 ms) ======\n====== scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 85.627 ms, heap usage 126.363 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 8 completed (705.321 ms) ======\n====== scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 77.713 ms, heap usage 279.273 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 9 completed (595.178 ms) ======\n====== scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 90.853 ms, heap usage 197.665 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 10 completed (653.981 ms) ======\n====== scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 80.787 ms, heap usage 125.936 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 11 completed (671.613 ms) ======\n====== scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 81.092 ms, heap usage 326.788 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 12 completed (614.500 ms) ======\n====== scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 74.421 ms, heap usage 199.244 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 13 completed (687.061 ms) ======\n====== scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 77.486 ms, heap usage 357.036 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 14 completed (698.120 ms) ======\n"
    },
    "page-rank": {
        "times": [
            20832.995,
            10726.986,
            10497.012,
            10683.078,
            11158.857,
            10816.748,
            10797.777,
            10320.855,
            10797.875,
            10426.551,
            11319.287,
            10773.541,
            10583.141,
            11225.389,
            11253.752
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 111.440 ms, heap usage 193.716 MB -> 76.034 MB.\n====== scrabble (functional) [default], iteration 0 completed (1746.818 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 75.425 ms, heap usage 124.295 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 1 completed (822.799 ms) ======\n====== scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 103.806 ms, heap usage 309.363 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 2 completed (876.688 ms) ======\n====== scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 108.057 ms, heap usage 131.528 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 3 completed (772.422 ms) ======\n====== scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 90.330 ms, heap usage 339.197 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 4 completed (664.922 ms) ======\n====== scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 78.633 ms, heap usage 242.581 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 5 completed (767.926 ms) ======\n====== scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 80.529 ms, heap usage 243.067 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 6 completed (771.953 ms) ======\n====== scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 87.821 ms, heap usage 169.966 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 7 completed (713.175 ms) ======\n====== scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 85.627 ms, heap usage 126.363 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 8 completed (705.321 ms) ======\n====== scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 77.713 ms, heap usage 279.273 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 9 completed (595.178 ms) ======\n====== scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 90.853 ms, heap usage 197.665 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 10 completed (653.981 ms) ======\n====== scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 80.787 ms, heap usage 125.936 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 11 completed (671.613 ms) ======\n====== scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 81.092 ms, heap usage 326.788 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 12 completed (614.500 ms) ======\n====== scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 74.421 ms, heap usage 199.244 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 13 completed (687.061 ms) ======\n====== scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 77.486 ms, heap usage 357.036 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 14 completed (698.120 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 39.864 ms, heap usage 626.576 MB -> 29.596 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (20832.995 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 151.296 ms, heap usage 587.802 MB -> 148.935 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (10726.986 ms) ======\n====== page-rank (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 139.528 ms, heap usage 662.229 MB -> 149.044 MB.\n====== page-rank (apache-spark) [default], iteration 2 completed (10497.012 ms) ======\n====== page-rank (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 145.301 ms, heap usage 620.847 MB -> 149.161 MB.\n====== page-rank (apache-spark) [default], iteration 3 completed (10683.078 ms) ======\n====== page-rank (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 146.272 ms, heap usage 595.956 MB -> 149.275 MB.\n====== page-rank (apache-spark) [default], iteration 4 completed (11158.857 ms) ======\n====== page-rank (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 150.477 ms, heap usage 624.956 MB -> 149.389 MB.\n====== page-rank (apache-spark) [default], iteration 5 completed (10816.748 ms) ======\n====== page-rank (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 152.563 ms, heap usage 475.956 MB -> 149.705 MB.\n====== page-rank (apache-spark) [default], iteration 6 completed (10797.777 ms) ======\n====== page-rank (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 153.431 ms, heap usage 575.956 MB -> 149.630 MB.\n====== page-rank (apache-spark) [default], iteration 7 completed (10320.855 ms) ======\n====== page-rank (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 154.161 ms, heap usage 494.956 MB -> 149.734 MB.\n====== page-rank (apache-spark) [default], iteration 8 completed (10797.875 ms) ======\n====== page-rank (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 159.810 ms, heap usage 685.884 MB -> 149.850 MB.\n====== page-rank (apache-spark) [default], iteration 9 completed (10426.551 ms) ======\n====== page-rank (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 138.119 ms, heap usage 483.136 MB -> 149.929 MB.\n====== page-rank (apache-spark) [default], iteration 10 completed (11319.287 ms) ======\n====== page-rank (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 160.571 ms, heap usage 417.218 MB -> 150.048 MB.\n====== page-rank (apache-spark) [default], iteration 11 completed (10773.541 ms) ======\n====== page-rank (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 153.774 ms, heap usage 591.956 MB -> 150.197 MB.\n====== page-rank (apache-spark) [default], iteration 12 completed (10583.141 ms) ======\n====== page-rank (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 151.297 ms, heap usage 385.309 MB -> 150.212 MB.\n====== page-rank (apache-spark) [default], iteration 13 completed (11225.389 ms) ======\n====== page-rank (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 138.750 ms, heap usage 506.956 MB -> 150.287 MB.\n====== page-rank (apache-spark) [default], iteration 14 completed (11253.752 ms) ======\n"
    },
    "future-genetic": {
        "times": [
            14742.129,
            11014.493,
            10628.352,
            10722.143,
            10840.012,
            10598.435,
            10786.15,
            10652.683,
            10488.698,
            10682.271,
            10549.84,
            10851.547,
            10940.461,
            10876.099,
            10763.606
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 111.440 ms, heap usage 193.716 MB -> 76.034 MB.\n====== scrabble (functional) [default], iteration 0 completed (1746.818 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 75.425 ms, heap usage 124.295 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 1 completed (822.799 ms) ======\n====== scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 103.806 ms, heap usage 309.363 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 2 completed (876.688 ms) ======\n====== scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 108.057 ms, heap usage 131.528 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 3 completed (772.422 ms) ======\n====== scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 90.330 ms, heap usage 339.197 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 4 completed (664.922 ms) ======\n====== scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 78.633 ms, heap usage 242.581 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 5 completed (767.926 ms) ======\n====== scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 80.529 ms, heap usage 243.067 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 6 completed (771.953 ms) ======\n====== scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 87.821 ms, heap usage 169.966 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 7 completed (713.175 ms) ======\n====== scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 85.627 ms, heap usage 126.363 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 8 completed (705.321 ms) ======\n====== scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 77.713 ms, heap usage 279.273 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 9 completed (595.178 ms) ======\n====== scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 90.853 ms, heap usage 197.665 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 10 completed (653.981 ms) ======\n====== scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 80.787 ms, heap usage 125.936 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 11 completed (671.613 ms) ======\n====== scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 81.092 ms, heap usage 326.788 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 12 completed (614.500 ms) ======\n====== scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 74.421 ms, heap usage 199.244 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 13 completed (687.061 ms) ======\n====== scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 77.486 ms, heap usage 357.036 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 14 completed (698.120 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 39.864 ms, heap usage 626.576 MB -> 29.596 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (20832.995 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 151.296 ms, heap usage 587.802 MB -> 148.935 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (10726.986 ms) ======\n====== page-rank (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 139.528 ms, heap usage 662.229 MB -> 149.044 MB.\n====== page-rank (apache-spark) [default], iteration 2 completed (10497.012 ms) ======\n====== page-rank (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 145.301 ms, heap usage 620.847 MB -> 149.161 MB.\n====== page-rank (apache-spark) [default], iteration 3 completed (10683.078 ms) ======\n====== page-rank (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 146.272 ms, heap usage 595.956 MB -> 149.275 MB.\n====== page-rank (apache-spark) [default], iteration 4 completed (11158.857 ms) ======\n====== page-rank (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 150.477 ms, heap usage 624.956 MB -> 149.389 MB.\n====== page-rank (apache-spark) [default], iteration 5 completed (10816.748 ms) ======\n====== page-rank (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 152.563 ms, heap usage 475.956 MB -> 149.705 MB.\n====== page-rank (apache-spark) [default], iteration 6 completed (10797.777 ms) ======\n====== page-rank (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 153.431 ms, heap usage 575.956 MB -> 149.630 MB.\n====== page-rank (apache-spark) [default], iteration 7 completed (10320.855 ms) ======\n====== page-rank (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 154.161 ms, heap usage 494.956 MB -> 149.734 MB.\n====== page-rank (apache-spark) [default], iteration 8 completed (10797.875 ms) ======\n====== page-rank (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 159.810 ms, heap usage 685.884 MB -> 149.850 MB.\n====== page-rank (apache-spark) [default], iteration 9 completed (10426.551 ms) ======\n====== page-rank (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 138.119 ms, heap usage 483.136 MB -> 149.929 MB.\n====== page-rank (apache-spark) [default], iteration 10 completed (11319.287 ms) ======\n====== page-rank (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 160.571 ms, heap usage 417.218 MB -> 150.048 MB.\n====== page-rank (apache-spark) [default], iteration 11 completed (10773.541 ms) ======\n====== page-rank (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 153.774 ms, heap usage 591.956 MB -> 150.197 MB.\n====== page-rank (apache-spark) [default], iteration 12 completed (10583.141 ms) ======\n====== page-rank (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 151.297 ms, heap usage 385.309 MB -> 150.212 MB.\n====== page-rank (apache-spark) [default], iteration 13 completed (11225.389 ms) ======\n====== page-rank (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 138.750 ms, heap usage 506.956 MB -> 150.287 MB.\n====== page-rank (apache-spark) [default], iteration 14 completed (11253.752 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 60.640 ms, heap usage 661.207 MB -> 32.216 MB.\n====== future-genetic (functional) [default], iteration 0 completed (14742.129 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 51.821 ms, heap usage 114.841 MB -> 33.158 MB.\n====== future-genetic (functional) [default], iteration 1 completed (11014.493 ms) ======\n====== future-genetic (functional) [default], iteration 2 started ======\nGC before operation: completed in 34.821 ms, heap usage 68.320 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 2 completed (10628.352 ms) ======\n====== future-genetic (functional) [default], iteration 3 started ======\nGC before operation: completed in 38.504 ms, heap usage 57.876 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 3 completed (10722.143 ms) ======\n====== future-genetic (functional) [default], iteration 4 started ======\nGC before operation: completed in 39.692 ms, heap usage 145.206 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 4 completed (10840.012 ms) ======\n====== future-genetic (functional) [default], iteration 5 started ======\nGC before operation: completed in 38.411 ms, heap usage 81.011 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 5 completed (10598.435 ms) ======\n====== future-genetic (functional) [default], iteration 6 started ======\nGC before operation: completed in 40.019 ms, heap usage 144.534 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 6 completed (10786.150 ms) ======\n====== future-genetic (functional) [default], iteration 7 started ======\nGC before operation: completed in 48.015 ms, heap usage 171.419 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 7 completed (10652.683 ms) ======\n====== future-genetic (functional) [default], iteration 8 started ======\nGC before operation: completed in 35.498 ms, heap usage 37.426 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 8 completed (10488.698 ms) ======\n====== future-genetic (functional) [default], iteration 9 started ======\nGC before operation: completed in 42.383 ms, heap usage 130.505 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 9 completed (10682.271 ms) ======\n====== future-genetic (functional) [default], iteration 10 started ======\nGC before operation: completed in 48.742 ms, heap usage 134.970 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 10 completed (10549.840 ms) ======\n====== future-genetic (functional) [default], iteration 11 started ======\nGC before operation: completed in 41.808 ms, heap usage 156.009 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 11 completed (10851.547 ms) ======\n====== future-genetic (functional) [default], iteration 12 started ======\nGC before operation: completed in 40.139 ms, heap usage 163.381 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 12 completed (10940.461 ms) ======\n====== future-genetic (functional) [default], iteration 13 started ======\nGC before operation: completed in 35.048 ms, heap usage 80.372 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 13 completed (10876.099 ms) ======\n====== future-genetic (functional) [default], iteration 14 started ======\nGC before operation: completed in 43.468 ms, heap usage 62.997 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 14 completed (10763.606 ms) ======\n"
    },
    "akka-uct": {
        "times": [
            23373.227,
            17055.803,
            16644.579,
            16230.901,
            16222.783,
            16061.576,
            15769.69,
            15901.168,
            16178.151,
            15874.839,
            15982.587,
            16353.495,
            15969.903,
            15322.843,
            16083.172
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 111.440 ms, heap usage 193.716 MB -> 76.034 MB.\n====== scrabble (functional) [default], iteration 0 completed (1746.818 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 75.425 ms, heap usage 124.295 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 1 completed (822.799 ms) ======\n====== scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 103.806 ms, heap usage 309.363 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 2 completed (876.688 ms) ======\n====== scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 108.057 ms, heap usage 131.528 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 3 completed (772.422 ms) ======\n====== scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 90.330 ms, heap usage 339.197 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 4 completed (664.922 ms) ======\n====== scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 78.633 ms, heap usage 242.581 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 5 completed (767.926 ms) ======\n====== scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 80.529 ms, heap usage 243.067 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 6 completed (771.953 ms) ======\n====== scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 87.821 ms, heap usage 169.966 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 7 completed (713.175 ms) ======\n====== scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 85.627 ms, heap usage 126.363 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 8 completed (705.321 ms) ======\n====== scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 77.713 ms, heap usage 279.273 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 9 completed (595.178 ms) ======\n====== scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 90.853 ms, heap usage 197.665 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 10 completed (653.981 ms) ======\n====== scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 80.787 ms, heap usage 125.936 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 11 completed (671.613 ms) ======\n====== scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 81.092 ms, heap usage 326.788 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 12 completed (614.500 ms) ======\n====== scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 74.421 ms, heap usage 199.244 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 13 completed (687.061 ms) ======\n====== scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 77.486 ms, heap usage 357.036 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 14 completed (698.120 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 39.864 ms, heap usage 626.576 MB -> 29.596 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (20832.995 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 151.296 ms, heap usage 587.802 MB -> 148.935 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (10726.986 ms) ======\n====== page-rank (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 139.528 ms, heap usage 662.229 MB -> 149.044 MB.\n====== page-rank (apache-spark) [default], iteration 2 completed (10497.012 ms) ======\n====== page-rank (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 145.301 ms, heap usage 620.847 MB -> 149.161 MB.\n====== page-rank (apache-spark) [default], iteration 3 completed (10683.078 ms) ======\n====== page-rank (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 146.272 ms, heap usage 595.956 MB -> 149.275 MB.\n====== page-rank (apache-spark) [default], iteration 4 completed (11158.857 ms) ======\n====== page-rank (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 150.477 ms, heap usage 624.956 MB -> 149.389 MB.\n====== page-rank (apache-spark) [default], iteration 5 completed (10816.748 ms) ======\n====== page-rank (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 152.563 ms, heap usage 475.956 MB -> 149.705 MB.\n====== page-rank (apache-spark) [default], iteration 6 completed (10797.777 ms) ======\n====== page-rank (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 153.431 ms, heap usage 575.956 MB -> 149.630 MB.\n====== page-rank (apache-spark) [default], iteration 7 completed (10320.855 ms) ======\n====== page-rank (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 154.161 ms, heap usage 494.956 MB -> 149.734 MB.\n====== page-rank (apache-spark) [default], iteration 8 completed (10797.875 ms) ======\n====== page-rank (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 159.810 ms, heap usage 685.884 MB -> 149.850 MB.\n====== page-rank (apache-spark) [default], iteration 9 completed (10426.551 ms) ======\n====== page-rank (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 138.119 ms, heap usage 483.136 MB -> 149.929 MB.\n====== page-rank (apache-spark) [default], iteration 10 completed (11319.287 ms) ======\n====== page-rank (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 160.571 ms, heap usage 417.218 MB -> 150.048 MB.\n====== page-rank (apache-spark) [default], iteration 11 completed (10773.541 ms) ======\n====== page-rank (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 153.774 ms, heap usage 591.956 MB -> 150.197 MB.\n====== page-rank (apache-spark) [default], iteration 12 completed (10583.141 ms) ======\n====== page-rank (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 151.297 ms, heap usage 385.309 MB -> 150.212 MB.\n====== page-rank (apache-spark) [default], iteration 13 completed (11225.389 ms) ======\n====== page-rank (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 138.750 ms, heap usage 506.956 MB -> 150.287 MB.\n====== page-rank (apache-spark) [default], iteration 14 completed (11253.752 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 60.640 ms, heap usage 661.207 MB -> 32.216 MB.\n====== future-genetic (functional) [default], iteration 0 completed (14742.129 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 51.821 ms, heap usage 114.841 MB -> 33.158 MB.\n====== future-genetic (functional) [default], iteration 1 completed (11014.493 ms) ======\n====== future-genetic (functional) [default], iteration 2 started ======\nGC before operation: completed in 34.821 ms, heap usage 68.320 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 2 completed (10628.352 ms) ======\n====== future-genetic (functional) [default], iteration 3 started ======\nGC before operation: completed in 38.504 ms, heap usage 57.876 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 3 completed (10722.143 ms) ======\n====== future-genetic (functional) [default], iteration 4 started ======\nGC before operation: completed in 39.692 ms, heap usage 145.206 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 4 completed (10840.012 ms) ======\n====== future-genetic (functional) [default], iteration 5 started ======\nGC before operation: completed in 38.411 ms, heap usage 81.011 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 5 completed (10598.435 ms) ======\n====== future-genetic (functional) [default], iteration 6 started ======\nGC before operation: completed in 40.019 ms, heap usage 144.534 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 6 completed (10786.150 ms) ======\n====== future-genetic (functional) [default], iteration 7 started ======\nGC before operation: completed in 48.015 ms, heap usage 171.419 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 7 completed (10652.683 ms) ======\n====== future-genetic (functional) [default], iteration 8 started ======\nGC before operation: completed in 35.498 ms, heap usage 37.426 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 8 completed (10488.698 ms) ======\n====== future-genetic (functional) [default], iteration 9 started ======\nGC before operation: completed in 42.383 ms, heap usage 130.505 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 9 completed (10682.271 ms) ======\n====== future-genetic (functional) [default], iteration 10 started ======\nGC before operation: completed in 48.742 ms, heap usage 134.970 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 10 completed (10549.840 ms) ======\n====== future-genetic (functional) [default], iteration 11 started ======\nGC before operation: completed in 41.808 ms, heap usage 156.009 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 11 completed (10851.547 ms) ======\n====== future-genetic (functional) [default], iteration 12 started ======\nGC before operation: completed in 40.139 ms, heap usage 163.381 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 12 completed (10940.461 ms) ======\n====== future-genetic (functional) [default], iteration 13 started ======\nGC before operation: completed in 35.048 ms, heap usage 80.372 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 13 completed (10876.099 ms) ======\n====== future-genetic (functional) [default], iteration 14 started ======\nGC before operation: completed in 43.468 ms, heap usage 62.997 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 14 completed (10763.606 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 70.620 ms, heap usage 85.721 MB -> 33.974 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 11\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (23373.227 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 371.313 ms, heap usage 780.679 MB -> 161.200 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (17055.803 ms) ======\n====== akka-uct (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 323.521 ms, heap usage 714.804 MB -> 140.346 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 2 completed (16644.579 ms) ======\n====== akka-uct (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 312.697 ms, heap usage 606.138 MB -> 139.703 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 3 completed (16230.901 ms) ======\n====== akka-uct (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 272.343 ms, heap usage 694.413 MB -> 139.888 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 4 completed (16222.783 ms) ======\n====== akka-uct (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 288.309 ms, heap usage 549.430 MB -> 124.976 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 5 completed (16061.576 ms) ======\n====== akka-uct (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 254.080 ms, heap usage 570.484 MB -> 130.699 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 6 completed (15769.690 ms) ======\n====== akka-uct (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 387.396 ms, heap usage 619.770 MB -> 158.750 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 7 completed (15901.168 ms) ======\n====== akka-uct (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 304.489 ms, heap usage 580.964 MB -> 149.879 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 8 completed (16178.151 ms) ======\n====== akka-uct (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 253.043 ms, heap usage 553.450 MB -> 150.939 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 9 completed (15874.839 ms) ======\n====== akka-uct (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 301.130 ms, heap usage 528.928 MB -> 139.937 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 10 completed (15982.587 ms) ======\n====== akka-uct (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 267.305 ms, heap usage 626.465 MB -> 131.010 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 11 completed (16353.495 ms) ======\n====== akka-uct (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 294.293 ms, heap usage 500.855 MB -> 153.125 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 12 completed (15969.903 ms) ======\n====== akka-uct (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 292.350 ms, heap usage 647.259 MB -> 125.388 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 13 completed (15322.843 ms) ======\n====== akka-uct (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 252.391 ms, heap usage 562.070 MB -> 128.190 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 14 completed (16083.172 ms) ======\n"
    },
    "movie-lens": {
        "times": [
            22878.805,
            14811.341,
            13632.892,
            12814.257,
            12978.413,
            14306.46,
            12568.443,
            11505.398,
            11706.594,
            11662.958,
            11293.424,
            11873.509,
            12263.435,
            12351.951,
            12112.256
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 111.440 ms, heap usage 193.716 MB -> 76.034 MB.\n====== scrabble (functional) [default], iteration 0 completed (1746.818 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 75.425 ms, heap usage 124.295 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 1 completed (822.799 ms) ======\n====== scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 103.806 ms, heap usage 309.363 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 2 completed (876.688 ms) ======\n====== scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 108.057 ms, heap usage 131.528 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 3 completed (772.422 ms) ======\n====== scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 90.330 ms, heap usage 339.197 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 4 completed (664.922 ms) ======\n====== scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 78.633 ms, heap usage 242.581 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 5 completed (767.926 ms) ======\n====== scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 80.529 ms, heap usage 243.067 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 6 completed (771.953 ms) ======\n====== scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 87.821 ms, heap usage 169.966 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 7 completed (713.175 ms) ======\n====== scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 85.627 ms, heap usage 126.363 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 8 completed (705.321 ms) ======\n====== scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 77.713 ms, heap usage 279.273 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 9 completed (595.178 ms) ======\n====== scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 90.853 ms, heap usage 197.665 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 10 completed (653.981 ms) ======\n====== scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 80.787 ms, heap usage 125.936 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 11 completed (671.613 ms) ======\n====== scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 81.092 ms, heap usage 326.788 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 12 completed (614.500 ms) ======\n====== scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 74.421 ms, heap usage 199.244 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 13 completed (687.061 ms) ======\n====== scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 77.486 ms, heap usage 357.036 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 14 completed (698.120 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 39.864 ms, heap usage 626.576 MB -> 29.596 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (20832.995 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 151.296 ms, heap usage 587.802 MB -> 148.935 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (10726.986 ms) ======\n====== page-rank (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 139.528 ms, heap usage 662.229 MB -> 149.044 MB.\n====== page-rank (apache-spark) [default], iteration 2 completed (10497.012 ms) ======\n====== page-rank (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 145.301 ms, heap usage 620.847 MB -> 149.161 MB.\n====== page-rank (apache-spark) [default], iteration 3 completed (10683.078 ms) ======\n====== page-rank (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 146.272 ms, heap usage 595.956 MB -> 149.275 MB.\n====== page-rank (apache-spark) [default], iteration 4 completed (11158.857 ms) ======\n====== page-rank (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 150.477 ms, heap usage 624.956 MB -> 149.389 MB.\n====== page-rank (apache-spark) [default], iteration 5 completed (10816.748 ms) ======\n====== page-rank (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 152.563 ms, heap usage 475.956 MB -> 149.705 MB.\n====== page-rank (apache-spark) [default], iteration 6 completed (10797.777 ms) ======\n====== page-rank (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 153.431 ms, heap usage 575.956 MB -> 149.630 MB.\n====== page-rank (apache-spark) [default], iteration 7 completed (10320.855 ms) ======\n====== page-rank (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 154.161 ms, heap usage 494.956 MB -> 149.734 MB.\n====== page-rank (apache-spark) [default], iteration 8 completed (10797.875 ms) ======\n====== page-rank (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 159.810 ms, heap usage 685.884 MB -> 149.850 MB.\n====== page-rank (apache-spark) [default], iteration 9 completed (10426.551 ms) ======\n====== page-rank (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 138.119 ms, heap usage 483.136 MB -> 149.929 MB.\n====== page-rank (apache-spark) [default], iteration 10 completed (11319.287 ms) ======\n====== page-rank (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 160.571 ms, heap usage 417.218 MB -> 150.048 MB.\n====== page-rank (apache-spark) [default], iteration 11 completed (10773.541 ms) ======\n====== page-rank (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 153.774 ms, heap usage 591.956 MB -> 150.197 MB.\n====== page-rank (apache-spark) [default], iteration 12 completed (10583.141 ms) ======\n====== page-rank (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 151.297 ms, heap usage 385.309 MB -> 150.212 MB.\n====== page-rank (apache-spark) [default], iteration 13 completed (11225.389 ms) ======\n====== page-rank (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 138.750 ms, heap usage 506.956 MB -> 150.287 MB.\n====== page-rank (apache-spark) [default], iteration 14 completed (11253.752 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 60.640 ms, heap usage 661.207 MB -> 32.216 MB.\n====== future-genetic (functional) [default], iteration 0 completed (14742.129 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 51.821 ms, heap usage 114.841 MB -> 33.158 MB.\n====== future-genetic (functional) [default], iteration 1 completed (11014.493 ms) ======\n====== future-genetic (functional) [default], iteration 2 started ======\nGC before operation: completed in 34.821 ms, heap usage 68.320 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 2 completed (10628.352 ms) ======\n====== future-genetic (functional) [default], iteration 3 started ======\nGC before operation: completed in 38.504 ms, heap usage 57.876 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 3 completed (10722.143 ms) ======\n====== future-genetic (functional) [default], iteration 4 started ======\nGC before operation: completed in 39.692 ms, heap usage 145.206 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 4 completed (10840.012 ms) ======\n====== future-genetic (functional) [default], iteration 5 started ======\nGC before operation: completed in 38.411 ms, heap usage 81.011 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 5 completed (10598.435 ms) ======\n====== future-genetic (functional) [default], iteration 6 started ======\nGC before operation: completed in 40.019 ms, heap usage 144.534 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 6 completed (10786.150 ms) ======\n====== future-genetic (functional) [default], iteration 7 started ======\nGC before operation: completed in 48.015 ms, heap usage 171.419 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 7 completed (10652.683 ms) ======\n====== future-genetic (functional) [default], iteration 8 started ======\nGC before operation: completed in 35.498 ms, heap usage 37.426 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 8 completed (10488.698 ms) ======\n====== future-genetic (functional) [default], iteration 9 started ======\nGC before operation: completed in 42.383 ms, heap usage 130.505 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 9 completed (10682.271 ms) ======\n====== future-genetic (functional) [default], iteration 10 started ======\nGC before operation: completed in 48.742 ms, heap usage 134.970 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 10 completed (10549.840 ms) ======\n====== future-genetic (functional) [default], iteration 11 started ======\nGC before operation: completed in 41.808 ms, heap usage 156.009 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 11 completed (10851.547 ms) ======\n====== future-genetic (functional) [default], iteration 12 started ======\nGC before operation: completed in 40.139 ms, heap usage 163.381 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 12 completed (10940.461 ms) ======\n====== future-genetic (functional) [default], iteration 13 started ======\nGC before operation: completed in 35.048 ms, heap usage 80.372 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 13 completed (10876.099 ms) ======\n====== future-genetic (functional) [default], iteration 14 started ======\nGC before operation: completed in 43.468 ms, heap usage 62.997 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 14 completed (10763.606 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 70.620 ms, heap usage 85.721 MB -> 33.974 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 11\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (23373.227 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 371.313 ms, heap usage 780.679 MB -> 161.200 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (17055.803 ms) ======\n====== akka-uct (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 323.521 ms, heap usage 714.804 MB -> 140.346 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 2 completed (16644.579 ms) ======\n====== akka-uct (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 312.697 ms, heap usage 606.138 MB -> 139.703 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 3 completed (16230.901 ms) ======\n====== akka-uct (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 272.343 ms, heap usage 694.413 MB -> 139.888 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 4 completed (16222.783 ms) ======\n====== akka-uct (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 288.309 ms, heap usage 549.430 MB -> 124.976 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 5 completed (16061.576 ms) ======\n====== akka-uct (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 254.080 ms, heap usage 570.484 MB -> 130.699 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 6 completed (15769.690 ms) ======\n====== akka-uct (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 387.396 ms, heap usage 619.770 MB -> 158.750 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 7 completed (15901.168 ms) ======\n====== akka-uct (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 304.489 ms, heap usage 580.964 MB -> 149.879 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 8 completed (16178.151 ms) ======\n====== akka-uct (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 253.043 ms, heap usage 553.450 MB -> 150.939 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 9 completed (15874.839 ms) ======\n====== akka-uct (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 301.130 ms, heap usage 528.928 MB -> 139.937 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 10 completed (15982.587 ms) ======\n====== akka-uct (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 267.305 ms, heap usage 626.465 MB -> 131.010 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 11 completed (16353.495 ms) ======\n====== akka-uct (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 294.293 ms, heap usage 500.855 MB -> 153.125 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 12 completed (15969.903 ms) ======\n====== akka-uct (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 292.350 ms, heap usage 647.259 MB -> 125.388 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 13 completed (15322.843 ms) ======\n====== akka-uct (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 252.391 ms, heap usage 562.070 MB -> 128.190 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 14 completed (16083.172 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 2 (out of 2) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 134.630 ms, heap usage 463.678 MB -> 85.476 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (22878.805 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 103.188 ms, heap usage 272.080 MB -> 100.040 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (14811.341 ms) ======\n====== movie-lens (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 144.144 ms, heap usage 208.849 MB -> 97.194 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 2 completed (13632.892 ms) ======\n====== movie-lens (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 122.890 ms, heap usage 173.120 MB -> 97.842 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 3 completed (12814.257 ms) ======\n====== movie-lens (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 113.279 ms, heap usage 237.308 MB -> 98.141 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 4 completed (12978.413 ms) ======\n====== movie-lens (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 119.099 ms, heap usage 219.670 MB -> 98.103 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 5 completed (14306.460 ms) ======\n====== movie-lens (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 123.459 ms, heap usage 175.077 MB -> 98.404 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 6 completed (12568.443 ms) ======\n====== movie-lens (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 115.564 ms, heap usage 119.760 MB -> 100.031 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 7 completed (11505.398 ms) ======\n====== movie-lens (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 112.918 ms, heap usage 255.198 MB -> 99.024 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 8 completed (11706.594 ms) ======\n====== movie-lens (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 170.418 ms, heap usage 189.372 MB -> 98.513 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 9 completed (11662.958 ms) ======\n====== movie-lens (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 218.616 ms, heap usage 163.601 MB -> 98.629 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 10 completed (11293.424 ms) ======\n====== movie-lens (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 126.280 ms, heap usage 236.690 MB -> 98.603 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 11 completed (11873.509 ms) ======\n====== movie-lens (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 121.729 ms, heap usage 154.433 MB -> 98.657 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 12 completed (12263.435 ms) ======\n====== movie-lens (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 113.550 ms, heap usage 470.143 MB -> 102.266 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 13 completed (12351.951 ms) ======\n====== movie-lens (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 107.375 ms, heap usage 274.093 MB -> 98.738 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 14 completed (12112.256 ms) ======\n"
    },
    "scala-doku": {
        "times": [
            2753.475,
            2340.567,
            2269.313,
            1898.181,
            1792.43,
            1786.944,
            1866.83,
            1799.903,
            1782.75,
            1778.745,
            1794.655,
            1818.58,
            1848.215,
            1809.411,
            1803.934
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 111.440 ms, heap usage 193.716 MB -> 76.034 MB.\n====== scrabble (functional) [default], iteration 0 completed (1746.818 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 75.425 ms, heap usage 124.295 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 1 completed (822.799 ms) ======\n====== scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 103.806 ms, heap usage 309.363 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 2 completed (876.688 ms) ======\n====== scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 108.057 ms, heap usage 131.528 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 3 completed (772.422 ms) ======\n====== scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 90.330 ms, heap usage 339.197 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 4 completed (664.922 ms) ======\n====== scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 78.633 ms, heap usage 242.581 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 5 completed (767.926 ms) ======\n====== scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 80.529 ms, heap usage 243.067 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 6 completed (771.953 ms) ======\n====== scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 87.821 ms, heap usage 169.966 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 7 completed (713.175 ms) ======\n====== scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 85.627 ms, heap usage 126.363 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 8 completed (705.321 ms) ======\n====== scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 77.713 ms, heap usage 279.273 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 9 completed (595.178 ms) ======\n====== scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 90.853 ms, heap usage 197.665 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 10 completed (653.981 ms) ======\n====== scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 80.787 ms, heap usage 125.936 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 11 completed (671.613 ms) ======\n====== scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 81.092 ms, heap usage 326.788 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 12 completed (614.500 ms) ======\n====== scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 74.421 ms, heap usage 199.244 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 13 completed (687.061 ms) ======\n====== scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 77.486 ms, heap usage 357.036 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 14 completed (698.120 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 39.864 ms, heap usage 626.576 MB -> 29.596 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (20832.995 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 151.296 ms, heap usage 587.802 MB -> 148.935 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (10726.986 ms) ======\n====== page-rank (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 139.528 ms, heap usage 662.229 MB -> 149.044 MB.\n====== page-rank (apache-spark) [default], iteration 2 completed (10497.012 ms) ======\n====== page-rank (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 145.301 ms, heap usage 620.847 MB -> 149.161 MB.\n====== page-rank (apache-spark) [default], iteration 3 completed (10683.078 ms) ======\n====== page-rank (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 146.272 ms, heap usage 595.956 MB -> 149.275 MB.\n====== page-rank (apache-spark) [default], iteration 4 completed (11158.857 ms) ======\n====== page-rank (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 150.477 ms, heap usage 624.956 MB -> 149.389 MB.\n====== page-rank (apache-spark) [default], iteration 5 completed (10816.748 ms) ======\n====== page-rank (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 152.563 ms, heap usage 475.956 MB -> 149.705 MB.\n====== page-rank (apache-spark) [default], iteration 6 completed (10797.777 ms) ======\n====== page-rank (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 153.431 ms, heap usage 575.956 MB -> 149.630 MB.\n====== page-rank (apache-spark) [default], iteration 7 completed (10320.855 ms) ======\n====== page-rank (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 154.161 ms, heap usage 494.956 MB -> 149.734 MB.\n====== page-rank (apache-spark) [default], iteration 8 completed (10797.875 ms) ======\n====== page-rank (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 159.810 ms, heap usage 685.884 MB -> 149.850 MB.\n====== page-rank (apache-spark) [default], iteration 9 completed (10426.551 ms) ======\n====== page-rank (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 138.119 ms, heap usage 483.136 MB -> 149.929 MB.\n====== page-rank (apache-spark) [default], iteration 10 completed (11319.287 ms) ======\n====== page-rank (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 160.571 ms, heap usage 417.218 MB -> 150.048 MB.\n====== page-rank (apache-spark) [default], iteration 11 completed (10773.541 ms) ======\n====== page-rank (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 153.774 ms, heap usage 591.956 MB -> 150.197 MB.\n====== page-rank (apache-spark) [default], iteration 12 completed (10583.141 ms) ======\n====== page-rank (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 151.297 ms, heap usage 385.309 MB -> 150.212 MB.\n====== page-rank (apache-spark) [default], iteration 13 completed (11225.389 ms) ======\n====== page-rank (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 138.750 ms, heap usage 506.956 MB -> 150.287 MB.\n====== page-rank (apache-spark) [default], iteration 14 completed (11253.752 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 60.640 ms, heap usage 661.207 MB -> 32.216 MB.\n====== future-genetic (functional) [default], iteration 0 completed (14742.129 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 51.821 ms, heap usage 114.841 MB -> 33.158 MB.\n====== future-genetic (functional) [default], iteration 1 completed (11014.493 ms) ======\n====== future-genetic (functional) [default], iteration 2 started ======\nGC before operation: completed in 34.821 ms, heap usage 68.320 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 2 completed (10628.352 ms) ======\n====== future-genetic (functional) [default], iteration 3 started ======\nGC before operation: completed in 38.504 ms, heap usage 57.876 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 3 completed (10722.143 ms) ======\n====== future-genetic (functional) [default], iteration 4 started ======\nGC before operation: completed in 39.692 ms, heap usage 145.206 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 4 completed (10840.012 ms) ======\n====== future-genetic (functional) [default], iteration 5 started ======\nGC before operation: completed in 38.411 ms, heap usage 81.011 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 5 completed (10598.435 ms) ======\n====== future-genetic (functional) [default], iteration 6 started ======\nGC before operation: completed in 40.019 ms, heap usage 144.534 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 6 completed (10786.150 ms) ======\n====== future-genetic (functional) [default], iteration 7 started ======\nGC before operation: completed in 48.015 ms, heap usage 171.419 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 7 completed (10652.683 ms) ======\n====== future-genetic (functional) [default], iteration 8 started ======\nGC before operation: completed in 35.498 ms, heap usage 37.426 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 8 completed (10488.698 ms) ======\n====== future-genetic (functional) [default], iteration 9 started ======\nGC before operation: completed in 42.383 ms, heap usage 130.505 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 9 completed (10682.271 ms) ======\n====== future-genetic (functional) [default], iteration 10 started ======\nGC before operation: completed in 48.742 ms, heap usage 134.970 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 10 completed (10549.840 ms) ======\n====== future-genetic (functional) [default], iteration 11 started ======\nGC before operation: completed in 41.808 ms, heap usage 156.009 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 11 completed (10851.547 ms) ======\n====== future-genetic (functional) [default], iteration 12 started ======\nGC before operation: completed in 40.139 ms, heap usage 163.381 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 12 completed (10940.461 ms) ======\n====== future-genetic (functional) [default], iteration 13 started ======\nGC before operation: completed in 35.048 ms, heap usage 80.372 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 13 completed (10876.099 ms) ======\n====== future-genetic (functional) [default], iteration 14 started ======\nGC before operation: completed in 43.468 ms, heap usage 62.997 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 14 completed (10763.606 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 70.620 ms, heap usage 85.721 MB -> 33.974 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 11\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (23373.227 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 371.313 ms, heap usage 780.679 MB -> 161.200 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (17055.803 ms) ======\n====== akka-uct (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 323.521 ms, heap usage 714.804 MB -> 140.346 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 2 completed (16644.579 ms) ======\n====== akka-uct (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 312.697 ms, heap usage 606.138 MB -> 139.703 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 3 completed (16230.901 ms) ======\n====== akka-uct (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 272.343 ms, heap usage 694.413 MB -> 139.888 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 4 completed (16222.783 ms) ======\n====== akka-uct (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 288.309 ms, heap usage 549.430 MB -> 124.976 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 5 completed (16061.576 ms) ======\n====== akka-uct (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 254.080 ms, heap usage 570.484 MB -> 130.699 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 6 completed (15769.690 ms) ======\n====== akka-uct (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 387.396 ms, heap usage 619.770 MB -> 158.750 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 7 completed (15901.168 ms) ======\n====== akka-uct (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 304.489 ms, heap usage 580.964 MB -> 149.879 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 8 completed (16178.151 ms) ======\n====== akka-uct (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 253.043 ms, heap usage 553.450 MB -> 150.939 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 9 completed (15874.839 ms) ======\n====== akka-uct (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 301.130 ms, heap usage 528.928 MB -> 139.937 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 10 completed (15982.587 ms) ======\n====== akka-uct (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 267.305 ms, heap usage 626.465 MB -> 131.010 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 11 completed (16353.495 ms) ======\n====== akka-uct (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 294.293 ms, heap usage 500.855 MB -> 153.125 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 12 completed (15969.903 ms) ======\n====== akka-uct (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 292.350 ms, heap usage 647.259 MB -> 125.388 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 13 completed (15322.843 ms) ======\n====== akka-uct (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 252.391 ms, heap usage 562.070 MB -> 128.190 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 14 completed (16083.172 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 2 (out of 2) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 134.630 ms, heap usage 463.678 MB -> 85.476 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (22878.805 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 103.188 ms, heap usage 272.080 MB -> 100.040 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (14811.341 ms) ======\n====== movie-lens (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 144.144 ms, heap usage 208.849 MB -> 97.194 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 2 completed (13632.892 ms) ======\n====== movie-lens (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 122.890 ms, heap usage 173.120 MB -> 97.842 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 3 completed (12814.257 ms) ======\n====== movie-lens (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 113.279 ms, heap usage 237.308 MB -> 98.141 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 4 completed (12978.413 ms) ======\n====== movie-lens (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 119.099 ms, heap usage 219.670 MB -> 98.103 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 5 completed (14306.460 ms) ======\n====== movie-lens (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 123.459 ms, heap usage 175.077 MB -> 98.404 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 6 completed (12568.443 ms) ======\n====== movie-lens (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 115.564 ms, heap usage 119.760 MB -> 100.031 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 7 completed (11505.398 ms) ======\n====== movie-lens (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 112.918 ms, heap usage 255.198 MB -> 99.024 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 8 completed (11706.594 ms) ======\n====== movie-lens (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 170.418 ms, heap usage 189.372 MB -> 98.513 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 9 completed (11662.958 ms) ======\n====== movie-lens (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 218.616 ms, heap usage 163.601 MB -> 98.629 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 10 completed (11293.424 ms) ======\n====== movie-lens (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 126.280 ms, heap usage 236.690 MB -> 98.603 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 11 completed (11873.509 ms) ======\n====== movie-lens (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 121.729 ms, heap usage 154.433 MB -> 98.657 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 12 completed (12263.435 ms) ======\n====== movie-lens (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 113.550 ms, heap usage 470.143 MB -> 102.266 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 13 completed (12351.951 ms) ======\n====== movie-lens (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 107.375 ms, heap usage 274.093 MB -> 98.738 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 14 completed (12112.256 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 83.428 ms, heap usage 476.231 MB -> 58.268 MB.\n====== scala-doku (scala) [default], iteration 0 completed (2753.475 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 83.813 ms, heap usage 150.542 MB -> 58.243 MB.\n====== scala-doku (scala) [default], iteration 1 completed (2340.567 ms) ======\n====== scala-doku (scala) [default], iteration 2 started ======\nGC before operation: completed in 88.607 ms, heap usage 121.743 MB -> 58.244 MB.\n====== scala-doku (scala) [default], iteration 2 completed (2269.313 ms) ======\n====== scala-doku (scala) [default], iteration 3 started ======\nGC before operation: completed in 79.133 ms, heap usage 118.244 MB -> 58.245 MB.\n====== scala-doku (scala) [default], iteration 3 completed (1898.181 ms) ======\n====== scala-doku (scala) [default], iteration 4 started ======\nGC before operation: completed in 86.643 ms, heap usage 120.745 MB -> 58.245 MB.\n====== scala-doku (scala) [default], iteration 4 completed (1792.430 ms) ======\n====== scala-doku (scala) [default], iteration 5 started ======\nGC before operation: completed in 77.315 ms, heap usage 119.245 MB -> 58.245 MB.\n====== scala-doku (scala) [default], iteration 5 completed (1786.944 ms) ======\n====== scala-doku (scala) [default], iteration 6 started ======\nGC before operation: completed in 89.168 ms, heap usage 120.745 MB -> 58.245 MB.\n====== scala-doku (scala) [default], iteration 6 completed (1866.830 ms) ======\n====== scala-doku (scala) [default], iteration 7 started ======\nGC before operation: completed in 76.164 ms, heap usage 120.245 MB -> 58.246 MB.\n====== scala-doku (scala) [default], iteration 7 completed (1799.903 ms) ======\n====== scala-doku (scala) [default], iteration 8 started ======\nGC before operation: completed in 79.207 ms, heap usage 119.746 MB -> 58.246 MB.\n====== scala-doku (scala) [default], iteration 8 completed (1782.750 ms) ======\n====== scala-doku (scala) [default], iteration 9 started ======\nGC before operation: completed in 86.288 ms, heap usage 120.246 MB -> 58.247 MB.\n====== scala-doku (scala) [default], iteration 9 completed (1778.745 ms) ======\n====== scala-doku (scala) [default], iteration 10 started ======\nGC before operation: completed in 77.760 ms, heap usage 119.747 MB -> 58.247 MB.\n====== scala-doku (scala) [default], iteration 10 completed (1794.655 ms) ======\n====== scala-doku (scala) [default], iteration 11 started ======\nGC before operation: completed in 92.459 ms, heap usage 119.747 MB -> 58.247 MB.\n====== scala-doku (scala) [default], iteration 11 completed (1818.580 ms) ======\n====== scala-doku (scala) [default], iteration 12 started ======\nGC before operation: completed in 77.984 ms, heap usage 120.247 MB -> 58.247 MB.\n====== scala-doku (scala) [default], iteration 12 completed (1848.215 ms) ======\n====== scala-doku (scala) [default], iteration 13 started ======\nGC before operation: completed in 93.441 ms, heap usage 119.747 MB -> 58.247 MB.\n====== scala-doku (scala) [default], iteration 13 completed (1809.411 ms) ======\n====== scala-doku (scala) [default], iteration 14 started ======\nGC before operation: completed in 82.582 ms, heap usage 119.747 MB -> 58.247 MB.\n====== scala-doku (scala) [default], iteration 14 completed (1803.934 ms) ======\n"
    },
    "chi-square": {
        "times": [
            5198.635,
            1119.485,
            1038.669,
            988.864,
            1021.11,
            1016.339,
            1044.792,
            892.107,
            912.148,
            916.193,
            706.035,
            764.527,
            858.768,
            862.769,
            703.576
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 111.440 ms, heap usage 193.716 MB -> 76.034 MB.\n====== scrabble (functional) [default], iteration 0 completed (1746.818 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 75.425 ms, heap usage 124.295 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 1 completed (822.799 ms) ======\n====== scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 103.806 ms, heap usage 309.363 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 2 completed (876.688 ms) ======\n====== scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 108.057 ms, heap usage 131.528 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 3 completed (772.422 ms) ======\n====== scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 90.330 ms, heap usage 339.197 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 4 completed (664.922 ms) ======\n====== scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 78.633 ms, heap usage 242.581 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 5 completed (767.926 ms) ======\n====== scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 80.529 ms, heap usage 243.067 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 6 completed (771.953 ms) ======\n====== scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 87.821 ms, heap usage 169.966 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 7 completed (713.175 ms) ======\n====== scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 85.627 ms, heap usage 126.363 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 8 completed (705.321 ms) ======\n====== scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 77.713 ms, heap usage 279.273 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 9 completed (595.178 ms) ======\n====== scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 90.853 ms, heap usage 197.665 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 10 completed (653.981 ms) ======\n====== scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 80.787 ms, heap usage 125.936 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 11 completed (671.613 ms) ======\n====== scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 81.092 ms, heap usage 326.788 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 12 completed (614.500 ms) ======\n====== scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 74.421 ms, heap usage 199.244 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 13 completed (687.061 ms) ======\n====== scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 77.486 ms, heap usage 357.036 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 14 completed (698.120 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 39.864 ms, heap usage 626.576 MB -> 29.596 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (20832.995 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 151.296 ms, heap usage 587.802 MB -> 148.935 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (10726.986 ms) ======\n====== page-rank (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 139.528 ms, heap usage 662.229 MB -> 149.044 MB.\n====== page-rank (apache-spark) [default], iteration 2 completed (10497.012 ms) ======\n====== page-rank (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 145.301 ms, heap usage 620.847 MB -> 149.161 MB.\n====== page-rank (apache-spark) [default], iteration 3 completed (10683.078 ms) ======\n====== page-rank (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 146.272 ms, heap usage 595.956 MB -> 149.275 MB.\n====== page-rank (apache-spark) [default], iteration 4 completed (11158.857 ms) ======\n====== page-rank (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 150.477 ms, heap usage 624.956 MB -> 149.389 MB.\n====== page-rank (apache-spark) [default], iteration 5 completed (10816.748 ms) ======\n====== page-rank (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 152.563 ms, heap usage 475.956 MB -> 149.705 MB.\n====== page-rank (apache-spark) [default], iteration 6 completed (10797.777 ms) ======\n====== page-rank (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 153.431 ms, heap usage 575.956 MB -> 149.630 MB.\n====== page-rank (apache-spark) [default], iteration 7 completed (10320.855 ms) ======\n====== page-rank (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 154.161 ms, heap usage 494.956 MB -> 149.734 MB.\n====== page-rank (apache-spark) [default], iteration 8 completed (10797.875 ms) ======\n====== page-rank (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 159.810 ms, heap usage 685.884 MB -> 149.850 MB.\n====== page-rank (apache-spark) [default], iteration 9 completed (10426.551 ms) ======\n====== page-rank (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 138.119 ms, heap usage 483.136 MB -> 149.929 MB.\n====== page-rank (apache-spark) [default], iteration 10 completed (11319.287 ms) ======\n====== page-rank (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 160.571 ms, heap usage 417.218 MB -> 150.048 MB.\n====== page-rank (apache-spark) [default], iteration 11 completed (10773.541 ms) ======\n====== page-rank (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 153.774 ms, heap usage 591.956 MB -> 150.197 MB.\n====== page-rank (apache-spark) [default], iteration 12 completed (10583.141 ms) ======\n====== page-rank (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 151.297 ms, heap usage 385.309 MB -> 150.212 MB.\n====== page-rank (apache-spark) [default], iteration 13 completed (11225.389 ms) ======\n====== page-rank (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 138.750 ms, heap usage 506.956 MB -> 150.287 MB.\n====== page-rank (apache-spark) [default], iteration 14 completed (11253.752 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 60.640 ms, heap usage 661.207 MB -> 32.216 MB.\n====== future-genetic (functional) [default], iteration 0 completed (14742.129 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 51.821 ms, heap usage 114.841 MB -> 33.158 MB.\n====== future-genetic (functional) [default], iteration 1 completed (11014.493 ms) ======\n====== future-genetic (functional) [default], iteration 2 started ======\nGC before operation: completed in 34.821 ms, heap usage 68.320 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 2 completed (10628.352 ms) ======\n====== future-genetic (functional) [default], iteration 3 started ======\nGC before operation: completed in 38.504 ms, heap usage 57.876 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 3 completed (10722.143 ms) ======\n====== future-genetic (functional) [default], iteration 4 started ======\nGC before operation: completed in 39.692 ms, heap usage 145.206 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 4 completed (10840.012 ms) ======\n====== future-genetic (functional) [default], iteration 5 started ======\nGC before operation: completed in 38.411 ms, heap usage 81.011 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 5 completed (10598.435 ms) ======\n====== future-genetic (functional) [default], iteration 6 started ======\nGC before operation: completed in 40.019 ms, heap usage 144.534 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 6 completed (10786.150 ms) ======\n====== future-genetic (functional) [default], iteration 7 started ======\nGC before operation: completed in 48.015 ms, heap usage 171.419 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 7 completed (10652.683 ms) ======\n====== future-genetic (functional) [default], iteration 8 started ======\nGC before operation: completed in 35.498 ms, heap usage 37.426 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 8 completed (10488.698 ms) ======\n====== future-genetic (functional) [default], iteration 9 started ======\nGC before operation: completed in 42.383 ms, heap usage 130.505 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 9 completed (10682.271 ms) ======\n====== future-genetic (functional) [default], iteration 10 started ======\nGC before operation: completed in 48.742 ms, heap usage 134.970 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 10 completed (10549.840 ms) ======\n====== future-genetic (functional) [default], iteration 11 started ======\nGC before operation: completed in 41.808 ms, heap usage 156.009 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 11 completed (10851.547 ms) ======\n====== future-genetic (functional) [default], iteration 12 started ======\nGC before operation: completed in 40.139 ms, heap usage 163.381 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 12 completed (10940.461 ms) ======\n====== future-genetic (functional) [default], iteration 13 started ======\nGC before operation: completed in 35.048 ms, heap usage 80.372 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 13 completed (10876.099 ms) ======\n====== future-genetic (functional) [default], iteration 14 started ======\nGC before operation: completed in 43.468 ms, heap usage 62.997 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 14 completed (10763.606 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 70.620 ms, heap usage 85.721 MB -> 33.974 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 11\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (23373.227 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 371.313 ms, heap usage 780.679 MB -> 161.200 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (17055.803 ms) ======\n====== akka-uct (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 323.521 ms, heap usage 714.804 MB -> 140.346 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 2 completed (16644.579 ms) ======\n====== akka-uct (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 312.697 ms, heap usage 606.138 MB -> 139.703 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 3 completed (16230.901 ms) ======\n====== akka-uct (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 272.343 ms, heap usage 694.413 MB -> 139.888 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 4 completed (16222.783 ms) ======\n====== akka-uct (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 288.309 ms, heap usage 549.430 MB -> 124.976 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 5 completed (16061.576 ms) ======\n====== akka-uct (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 254.080 ms, heap usage 570.484 MB -> 130.699 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 6 completed (15769.690 ms) ======\n====== akka-uct (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 387.396 ms, heap usage 619.770 MB -> 158.750 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 7 completed (15901.168 ms) ======\n====== akka-uct (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 304.489 ms, heap usage 580.964 MB -> 149.879 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 8 completed (16178.151 ms) ======\n====== akka-uct (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 253.043 ms, heap usage 553.450 MB -> 150.939 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 9 completed (15874.839 ms) ======\n====== akka-uct (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 301.130 ms, heap usage 528.928 MB -> 139.937 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 10 completed (15982.587 ms) ======\n====== akka-uct (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 267.305 ms, heap usage 626.465 MB -> 131.010 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 11 completed (16353.495 ms) ======\n====== akka-uct (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 294.293 ms, heap usage 500.855 MB -> 153.125 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 12 completed (15969.903 ms) ======\n====== akka-uct (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 292.350 ms, heap usage 647.259 MB -> 125.388 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 13 completed (15322.843 ms) ======\n====== akka-uct (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 252.391 ms, heap usage 562.070 MB -> 128.190 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 14 completed (16083.172 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 2 (out of 2) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 134.630 ms, heap usage 463.678 MB -> 85.476 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (22878.805 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 103.188 ms, heap usage 272.080 MB -> 100.040 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (14811.341 ms) ======\n====== movie-lens (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 144.144 ms, heap usage 208.849 MB -> 97.194 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 2 completed (13632.892 ms) ======\n====== movie-lens (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 122.890 ms, heap usage 173.120 MB -> 97.842 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 3 completed (12814.257 ms) ======\n====== movie-lens (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 113.279 ms, heap usage 237.308 MB -> 98.141 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 4 completed (12978.413 ms) ======\n====== movie-lens (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 119.099 ms, heap usage 219.670 MB -> 98.103 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 5 completed (14306.460 ms) ======\n====== movie-lens (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 123.459 ms, heap usage 175.077 MB -> 98.404 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 6 completed (12568.443 ms) ======\n====== movie-lens (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 115.564 ms, heap usage 119.760 MB -> 100.031 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 7 completed (11505.398 ms) ======\n====== movie-lens (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 112.918 ms, heap usage 255.198 MB -> 99.024 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 8 completed (11706.594 ms) ======\n====== movie-lens (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 170.418 ms, heap usage 189.372 MB -> 98.513 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 9 completed (11662.958 ms) ======\n====== movie-lens (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 218.616 ms, heap usage 163.601 MB -> 98.629 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 10 completed (11293.424 ms) ======\n====== movie-lens (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 126.280 ms, heap usage 236.690 MB -> 98.603 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 11 completed (11873.509 ms) ======\n====== movie-lens (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 121.729 ms, heap usage 154.433 MB -> 98.657 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 12 completed (12263.435 ms) ======\n====== movie-lens (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 113.550 ms, heap usage 470.143 MB -> 102.266 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 13 completed (12351.951 ms) ======\n====== movie-lens (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 107.375 ms, heap usage 274.093 MB -> 98.738 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 14 completed (12112.256 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 83.428 ms, heap usage 476.231 MB -> 58.268 MB.\n====== scala-doku (scala) [default], iteration 0 completed (2753.475 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 83.813 ms, heap usage 150.542 MB -> 58.243 MB.\n====== scala-doku (scala) [default], iteration 1 completed (2340.567 ms) ======\n====== scala-doku (scala) [default], iteration 2 started ======\nGC before operation: completed in 88.607 ms, heap usage 121.743 MB -> 58.244 MB.\n====== scala-doku (scala) [default], iteration 2 completed (2269.313 ms) ======\n====== scala-doku (scala) [default], iteration 3 started ======\nGC before operation: completed in 79.133 ms, heap usage 118.244 MB -> 58.245 MB.\n====== scala-doku (scala) [default], iteration 3 completed (1898.181 ms) ======\n====== scala-doku (scala) [default], iteration 4 started ======\nGC before operation: completed in 86.643 ms, heap usage 120.745 MB -> 58.245 MB.\n====== scala-doku (scala) [default], iteration 4 completed (1792.430 ms) ======\n====== scala-doku (scala) [default], iteration 5 started ======\nGC before operation: completed in 77.315 ms, heap usage 119.245 MB -> 58.245 MB.\n====== scala-doku (scala) [default], iteration 5 completed (1786.944 ms) ======\n====== scala-doku (scala) [default], iteration 6 started ======\nGC before operation: completed in 89.168 ms, heap usage 120.745 MB -> 58.245 MB.\n====== scala-doku (scala) [default], iteration 6 completed (1866.830 ms) ======\n====== scala-doku (scala) [default], iteration 7 started ======\nGC before operation: completed in 76.164 ms, heap usage 120.245 MB -> 58.246 MB.\n====== scala-doku (scala) [default], iteration 7 completed (1799.903 ms) ======\n====== scala-doku (scala) [default], iteration 8 started ======\nGC before operation: completed in 79.207 ms, heap usage 119.746 MB -> 58.246 MB.\n====== scala-doku (scala) [default], iteration 8 completed (1782.750 ms) ======\n====== scala-doku (scala) [default], iteration 9 started ======\nGC before operation: completed in 86.288 ms, heap usage 120.246 MB -> 58.247 MB.\n====== scala-doku (scala) [default], iteration 9 completed (1778.745 ms) ======\n====== scala-doku (scala) [default], iteration 10 started ======\nGC before operation: completed in 77.760 ms, heap usage 119.747 MB -> 58.247 MB.\n====== scala-doku (scala) [default], iteration 10 completed (1794.655 ms) ======\n====== scala-doku (scala) [default], iteration 11 started ======\nGC before operation: completed in 92.459 ms, heap usage 119.747 MB -> 58.247 MB.\n====== scala-doku (scala) [default], iteration 11 completed (1818.580 ms) ======\n====== scala-doku (scala) [default], iteration 12 started ======\nGC before operation: completed in 77.984 ms, heap usage 120.247 MB -> 58.247 MB.\n====== scala-doku (scala) [default], iteration 12 completed (1848.215 ms) ======\n====== scala-doku (scala) [default], iteration 13 started ======\nGC before operation: completed in 93.441 ms, heap usage 119.747 MB -> 58.247 MB.\n====== scala-doku (scala) [default], iteration 13 completed (1809.411 ms) ======\n====== scala-doku (scala) [default], iteration 14 started ======\nGC before operation: completed in 82.582 ms, heap usage 119.747 MB -> 58.247 MB.\n====== scala-doku (scala) [default], iteration 14 completed (1803.934 ms) ======\nNOTE: 'chi-square' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== chi-square (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 99.379 ms, heap usage 319.426 MB -> 63.405 MB.\n====== chi-square (apache-spark) [default], iteration 0 completed (5198.635 ms) ======\n====== chi-square (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 217.985 ms, heap usage 339.427 MB -> 209.273 MB.\n====== chi-square (apache-spark) [default], iteration 1 completed (1119.485 ms) ======\n====== chi-square (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 175.933 ms, heap usage 299.968 MB -> 209.346 MB.\n====== chi-square (apache-spark) [default], iteration 2 completed (1038.669 ms) ======\n====== chi-square (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 162.484 ms, heap usage 434.584 MB -> 209.395 MB.\n====== chi-square (apache-spark) [default], iteration 3 completed (988.864 ms) ======\n====== chi-square (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 185.658 ms, heap usage 472.608 MB -> 209.448 MB.\n====== chi-square (apache-spark) [default], iteration 4 completed (1021.110 ms) ======\n====== chi-square (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 161.400 ms, heap usage 424.379 MB -> 209.494 MB.\n====== chi-square (apache-spark) [default], iteration 5 completed (1016.339 ms) ======\n====== chi-square (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 165.385 ms, heap usage 377.344 MB -> 209.638 MB.\n====== chi-square (apache-spark) [default], iteration 6 completed (1044.792 ms) ======\n====== chi-square (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 151.433 ms, heap usage 385.817 MB -> 209.712 MB.\n====== chi-square (apache-spark) [default], iteration 7 completed (892.107 ms) ======\n====== chi-square (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 148.497 ms, heap usage 375.358 MB -> 209.695 MB.\n====== chi-square (apache-spark) [default], iteration 8 completed (912.148 ms) ======\n====== chi-square (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 186.559 ms, heap usage 381.260 MB -> 209.735 MB.\n====== chi-square (apache-spark) [default], iteration 9 completed (916.193 ms) ======\n====== chi-square (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 172.071 ms, heap usage 375.984 MB -> 209.776 MB.\n====== chi-square (apache-spark) [default], iteration 10 completed (706.035 ms) ======\n====== chi-square (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 142.619 ms, heap usage 232.457 MB -> 209.816 MB.\n====== chi-square (apache-spark) [default], iteration 11 completed (764.527 ms) ======\n====== chi-square (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 164.121 ms, heap usage 670.340 MB -> 209.852 MB.\n====== chi-square (apache-spark) [default], iteration 12 completed (858.768 ms) ======\n====== chi-square (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 159.826 ms, heap usage 316.763 MB -> 209.890 MB.\n====== chi-square (apache-spark) [default], iteration 13 completed (862.769 ms) ======\n====== chi-square (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 166.687 ms, heap usage 379.775 MB -> 209.921 MB.\n====== chi-square (apache-spark) [default], iteration 14 completed (703.576 ms) ======\n"
    },
    "fj-kmeans": {
        "times": [
            8529.473,
            7479.812,
            7610.407,
            7571.793,
            7516.518,
            8339.655,
            7633.795,
            7335.928,
            7359.912,
            8379.108,
            8029.337,
            7673.166,
            7460.127,
            7646.174,
            7391.153
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 111.440 ms, heap usage 193.716 MB -> 76.034 MB.\n====== scrabble (functional) [default], iteration 0 completed (1746.818 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 75.425 ms, heap usage 124.295 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 1 completed (822.799 ms) ======\n====== scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 103.806 ms, heap usage 309.363 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 2 completed (876.688 ms) ======\n====== scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 108.057 ms, heap usage 131.528 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 3 completed (772.422 ms) ======\n====== scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 90.330 ms, heap usage 339.197 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 4 completed (664.922 ms) ======\n====== scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 78.633 ms, heap usage 242.581 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 5 completed (767.926 ms) ======\n====== scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 80.529 ms, heap usage 243.067 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 6 completed (771.953 ms) ======\n====== scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 87.821 ms, heap usage 169.966 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 7 completed (713.175 ms) ======\n====== scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 85.627 ms, heap usage 126.363 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 8 completed (705.321 ms) ======\n====== scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 77.713 ms, heap usage 279.273 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 9 completed (595.178 ms) ======\n====== scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 90.853 ms, heap usage 197.665 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 10 completed (653.981 ms) ======\n====== scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 80.787 ms, heap usage 125.936 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 11 completed (671.613 ms) ======\n====== scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 81.092 ms, heap usage 326.788 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 12 completed (614.500 ms) ======\n====== scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 74.421 ms, heap usage 199.244 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 13 completed (687.061 ms) ======\n====== scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 77.486 ms, heap usage 357.036 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 14 completed (698.120 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 39.864 ms, heap usage 626.576 MB -> 29.596 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (20832.995 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 151.296 ms, heap usage 587.802 MB -> 148.935 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (10726.986 ms) ======\n====== page-rank (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 139.528 ms, heap usage 662.229 MB -> 149.044 MB.\n====== page-rank (apache-spark) [default], iteration 2 completed (10497.012 ms) ======\n====== page-rank (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 145.301 ms, heap usage 620.847 MB -> 149.161 MB.\n====== page-rank (apache-spark) [default], iteration 3 completed (10683.078 ms) ======\n====== page-rank (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 146.272 ms, heap usage 595.956 MB -> 149.275 MB.\n====== page-rank (apache-spark) [default], iteration 4 completed (11158.857 ms) ======\n====== page-rank (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 150.477 ms, heap usage 624.956 MB -> 149.389 MB.\n====== page-rank (apache-spark) [default], iteration 5 completed (10816.748 ms) ======\n====== page-rank (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 152.563 ms, heap usage 475.956 MB -> 149.705 MB.\n====== page-rank (apache-spark) [default], iteration 6 completed (10797.777 ms) ======\n====== page-rank (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 153.431 ms, heap usage 575.956 MB -> 149.630 MB.\n====== page-rank (apache-spark) [default], iteration 7 completed (10320.855 ms) ======\n====== page-rank (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 154.161 ms, heap usage 494.956 MB -> 149.734 MB.\n====== page-rank (apache-spark) [default], iteration 8 completed (10797.875 ms) ======\n====== page-rank (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 159.810 ms, heap usage 685.884 MB -> 149.850 MB.\n====== page-rank (apache-spark) [default], iteration 9 completed (10426.551 ms) ======\n====== page-rank (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 138.119 ms, heap usage 483.136 MB -> 149.929 MB.\n====== page-rank (apache-spark) [default], iteration 10 completed (11319.287 ms) ======\n====== page-rank (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 160.571 ms, heap usage 417.218 MB -> 150.048 MB.\n====== page-rank (apache-spark) [default], iteration 11 completed (10773.541 ms) ======\n====== page-rank (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 153.774 ms, heap usage 591.956 MB -> 150.197 MB.\n====== page-rank (apache-spark) [default], iteration 12 completed (10583.141 ms) ======\n====== page-rank (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 151.297 ms, heap usage 385.309 MB -> 150.212 MB.\n====== page-rank (apache-spark) [default], iteration 13 completed (11225.389 ms) ======\n====== page-rank (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 138.750 ms, heap usage 506.956 MB -> 150.287 MB.\n====== page-rank (apache-spark) [default], iteration 14 completed (11253.752 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 60.640 ms, heap usage 661.207 MB -> 32.216 MB.\n====== future-genetic (functional) [default], iteration 0 completed (14742.129 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 51.821 ms, heap usage 114.841 MB -> 33.158 MB.\n====== future-genetic (functional) [default], iteration 1 completed (11014.493 ms) ======\n====== future-genetic (functional) [default], iteration 2 started ======\nGC before operation: completed in 34.821 ms, heap usage 68.320 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 2 completed (10628.352 ms) ======\n====== future-genetic (functional) [default], iteration 3 started ======\nGC before operation: completed in 38.504 ms, heap usage 57.876 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 3 completed (10722.143 ms) ======\n====== future-genetic (functional) [default], iteration 4 started ======\nGC before operation: completed in 39.692 ms, heap usage 145.206 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 4 completed (10840.012 ms) ======\n====== future-genetic (functional) [default], iteration 5 started ======\nGC before operation: completed in 38.411 ms, heap usage 81.011 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 5 completed (10598.435 ms) ======\n====== future-genetic (functional) [default], iteration 6 started ======\nGC before operation: completed in 40.019 ms, heap usage 144.534 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 6 completed (10786.150 ms) ======\n====== future-genetic (functional) [default], iteration 7 started ======\nGC before operation: completed in 48.015 ms, heap usage 171.419 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 7 completed (10652.683 ms) ======\n====== future-genetic (functional) [default], iteration 8 started ======\nGC before operation: completed in 35.498 ms, heap usage 37.426 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 8 completed (10488.698 ms) ======\n====== future-genetic (functional) [default], iteration 9 started ======\nGC before operation: completed in 42.383 ms, heap usage 130.505 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 9 completed (10682.271 ms) ======\n====== future-genetic (functional) [default], iteration 10 started ======\nGC before operation: completed in 48.742 ms, heap usage 134.970 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 10 completed (10549.840 ms) ======\n====== future-genetic (functional) [default], iteration 11 started ======\nGC before operation: completed in 41.808 ms, heap usage 156.009 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 11 completed (10851.547 ms) ======\n====== future-genetic (functional) [default], iteration 12 started ======\nGC before operation: completed in 40.139 ms, heap usage 163.381 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 12 completed (10940.461 ms) ======\n====== future-genetic (functional) [default], iteration 13 started ======\nGC before operation: completed in 35.048 ms, heap usage 80.372 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 13 completed (10876.099 ms) ======\n====== future-genetic (functional) [default], iteration 14 started ======\nGC before operation: completed in 43.468 ms, heap usage 62.997 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 14 completed (10763.606 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 70.620 ms, heap usage 85.721 MB -> 33.974 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 11\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (23373.227 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 371.313 ms, heap usage 780.679 MB -> 161.200 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (17055.803 ms) ======\n====== akka-uct (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 323.521 ms, heap usage 714.804 MB -> 140.346 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 2 completed (16644.579 ms) ======\n====== akka-uct (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 312.697 ms, heap usage 606.138 MB -> 139.703 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 3 completed (16230.901 ms) ======\n====== akka-uct (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 272.343 ms, heap usage 694.413 MB -> 139.888 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 4 completed (16222.783 ms) ======\n====== akka-uct (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 288.309 ms, heap usage 549.430 MB -> 124.976 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 5 completed (16061.576 ms) ======\n====== akka-uct (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 254.080 ms, heap usage 570.484 MB -> 130.699 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 6 completed (15769.690 ms) ======\n====== akka-uct (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 387.396 ms, heap usage 619.770 MB -> 158.750 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 7 completed (15901.168 ms) ======\n====== akka-uct (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 304.489 ms, heap usage 580.964 MB -> 149.879 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 8 completed (16178.151 ms) ======\n====== akka-uct (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 253.043 ms, heap usage 553.450 MB -> 150.939 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 9 completed (15874.839 ms) ======\n====== akka-uct (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 301.130 ms, heap usage 528.928 MB -> 139.937 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 10 completed (15982.587 ms) ======\n====== akka-uct (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 267.305 ms, heap usage 626.465 MB -> 131.010 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 11 completed (16353.495 ms) ======\n====== akka-uct (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 294.293 ms, heap usage 500.855 MB -> 153.125 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 12 completed (15969.903 ms) ======\n====== akka-uct (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 292.350 ms, heap usage 647.259 MB -> 125.388 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 13 completed (15322.843 ms) ======\n====== akka-uct (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 252.391 ms, heap usage 562.070 MB -> 128.190 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 14 completed (16083.172 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 2 (out of 2) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 134.630 ms, heap usage 463.678 MB -> 85.476 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (22878.805 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 103.188 ms, heap usage 272.080 MB -> 100.040 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (14811.341 ms) ======\n====== movie-lens (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 144.144 ms, heap usage 208.849 MB -> 97.194 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 2 completed (13632.892 ms) ======\n====== movie-lens (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 122.890 ms, heap usage 173.120 MB -> 97.842 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 3 completed (12814.257 ms) ======\n====== movie-lens (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 113.279 ms, heap usage 237.308 MB -> 98.141 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 4 completed (12978.413 ms) ======\n====== movie-lens (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 119.099 ms, heap usage 219.670 MB -> 98.103 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 5 completed (14306.460 ms) ======\n====== movie-lens (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 123.459 ms, heap usage 175.077 MB -> 98.404 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 6 completed (12568.443 ms) ======\n====== movie-lens (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 115.564 ms, heap usage 119.760 MB -> 100.031 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 7 completed (11505.398 ms) ======\n====== movie-lens (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 112.918 ms, heap usage 255.198 MB -> 99.024 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 8 completed (11706.594 ms) ======\n====== movie-lens (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 170.418 ms, heap usage 189.372 MB -> 98.513 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 9 completed (11662.958 ms) ======\n====== movie-lens (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 218.616 ms, heap usage 163.601 MB -> 98.629 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 10 completed (11293.424 ms) ======\n====== movie-lens (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 126.280 ms, heap usage 236.690 MB -> 98.603 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 11 completed (11873.509 ms) ======\n====== movie-lens (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 121.729 ms, heap usage 154.433 MB -> 98.657 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 12 completed (12263.435 ms) ======\n====== movie-lens (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 113.550 ms, heap usage 470.143 MB -> 102.266 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 13 completed (12351.951 ms) ======\n====== movie-lens (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 107.375 ms, heap usage 274.093 MB -> 98.738 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 14 completed (12112.256 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 83.428 ms, heap usage 476.231 MB -> 58.268 MB.\n====== scala-doku (scala) [default], iteration 0 completed (2753.475 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 83.813 ms, heap usage 150.542 MB -> 58.243 MB.\n====== scala-doku (scala) [default], iteration 1 completed (2340.567 ms) ======\n====== scala-doku (scala) [default], iteration 2 started ======\nGC before operation: completed in 88.607 ms, heap usage 121.743 MB -> 58.244 MB.\n====== scala-doku (scala) [default], iteration 2 completed (2269.313 ms) ======\n====== scala-doku (scala) [default], iteration 3 started ======\nGC before operation: completed in 79.133 ms, heap usage 118.244 MB -> 58.245 MB.\n====== scala-doku (scala) [default], iteration 3 completed (1898.181 ms) ======\n====== scala-doku (scala) [default], iteration 4 started ======\nGC before operation: completed in 86.643 ms, heap usage 120.745 MB -> 58.245 MB.\n====== scala-doku (scala) [default], iteration 4 completed (1792.430 ms) ======\n====== scala-doku (scala) [default], iteration 5 started ======\nGC before operation: completed in 77.315 ms, heap usage 119.245 MB -> 58.245 MB.\n====== scala-doku (scala) [default], iteration 5 completed (1786.944 ms) ======\n====== scala-doku (scala) [default], iteration 6 started ======\nGC before operation: completed in 89.168 ms, heap usage 120.745 MB -> 58.245 MB.\n====== scala-doku (scala) [default], iteration 6 completed (1866.830 ms) ======\n====== scala-doku (scala) [default], iteration 7 started ======\nGC before operation: completed in 76.164 ms, heap usage 120.245 MB -> 58.246 MB.\n====== scala-doku (scala) [default], iteration 7 completed (1799.903 ms) ======\n====== scala-doku (scala) [default], iteration 8 started ======\nGC before operation: completed in 79.207 ms, heap usage 119.746 MB -> 58.246 MB.\n====== scala-doku (scala) [default], iteration 8 completed (1782.750 ms) ======\n====== scala-doku (scala) [default], iteration 9 started ======\nGC before operation: completed in 86.288 ms, heap usage 120.246 MB -> 58.247 MB.\n====== scala-doku (scala) [default], iteration 9 completed (1778.745 ms) ======\n====== scala-doku (scala) [default], iteration 10 started ======\nGC before operation: completed in 77.760 ms, heap usage 119.747 MB -> 58.247 MB.\n====== scala-doku (scala) [default], iteration 10 completed (1794.655 ms) ======\n====== scala-doku (scala) [default], iteration 11 started ======\nGC before operation: completed in 92.459 ms, heap usage 119.747 MB -> 58.247 MB.\n====== scala-doku (scala) [default], iteration 11 completed (1818.580 ms) ======\n====== scala-doku (scala) [default], iteration 12 started ======\nGC before operation: completed in 77.984 ms, heap usage 120.247 MB -> 58.247 MB.\n====== scala-doku (scala) [default], iteration 12 completed (1848.215 ms) ======\n====== scala-doku (scala) [default], iteration 13 started ======\nGC before operation: completed in 93.441 ms, heap usage 119.747 MB -> 58.247 MB.\n====== scala-doku (scala) [default], iteration 13 completed (1809.411 ms) ======\n====== scala-doku (scala) [default], iteration 14 started ======\nGC before operation: completed in 82.582 ms, heap usage 119.747 MB -> 58.247 MB.\n====== scala-doku (scala) [default], iteration 14 completed (1803.934 ms) ======\nNOTE: 'chi-square' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== chi-square (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 99.379 ms, heap usage 319.426 MB -> 63.405 MB.\n====== chi-square (apache-spark) [default], iteration 0 completed (5198.635 ms) ======\n====== chi-square (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 217.985 ms, heap usage 339.427 MB -> 209.273 MB.\n====== chi-square (apache-spark) [default], iteration 1 completed (1119.485 ms) ======\n====== chi-square (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 175.933 ms, heap usage 299.968 MB -> 209.346 MB.\n====== chi-square (apache-spark) [default], iteration 2 completed (1038.669 ms) ======\n====== chi-square (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 162.484 ms, heap usage 434.584 MB -> 209.395 MB.\n====== chi-square (apache-spark) [default], iteration 3 completed (988.864 ms) ======\n====== chi-square (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 185.658 ms, heap usage 472.608 MB -> 209.448 MB.\n====== chi-square (apache-spark) [default], iteration 4 completed (1021.110 ms) ======\n====== chi-square (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 161.400 ms, heap usage 424.379 MB -> 209.494 MB.\n====== chi-square (apache-spark) [default], iteration 5 completed (1016.339 ms) ======\n====== chi-square (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 165.385 ms, heap usage 377.344 MB -> 209.638 MB.\n====== chi-square (apache-spark) [default], iteration 6 completed (1044.792 ms) ======\n====== chi-square (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 151.433 ms, heap usage 385.817 MB -> 209.712 MB.\n====== chi-square (apache-spark) [default], iteration 7 completed (892.107 ms) ======\n====== chi-square (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 148.497 ms, heap usage 375.358 MB -> 209.695 MB.\n====== chi-square (apache-spark) [default], iteration 8 completed (912.148 ms) ======\n====== chi-square (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 186.559 ms, heap usage 381.260 MB -> 209.735 MB.\n====== chi-square (apache-spark) [default], iteration 9 completed (916.193 ms) ======\n====== chi-square (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 172.071 ms, heap usage 375.984 MB -> 209.776 MB.\n====== chi-square (apache-spark) [default], iteration 10 completed (706.035 ms) ======\n====== chi-square (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 142.619 ms, heap usage 232.457 MB -> 209.816 MB.\n====== chi-square (apache-spark) [default], iteration 11 completed (764.527 ms) ======\n====== chi-square (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 164.121 ms, heap usage 670.340 MB -> 209.852 MB.\n====== chi-square (apache-spark) [default], iteration 12 completed (858.768 ms) ======\n====== chi-square (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 159.826 ms, heap usage 316.763 MB -> 209.890 MB.\n====== chi-square (apache-spark) [default], iteration 13 completed (862.769 ms) ======\n====== chi-square (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 166.687 ms, heap usage 379.775 MB -> 209.921 MB.\n====== chi-square (apache-spark) [default], iteration 14 completed (703.576 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 196.120 ms, heap usage 470.464 MB -> 147.340 MB.\n====== fj-kmeans (concurrency) [default], iteration 0 completed (8529.473 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 133.696 ms, heap usage 331.615 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 1 completed (7479.812 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 134.063 ms, heap usage 318.922 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 2 completed (7610.407 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 133.778 ms, heap usage 222.341 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 3 completed (7571.793 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 139.456 ms, heap usage 217.309 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 4 completed (7516.518 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 133.370 ms, heap usage 382.616 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 5 completed (8339.655 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 140.237 ms, heap usage 354.831 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 6 completed (7633.795 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 137.960 ms, heap usage 448.031 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 7 completed (7335.928 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 127.427 ms, heap usage 221.957 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 8 completed (7359.912 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 137.302 ms, heap usage 368.915 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 9 completed (8379.108 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 139.433 ms, heap usage 184.312 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 10 completed (8029.337 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 138.797 ms, heap usage 171.657 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 11 completed (7673.166 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 132.845 ms, heap usage 170.035 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 12 completed (7460.127 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 137.480 ms, heap usage 320.158 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 13 completed (7646.174 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 127.475 ms, heap usage 186.440 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 14 completed (7391.153 ms) ======\n"
    },
    "rx-scrabble": {
        "times": [
            539.438,
            188.955,
            158.74,
            147.979,
            162.112,
            128.936,
            116.055,
            109.336,
            124.372,
            133.649,
            197.918,
            117.228,
            112.849,
            105.866,
            105.587
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 111.440 ms, heap usage 193.716 MB -> 76.034 MB.\n====== scrabble (functional) [default], iteration 0 completed (1746.818 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 75.425 ms, heap usage 124.295 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 1 completed (822.799 ms) ======\n====== scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 103.806 ms, heap usage 309.363 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 2 completed (876.688 ms) ======\n====== scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 108.057 ms, heap usage 131.528 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 3 completed (772.422 ms) ======\n====== scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 90.330 ms, heap usage 339.197 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 4 completed (664.922 ms) ======\n====== scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 78.633 ms, heap usage 242.581 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 5 completed (767.926 ms) ======\n====== scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 80.529 ms, heap usage 243.067 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 6 completed (771.953 ms) ======\n====== scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 87.821 ms, heap usage 169.966 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 7 completed (713.175 ms) ======\n====== scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 85.627 ms, heap usage 126.363 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 8 completed (705.321 ms) ======\n====== scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 77.713 ms, heap usage 279.273 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 9 completed (595.178 ms) ======\n====== scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 90.853 ms, heap usage 197.665 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 10 completed (653.981 ms) ======\n====== scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 80.787 ms, heap usage 125.936 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 11 completed (671.613 ms) ======\n====== scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 81.092 ms, heap usage 326.788 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 12 completed (614.500 ms) ======\n====== scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 74.421 ms, heap usage 199.244 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 13 completed (687.061 ms) ======\n====== scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 77.486 ms, heap usage 357.036 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 14 completed (698.120 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 39.864 ms, heap usage 626.576 MB -> 29.596 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (20832.995 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 151.296 ms, heap usage 587.802 MB -> 148.935 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (10726.986 ms) ======\n====== page-rank (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 139.528 ms, heap usage 662.229 MB -> 149.044 MB.\n====== page-rank (apache-spark) [default], iteration 2 completed (10497.012 ms) ======\n====== page-rank (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 145.301 ms, heap usage 620.847 MB -> 149.161 MB.\n====== page-rank (apache-spark) [default], iteration 3 completed (10683.078 ms) ======\n====== page-rank (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 146.272 ms, heap usage 595.956 MB -> 149.275 MB.\n====== page-rank (apache-spark) [default], iteration 4 completed (11158.857 ms) ======\n====== page-rank (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 150.477 ms, heap usage 624.956 MB -> 149.389 MB.\n====== page-rank (apache-spark) [default], iteration 5 completed (10816.748 ms) ======\n====== page-rank (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 152.563 ms, heap usage 475.956 MB -> 149.705 MB.\n====== page-rank (apache-spark) [default], iteration 6 completed (10797.777 ms) ======\n====== page-rank (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 153.431 ms, heap usage 575.956 MB -> 149.630 MB.\n====== page-rank (apache-spark) [default], iteration 7 completed (10320.855 ms) ======\n====== page-rank (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 154.161 ms, heap usage 494.956 MB -> 149.734 MB.\n====== page-rank (apache-spark) [default], iteration 8 completed (10797.875 ms) ======\n====== page-rank (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 159.810 ms, heap usage 685.884 MB -> 149.850 MB.\n====== page-rank (apache-spark) [default], iteration 9 completed (10426.551 ms) ======\n====== page-rank (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 138.119 ms, heap usage 483.136 MB -> 149.929 MB.\n====== page-rank (apache-spark) [default], iteration 10 completed (11319.287 ms) ======\n====== page-rank (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 160.571 ms, heap usage 417.218 MB -> 150.048 MB.\n====== page-rank (apache-spark) [default], iteration 11 completed (10773.541 ms) ======\n====== page-rank (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 153.774 ms, heap usage 591.956 MB -> 150.197 MB.\n====== page-rank (apache-spark) [default], iteration 12 completed (10583.141 ms) ======\n====== page-rank (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 151.297 ms, heap usage 385.309 MB -> 150.212 MB.\n====== page-rank (apache-spark) [default], iteration 13 completed (11225.389 ms) ======\n====== page-rank (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 138.750 ms, heap usage 506.956 MB -> 150.287 MB.\n====== page-rank (apache-spark) [default], iteration 14 completed (11253.752 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 60.640 ms, heap usage 661.207 MB -> 32.216 MB.\n====== future-genetic (functional) [default], iteration 0 completed (14742.129 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 51.821 ms, heap usage 114.841 MB -> 33.158 MB.\n====== future-genetic (functional) [default], iteration 1 completed (11014.493 ms) ======\n====== future-genetic (functional) [default], iteration 2 started ======\nGC before operation: completed in 34.821 ms, heap usage 68.320 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 2 completed (10628.352 ms) ======\n====== future-genetic (functional) [default], iteration 3 started ======\nGC before operation: completed in 38.504 ms, heap usage 57.876 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 3 completed (10722.143 ms) ======\n====== future-genetic (functional) [default], iteration 4 started ======\nGC before operation: completed in 39.692 ms, heap usage 145.206 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 4 completed (10840.012 ms) ======\n====== future-genetic (functional) [default], iteration 5 started ======\nGC before operation: completed in 38.411 ms, heap usage 81.011 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 5 completed (10598.435 ms) ======\n====== future-genetic (functional) [default], iteration 6 started ======\nGC before operation: completed in 40.019 ms, heap usage 144.534 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 6 completed (10786.150 ms) ======\n====== future-genetic (functional) [default], iteration 7 started ======\nGC before operation: completed in 48.015 ms, heap usage 171.419 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 7 completed (10652.683 ms) ======\n====== future-genetic (functional) [default], iteration 8 started ======\nGC before operation: completed in 35.498 ms, heap usage 37.426 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 8 completed (10488.698 ms) ======\n====== future-genetic (functional) [default], iteration 9 started ======\nGC before operation: completed in 42.383 ms, heap usage 130.505 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 9 completed (10682.271 ms) ======\n====== future-genetic (functional) [default], iteration 10 started ======\nGC before operation: completed in 48.742 ms, heap usage 134.970 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 10 completed (10549.840 ms) ======\n====== future-genetic (functional) [default], iteration 11 started ======\nGC before operation: completed in 41.808 ms, heap usage 156.009 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 11 completed (10851.547 ms) ======\n====== future-genetic (functional) [default], iteration 12 started ======\nGC before operation: completed in 40.139 ms, heap usage 163.381 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 12 completed (10940.461 ms) ======\n====== future-genetic (functional) [default], iteration 13 started ======\nGC before operation: completed in 35.048 ms, heap usage 80.372 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 13 completed (10876.099 ms) ======\n====== future-genetic (functional) [default], iteration 14 started ======\nGC before operation: completed in 43.468 ms, heap usage 62.997 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 14 completed (10763.606 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 70.620 ms, heap usage 85.721 MB -> 33.974 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 11\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (23373.227 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 371.313 ms, heap usage 780.679 MB -> 161.200 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (17055.803 ms) ======\n====== akka-uct (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 323.521 ms, heap usage 714.804 MB -> 140.346 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 2 completed (16644.579 ms) ======\n====== akka-uct (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 312.697 ms, heap usage 606.138 MB -> 139.703 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 3 completed (16230.901 ms) ======\n====== akka-uct (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 272.343 ms, heap usage 694.413 MB -> 139.888 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 4 completed (16222.783 ms) ======\n====== akka-uct (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 288.309 ms, heap usage 549.430 MB -> 124.976 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 5 completed (16061.576 ms) ======\n====== akka-uct (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 254.080 ms, heap usage 570.484 MB -> 130.699 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 6 completed (15769.690 ms) ======\n====== akka-uct (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 387.396 ms, heap usage 619.770 MB -> 158.750 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 7 completed (15901.168 ms) ======\n====== akka-uct (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 304.489 ms, heap usage 580.964 MB -> 149.879 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 8 completed (16178.151 ms) ======\n====== akka-uct (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 253.043 ms, heap usage 553.450 MB -> 150.939 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 9 completed (15874.839 ms) ======\n====== akka-uct (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 301.130 ms, heap usage 528.928 MB -> 139.937 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 10 completed (15982.587 ms) ======\n====== akka-uct (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 267.305 ms, heap usage 626.465 MB -> 131.010 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 11 completed (16353.495 ms) ======\n====== akka-uct (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 294.293 ms, heap usage 500.855 MB -> 153.125 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 12 completed (15969.903 ms) ======\n====== akka-uct (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 292.350 ms, heap usage 647.259 MB -> 125.388 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 13 completed (15322.843 ms) ======\n====== akka-uct (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 252.391 ms, heap usage 562.070 MB -> 128.190 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 14 completed (16083.172 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 2 (out of 2) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 134.630 ms, heap usage 463.678 MB -> 85.476 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (22878.805 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 103.188 ms, heap usage 272.080 MB -> 100.040 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (14811.341 ms) ======\n====== movie-lens (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 144.144 ms, heap usage 208.849 MB -> 97.194 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 2 completed (13632.892 ms) ======\n====== movie-lens (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 122.890 ms, heap usage 173.120 MB -> 97.842 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 3 completed (12814.257 ms) ======\n====== movie-lens (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 113.279 ms, heap usage 237.308 MB -> 98.141 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 4 completed (12978.413 ms) ======\n====== movie-lens (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 119.099 ms, heap usage 219.670 MB -> 98.103 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 5 completed (14306.460 ms) ======\n====== movie-lens (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 123.459 ms, heap usage 175.077 MB -> 98.404 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 6 completed (12568.443 ms) ======\n====== movie-lens (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 115.564 ms, heap usage 119.760 MB -> 100.031 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 7 completed (11505.398 ms) ======\n====== movie-lens (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 112.918 ms, heap usage 255.198 MB -> 99.024 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 8 completed (11706.594 ms) ======\n====== movie-lens (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 170.418 ms, heap usage 189.372 MB -> 98.513 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 9 completed (11662.958 ms) ======\n====== movie-lens (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 218.616 ms, heap usage 163.601 MB -> 98.629 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 10 completed (11293.424 ms) ======\n====== movie-lens (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 126.280 ms, heap usage 236.690 MB -> 98.603 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 11 completed (11873.509 ms) ======\n====== movie-lens (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 121.729 ms, heap usage 154.433 MB -> 98.657 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 12 completed (12263.435 ms) ======\n====== movie-lens (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 113.550 ms, heap usage 470.143 MB -> 102.266 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 13 completed (12351.951 ms) ======\n====== movie-lens (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 107.375 ms, heap usage 274.093 MB -> 98.738 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 14 completed (12112.256 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 83.428 ms, heap usage 476.231 MB -> 58.268 MB.\n====== scala-doku (scala) [default], iteration 0 completed (2753.475 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 83.813 ms, heap usage 150.542 MB -> 58.243 MB.\n====== scala-doku (scala) [default], iteration 1 completed (2340.567 ms) ======\n====== scala-doku (scala) [default], iteration 2 started ======\nGC before operation: completed in 88.607 ms, heap usage 121.743 MB -> 58.244 MB.\n====== scala-doku (scala) [default], iteration 2 completed (2269.313 ms) ======\n====== scala-doku (scala) [default], iteration 3 started ======\nGC before operation: completed in 79.133 ms, heap usage 118.244 MB -> 58.245 MB.\n====== scala-doku (scala) [default], iteration 3 completed (1898.181 ms) ======\n====== scala-doku (scala) [default], iteration 4 started ======\nGC before operation: completed in 86.643 ms, heap usage 120.745 MB -> 58.245 MB.\n====== scala-doku (scala) [default], iteration 4 completed (1792.430 ms) ======\n====== scala-doku (scala) [default], iteration 5 started ======\nGC before operation: completed in 77.315 ms, heap usage 119.245 MB -> 58.245 MB.\n====== scala-doku (scala) [default], iteration 5 completed (1786.944 ms) ======\n====== scala-doku (scala) [default], iteration 6 started ======\nGC before operation: completed in 89.168 ms, heap usage 120.745 MB -> 58.245 MB.\n====== scala-doku (scala) [default], iteration 6 completed (1866.830 ms) ======\n====== scala-doku (scala) [default], iteration 7 started ======\nGC before operation: completed in 76.164 ms, heap usage 120.245 MB -> 58.246 MB.\n====== scala-doku (scala) [default], iteration 7 completed (1799.903 ms) ======\n====== scala-doku (scala) [default], iteration 8 started ======\nGC before operation: completed in 79.207 ms, heap usage 119.746 MB -> 58.246 MB.\n====== scala-doku (scala) [default], iteration 8 completed (1782.750 ms) ======\n====== scala-doku (scala) [default], iteration 9 started ======\nGC before operation: completed in 86.288 ms, heap usage 120.246 MB -> 58.247 MB.\n====== scala-doku (scala) [default], iteration 9 completed (1778.745 ms) ======\n====== scala-doku (scala) [default], iteration 10 started ======\nGC before operation: completed in 77.760 ms, heap usage 119.747 MB -> 58.247 MB.\n====== scala-doku (scala) [default], iteration 10 completed (1794.655 ms) ======\n====== scala-doku (scala) [default], iteration 11 started ======\nGC before operation: completed in 92.459 ms, heap usage 119.747 MB -> 58.247 MB.\n====== scala-doku (scala) [default], iteration 11 completed (1818.580 ms) ======\n====== scala-doku (scala) [default], iteration 12 started ======\nGC before operation: completed in 77.984 ms, heap usage 120.247 MB -> 58.247 MB.\n====== scala-doku (scala) [default], iteration 12 completed (1848.215 ms) ======\n====== scala-doku (scala) [default], iteration 13 started ======\nGC before operation: completed in 93.441 ms, heap usage 119.747 MB -> 58.247 MB.\n====== scala-doku (scala) [default], iteration 13 completed (1809.411 ms) ======\n====== scala-doku (scala) [default], iteration 14 started ======\nGC before operation: completed in 82.582 ms, heap usage 119.747 MB -> 58.247 MB.\n====== scala-doku (scala) [default], iteration 14 completed (1803.934 ms) ======\nNOTE: 'chi-square' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== chi-square (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 99.379 ms, heap usage 319.426 MB -> 63.405 MB.\n====== chi-square (apache-spark) [default], iteration 0 completed (5198.635 ms) ======\n====== chi-square (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 217.985 ms, heap usage 339.427 MB -> 209.273 MB.\n====== chi-square (apache-spark) [default], iteration 1 completed (1119.485 ms) ======\n====== chi-square (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 175.933 ms, heap usage 299.968 MB -> 209.346 MB.\n====== chi-square (apache-spark) [default], iteration 2 completed (1038.669 ms) ======\n====== chi-square (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 162.484 ms, heap usage 434.584 MB -> 209.395 MB.\n====== chi-square (apache-spark) [default], iteration 3 completed (988.864 ms) ======\n====== chi-square (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 185.658 ms, heap usage 472.608 MB -> 209.448 MB.\n====== chi-square (apache-spark) [default], iteration 4 completed (1021.110 ms) ======\n====== chi-square (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 161.400 ms, heap usage 424.379 MB -> 209.494 MB.\n====== chi-square (apache-spark) [default], iteration 5 completed (1016.339 ms) ======\n====== chi-square (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 165.385 ms, heap usage 377.344 MB -> 209.638 MB.\n====== chi-square (apache-spark) [default], iteration 6 completed (1044.792 ms) ======\n====== chi-square (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 151.433 ms, heap usage 385.817 MB -> 209.712 MB.\n====== chi-square (apache-spark) [default], iteration 7 completed (892.107 ms) ======\n====== chi-square (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 148.497 ms, heap usage 375.358 MB -> 209.695 MB.\n====== chi-square (apache-spark) [default], iteration 8 completed (912.148 ms) ======\n====== chi-square (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 186.559 ms, heap usage 381.260 MB -> 209.735 MB.\n====== chi-square (apache-spark) [default], iteration 9 completed (916.193 ms) ======\n====== chi-square (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 172.071 ms, heap usage 375.984 MB -> 209.776 MB.\n====== chi-square (apache-spark) [default], iteration 10 completed (706.035 ms) ======\n====== chi-square (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 142.619 ms, heap usage 232.457 MB -> 209.816 MB.\n====== chi-square (apache-spark) [default], iteration 11 completed (764.527 ms) ======\n====== chi-square (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 164.121 ms, heap usage 670.340 MB -> 209.852 MB.\n====== chi-square (apache-spark) [default], iteration 12 completed (858.768 ms) ======\n====== chi-square (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 159.826 ms, heap usage 316.763 MB -> 209.890 MB.\n====== chi-square (apache-spark) [default], iteration 13 completed (862.769 ms) ======\n====== chi-square (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 166.687 ms, heap usage 379.775 MB -> 209.921 MB.\n====== chi-square (apache-spark) [default], iteration 14 completed (703.576 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 196.120 ms, heap usage 470.464 MB -> 147.340 MB.\n====== fj-kmeans (concurrency) [default], iteration 0 completed (8529.473 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 133.696 ms, heap usage 331.615 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 1 completed (7479.812 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 134.063 ms, heap usage 318.922 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 2 completed (7610.407 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 133.778 ms, heap usage 222.341 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 3 completed (7571.793 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 139.456 ms, heap usage 217.309 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 4 completed (7516.518 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 133.370 ms, heap usage 382.616 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 5 completed (8339.655 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 140.237 ms, heap usage 354.831 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 6 completed (7633.795 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 137.960 ms, heap usage 448.031 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 7 completed (7335.928 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 127.427 ms, heap usage 221.957 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 8 completed (7359.912 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 137.302 ms, heap usage 368.915 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 9 completed (8379.108 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 139.433 ms, heap usage 184.312 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 10 completed (8029.337 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 138.797 ms, heap usage 171.657 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 11 completed (7673.166 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 132.845 ms, heap usage 170.035 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 12 completed (7460.127 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 137.480 ms, heap usage 320.158 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 13 completed (7646.174 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 127.475 ms, heap usage 186.440 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 14 completed (7391.153 ms) ======\n====== rx-scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 138.851 ms, heap usage 249.054 MB -> 97.875 MB.\n====== rx-scrabble (functional) [default], iteration 0 completed (539.438 ms) ======\n====== rx-scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 97.806 ms, heap usage 250.872 MB -> 98.124 MB.\n====== rx-scrabble (functional) [default], iteration 1 completed (188.955 ms) ======\n====== rx-scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 121.701 ms, heap usage 240.121 MB -> 98.118 MB.\n====== rx-scrabble (functional) [default], iteration 2 completed (158.740 ms) ======\n====== rx-scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 103.202 ms, heap usage 238.618 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 3 completed (147.979 ms) ======\n====== rx-scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 107.730 ms, heap usage 239.113 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 4 completed (162.112 ms) ======\n====== rx-scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 117.578 ms, heap usage 239.463 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 5 completed (128.936 ms) ======\n====== rx-scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 111.309 ms, heap usage 239.390 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 6 completed (116.055 ms) ======\n====== rx-scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 109.603 ms, heap usage 239.557 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 7 completed (109.336 ms) ======\n====== rx-scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 108.494 ms, heap usage 239.260 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 8 completed (124.372 ms) ======\n====== rx-scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 134.578 ms, heap usage 239.449 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 9 completed (133.649 ms) ======\n====== rx-scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 98.374 ms, heap usage 240.453 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 10 completed (197.918 ms) ======\n====== rx-scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 111.349 ms, heap usage 240.463 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 11 completed (117.228 ms) ======\n====== rx-scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 104.555 ms, heap usage 240.413 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 12 completed (112.849 ms) ======\n====== rx-scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 98.436 ms, heap usage 240.514 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 13 completed (105.866 ms) ======\n====== rx-scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 92.783 ms, heap usage 240.977 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 14 completed (105.587 ms) ======\n"
    },
    "db-shootout": {
        "times": [
            8779.951,
            9343.782,
            7499.305,
            8724.019,
            7010.765,
            7721.156,
            7647.257,
            7329.669,
            7329.711,
            6774.502,
            6874.618,
            7713.732,
            7466.876,
            6989.489,
            6647.63
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 111.440 ms, heap usage 193.716 MB -> 76.034 MB.\n====== scrabble (functional) [default], iteration 0 completed (1746.818 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 75.425 ms, heap usage 124.295 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 1 completed (822.799 ms) ======\n====== scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 103.806 ms, heap usage 309.363 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 2 completed (876.688 ms) ======\n====== scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 108.057 ms, heap usage 131.528 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 3 completed (772.422 ms) ======\n====== scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 90.330 ms, heap usage 339.197 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 4 completed (664.922 ms) ======\n====== scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 78.633 ms, heap usage 242.581 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 5 completed (767.926 ms) ======\n====== scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 80.529 ms, heap usage 243.067 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 6 completed (771.953 ms) ======\n====== scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 87.821 ms, heap usage 169.966 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 7 completed (713.175 ms) ======\n====== scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 85.627 ms, heap usage 126.363 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 8 completed (705.321 ms) ======\n====== scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 77.713 ms, heap usage 279.273 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 9 completed (595.178 ms) ======\n====== scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 90.853 ms, heap usage 197.665 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 10 completed (653.981 ms) ======\n====== scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 80.787 ms, heap usage 125.936 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 11 completed (671.613 ms) ======\n====== scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 81.092 ms, heap usage 326.788 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 12 completed (614.500 ms) ======\n====== scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 74.421 ms, heap usage 199.244 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 13 completed (687.061 ms) ======\n====== scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 77.486 ms, heap usage 357.036 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 14 completed (698.120 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 39.864 ms, heap usage 626.576 MB -> 29.596 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (20832.995 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 151.296 ms, heap usage 587.802 MB -> 148.935 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (10726.986 ms) ======\n====== page-rank (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 139.528 ms, heap usage 662.229 MB -> 149.044 MB.\n====== page-rank (apache-spark) [default], iteration 2 completed (10497.012 ms) ======\n====== page-rank (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 145.301 ms, heap usage 620.847 MB -> 149.161 MB.\n====== page-rank (apache-spark) [default], iteration 3 completed (10683.078 ms) ======\n====== page-rank (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 146.272 ms, heap usage 595.956 MB -> 149.275 MB.\n====== page-rank (apache-spark) [default], iteration 4 completed (11158.857 ms) ======\n====== page-rank (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 150.477 ms, heap usage 624.956 MB -> 149.389 MB.\n====== page-rank (apache-spark) [default], iteration 5 completed (10816.748 ms) ======\n====== page-rank (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 152.563 ms, heap usage 475.956 MB -> 149.705 MB.\n====== page-rank (apache-spark) [default], iteration 6 completed (10797.777 ms) ======\n====== page-rank (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 153.431 ms, heap usage 575.956 MB -> 149.630 MB.\n====== page-rank (apache-spark) [default], iteration 7 completed (10320.855 ms) ======\n====== page-rank (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 154.161 ms, heap usage 494.956 MB -> 149.734 MB.\n====== page-rank (apache-spark) [default], iteration 8 completed (10797.875 ms) ======\n====== page-rank (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 159.810 ms, heap usage 685.884 MB -> 149.850 MB.\n====== page-rank (apache-spark) [default], iteration 9 completed (10426.551 ms) ======\n====== page-rank (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 138.119 ms, heap usage 483.136 MB -> 149.929 MB.\n====== page-rank (apache-spark) [default], iteration 10 completed (11319.287 ms) ======\n====== page-rank (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 160.571 ms, heap usage 417.218 MB -> 150.048 MB.\n====== page-rank (apache-spark) [default], iteration 11 completed (10773.541 ms) ======\n====== page-rank (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 153.774 ms, heap usage 591.956 MB -> 150.197 MB.\n====== page-rank (apache-spark) [default], iteration 12 completed (10583.141 ms) ======\n====== page-rank (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 151.297 ms, heap usage 385.309 MB -> 150.212 MB.\n====== page-rank (apache-spark) [default], iteration 13 completed (11225.389 ms) ======\n====== page-rank (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 138.750 ms, heap usage 506.956 MB -> 150.287 MB.\n====== page-rank (apache-spark) [default], iteration 14 completed (11253.752 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 60.640 ms, heap usage 661.207 MB -> 32.216 MB.\n====== future-genetic (functional) [default], iteration 0 completed (14742.129 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 51.821 ms, heap usage 114.841 MB -> 33.158 MB.\n====== future-genetic (functional) [default], iteration 1 completed (11014.493 ms) ======\n====== future-genetic (functional) [default], iteration 2 started ======\nGC before operation: completed in 34.821 ms, heap usage 68.320 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 2 completed (10628.352 ms) ======\n====== future-genetic (functional) [default], iteration 3 started ======\nGC before operation: completed in 38.504 ms, heap usage 57.876 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 3 completed (10722.143 ms) ======\n====== future-genetic (functional) [default], iteration 4 started ======\nGC before operation: completed in 39.692 ms, heap usage 145.206 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 4 completed (10840.012 ms) ======\n====== future-genetic (functional) [default], iteration 5 started ======\nGC before operation: completed in 38.411 ms, heap usage 81.011 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 5 completed (10598.435 ms) ======\n====== future-genetic (functional) [default], iteration 6 started ======\nGC before operation: completed in 40.019 ms, heap usage 144.534 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 6 completed (10786.150 ms) ======\n====== future-genetic (functional) [default], iteration 7 started ======\nGC before operation: completed in 48.015 ms, heap usage 171.419 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 7 completed (10652.683 ms) ======\n====== future-genetic (functional) [default], iteration 8 started ======\nGC before operation: completed in 35.498 ms, heap usage 37.426 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 8 completed (10488.698 ms) ======\n====== future-genetic (functional) [default], iteration 9 started ======\nGC before operation: completed in 42.383 ms, heap usage 130.505 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 9 completed (10682.271 ms) ======\n====== future-genetic (functional) [default], iteration 10 started ======\nGC before operation: completed in 48.742 ms, heap usage 134.970 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 10 completed (10549.840 ms) ======\n====== future-genetic (functional) [default], iteration 11 started ======\nGC before operation: completed in 41.808 ms, heap usage 156.009 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 11 completed (10851.547 ms) ======\n====== future-genetic (functional) [default], iteration 12 started ======\nGC before operation: completed in 40.139 ms, heap usage 163.381 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 12 completed (10940.461 ms) ======\n====== future-genetic (functional) [default], iteration 13 started ======\nGC before operation: completed in 35.048 ms, heap usage 80.372 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 13 completed (10876.099 ms) ======\n====== future-genetic (functional) [default], iteration 14 started ======\nGC before operation: completed in 43.468 ms, heap usage 62.997 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 14 completed (10763.606 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 70.620 ms, heap usage 85.721 MB -> 33.974 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 11\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (23373.227 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 371.313 ms, heap usage 780.679 MB -> 161.200 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (17055.803 ms) ======\n====== akka-uct (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 323.521 ms, heap usage 714.804 MB -> 140.346 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 2 completed (16644.579 ms) ======\n====== akka-uct (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 312.697 ms, heap usage 606.138 MB -> 139.703 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 3 completed (16230.901 ms) ======\n====== akka-uct (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 272.343 ms, heap usage 694.413 MB -> 139.888 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 4 completed (16222.783 ms) ======\n====== akka-uct (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 288.309 ms, heap usage 549.430 MB -> 124.976 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 5 completed (16061.576 ms) ======\n====== akka-uct (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 254.080 ms, heap usage 570.484 MB -> 130.699 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 6 completed (15769.690 ms) ======\n====== akka-uct (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 387.396 ms, heap usage 619.770 MB -> 158.750 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 7 completed (15901.168 ms) ======\n====== akka-uct (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 304.489 ms, heap usage 580.964 MB -> 149.879 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 8 completed (16178.151 ms) ======\n====== akka-uct (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 253.043 ms, heap usage 553.450 MB -> 150.939 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 9 completed (15874.839 ms) ======\n====== akka-uct (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 301.130 ms, heap usage 528.928 MB -> 139.937 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 10 completed (15982.587 ms) ======\n====== akka-uct (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 267.305 ms, heap usage 626.465 MB -> 131.010 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 11 completed (16353.495 ms) ======\n====== akka-uct (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 294.293 ms, heap usage 500.855 MB -> 153.125 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 12 completed (15969.903 ms) ======\n====== akka-uct (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 292.350 ms, heap usage 647.259 MB -> 125.388 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 13 completed (15322.843 ms) ======\n====== akka-uct (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 252.391 ms, heap usage 562.070 MB -> 128.190 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 14 completed (16083.172 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 2 (out of 2) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 134.630 ms, heap usage 463.678 MB -> 85.476 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (22878.805 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 103.188 ms, heap usage 272.080 MB -> 100.040 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (14811.341 ms) ======\n====== movie-lens (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 144.144 ms, heap usage 208.849 MB -> 97.194 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 2 completed (13632.892 ms) ======\n====== movie-lens (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 122.890 ms, heap usage 173.120 MB -> 97.842 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 3 completed (12814.257 ms) ======\n====== movie-lens (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 113.279 ms, heap usage 237.308 MB -> 98.141 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 4 completed (12978.413 ms) ======\n====== movie-lens (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 119.099 ms, heap usage 219.670 MB -> 98.103 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 5 completed (14306.460 ms) ======\n====== movie-lens (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 123.459 ms, heap usage 175.077 MB -> 98.404 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 6 completed (12568.443 ms) ======\n====== movie-lens (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 115.564 ms, heap usage 119.760 MB -> 100.031 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 7 completed (11505.398 ms) ======\n====== movie-lens (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 112.918 ms, heap usage 255.198 MB -> 99.024 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 8 completed (11706.594 ms) ======\n====== movie-lens (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 170.418 ms, heap usage 189.372 MB -> 98.513 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 9 completed (11662.958 ms) ======\n====== movie-lens (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 218.616 ms, heap usage 163.601 MB -> 98.629 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 10 completed (11293.424 ms) ======\n====== movie-lens (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 126.280 ms, heap usage 236.690 MB -> 98.603 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 11 completed (11873.509 ms) ======\n====== movie-lens (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 121.729 ms, heap usage 154.433 MB -> 98.657 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 12 completed (12263.435 ms) ======\n====== movie-lens (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 113.550 ms, heap usage 470.143 MB -> 102.266 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 13 completed (12351.951 ms) ======\n====== movie-lens (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 107.375 ms, heap usage 274.093 MB -> 98.738 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 14 completed (12112.256 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 83.428 ms, heap usage 476.231 MB -> 58.268 MB.\n====== scala-doku (scala) [default], iteration 0 completed (2753.475 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 83.813 ms, heap usage 150.542 MB -> 58.243 MB.\n====== scala-doku (scala) [default], iteration 1 completed (2340.567 ms) ======\n====== scala-doku (scala) [default], iteration 2 started ======\nGC before operation: completed in 88.607 ms, heap usage 121.743 MB -> 58.244 MB.\n====== scala-doku (scala) [default], iteration 2 completed (2269.313 ms) ======\n====== scala-doku (scala) [default], iteration 3 started ======\nGC before operation: completed in 79.133 ms, heap usage 118.244 MB -> 58.245 MB.\n====== scala-doku (scala) [default], iteration 3 completed (1898.181 ms) ======\n====== scala-doku (scala) [default], iteration 4 started ======\nGC before operation: completed in 86.643 ms, heap usage 120.745 MB -> 58.245 MB.\n====== scala-doku (scala) [default], iteration 4 completed (1792.430 ms) ======\n====== scala-doku (scala) [default], iteration 5 started ======\nGC before operation: completed in 77.315 ms, heap usage 119.245 MB -> 58.245 MB.\n====== scala-doku (scala) [default], iteration 5 completed (1786.944 ms) ======\n====== scala-doku (scala) [default], iteration 6 started ======\nGC before operation: completed in 89.168 ms, heap usage 120.745 MB -> 58.245 MB.\n====== scala-doku (scala) [default], iteration 6 completed (1866.830 ms) ======\n====== scala-doku (scala) [default], iteration 7 started ======\nGC before operation: completed in 76.164 ms, heap usage 120.245 MB -> 58.246 MB.\n====== scala-doku (scala) [default], iteration 7 completed (1799.903 ms) ======\n====== scala-doku (scala) [default], iteration 8 started ======\nGC before operation: completed in 79.207 ms, heap usage 119.746 MB -> 58.246 MB.\n====== scala-doku (scala) [default], iteration 8 completed (1782.750 ms) ======\n====== scala-doku (scala) [default], iteration 9 started ======\nGC before operation: completed in 86.288 ms, heap usage 120.246 MB -> 58.247 MB.\n====== scala-doku (scala) [default], iteration 9 completed (1778.745 ms) ======\n====== scala-doku (scala) [default], iteration 10 started ======\nGC before operation: completed in 77.760 ms, heap usage 119.747 MB -> 58.247 MB.\n====== scala-doku (scala) [default], iteration 10 completed (1794.655 ms) ======\n====== scala-doku (scala) [default], iteration 11 started ======\nGC before operation: completed in 92.459 ms, heap usage 119.747 MB -> 58.247 MB.\n====== scala-doku (scala) [default], iteration 11 completed (1818.580 ms) ======\n====== scala-doku (scala) [default], iteration 12 started ======\nGC before operation: completed in 77.984 ms, heap usage 120.247 MB -> 58.247 MB.\n====== scala-doku (scala) [default], iteration 12 completed (1848.215 ms) ======\n====== scala-doku (scala) [default], iteration 13 started ======\nGC before operation: completed in 93.441 ms, heap usage 119.747 MB -> 58.247 MB.\n====== scala-doku (scala) [default], iteration 13 completed (1809.411 ms) ======\n====== scala-doku (scala) [default], iteration 14 started ======\nGC before operation: completed in 82.582 ms, heap usage 119.747 MB -> 58.247 MB.\n====== scala-doku (scala) [default], iteration 14 completed (1803.934 ms) ======\nNOTE: 'chi-square' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== chi-square (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 99.379 ms, heap usage 319.426 MB -> 63.405 MB.\n====== chi-square (apache-spark) [default], iteration 0 completed (5198.635 ms) ======\n====== chi-square (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 217.985 ms, heap usage 339.427 MB -> 209.273 MB.\n====== chi-square (apache-spark) [default], iteration 1 completed (1119.485 ms) ======\n====== chi-square (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 175.933 ms, heap usage 299.968 MB -> 209.346 MB.\n====== chi-square (apache-spark) [default], iteration 2 completed (1038.669 ms) ======\n====== chi-square (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 162.484 ms, heap usage 434.584 MB -> 209.395 MB.\n====== chi-square (apache-spark) [default], iteration 3 completed (988.864 ms) ======\n====== chi-square (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 185.658 ms, heap usage 472.608 MB -> 209.448 MB.\n====== chi-square (apache-spark) [default], iteration 4 completed (1021.110 ms) ======\n====== chi-square (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 161.400 ms, heap usage 424.379 MB -> 209.494 MB.\n====== chi-square (apache-spark) [default], iteration 5 completed (1016.339 ms) ======\n====== chi-square (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 165.385 ms, heap usage 377.344 MB -> 209.638 MB.\n====== chi-square (apache-spark) [default], iteration 6 completed (1044.792 ms) ======\n====== chi-square (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 151.433 ms, heap usage 385.817 MB -> 209.712 MB.\n====== chi-square (apache-spark) [default], iteration 7 completed (892.107 ms) ======\n====== chi-square (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 148.497 ms, heap usage 375.358 MB -> 209.695 MB.\n====== chi-square (apache-spark) [default], iteration 8 completed (912.148 ms) ======\n====== chi-square (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 186.559 ms, heap usage 381.260 MB -> 209.735 MB.\n====== chi-square (apache-spark) [default], iteration 9 completed (916.193 ms) ======\n====== chi-square (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 172.071 ms, heap usage 375.984 MB -> 209.776 MB.\n====== chi-square (apache-spark) [default], iteration 10 completed (706.035 ms) ======\n====== chi-square (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 142.619 ms, heap usage 232.457 MB -> 209.816 MB.\n====== chi-square (apache-spark) [default], iteration 11 completed (764.527 ms) ======\n====== chi-square (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 164.121 ms, heap usage 670.340 MB -> 209.852 MB.\n====== chi-square (apache-spark) [default], iteration 12 completed (858.768 ms) ======\n====== chi-square (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 159.826 ms, heap usage 316.763 MB -> 209.890 MB.\n====== chi-square (apache-spark) [default], iteration 13 completed (862.769 ms) ======\n====== chi-square (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 166.687 ms, heap usage 379.775 MB -> 209.921 MB.\n====== chi-square (apache-spark) [default], iteration 14 completed (703.576 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 196.120 ms, heap usage 470.464 MB -> 147.340 MB.\n====== fj-kmeans (concurrency) [default], iteration 0 completed (8529.473 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 133.696 ms, heap usage 331.615 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 1 completed (7479.812 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 134.063 ms, heap usage 318.922 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 2 completed (7610.407 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 133.778 ms, heap usage 222.341 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 3 completed (7571.793 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 139.456 ms, heap usage 217.309 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 4 completed (7516.518 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 133.370 ms, heap usage 382.616 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 5 completed (8339.655 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 140.237 ms, heap usage 354.831 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 6 completed (7633.795 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 137.960 ms, heap usage 448.031 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 7 completed (7335.928 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 127.427 ms, heap usage 221.957 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 8 completed (7359.912 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 137.302 ms, heap usage 368.915 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 9 completed (8379.108 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 139.433 ms, heap usage 184.312 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 10 completed (8029.337 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 138.797 ms, heap usage 171.657 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 11 completed (7673.166 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 132.845 ms, heap usage 170.035 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 12 completed (7460.127 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 137.480 ms, heap usage 320.158 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 13 completed (7646.174 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 127.475 ms, heap usage 186.440 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 14 completed (7391.153 ms) ======\n====== rx-scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 138.851 ms, heap usage 249.054 MB -> 97.875 MB.\n====== rx-scrabble (functional) [default], iteration 0 completed (539.438 ms) ======\n====== rx-scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 97.806 ms, heap usage 250.872 MB -> 98.124 MB.\n====== rx-scrabble (functional) [default], iteration 1 completed (188.955 ms) ======\n====== rx-scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 121.701 ms, heap usage 240.121 MB -> 98.118 MB.\n====== rx-scrabble (functional) [default], iteration 2 completed (158.740 ms) ======\n====== rx-scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 103.202 ms, heap usage 238.618 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 3 completed (147.979 ms) ======\n====== rx-scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 107.730 ms, heap usage 239.113 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 4 completed (162.112 ms) ======\n====== rx-scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 117.578 ms, heap usage 239.463 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 5 completed (128.936 ms) ======\n====== rx-scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 111.309 ms, heap usage 239.390 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 6 completed (116.055 ms) ======\n====== rx-scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 109.603 ms, heap usage 239.557 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 7 completed (109.336 ms) ======\n====== rx-scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 108.494 ms, heap usage 239.260 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 8 completed (124.372 ms) ======\n====== rx-scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 134.578 ms, heap usage 239.449 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 9 completed (133.649 ms) ======\n====== rx-scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 98.374 ms, heap usage 240.453 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 10 completed (197.918 ms) ======\n====== rx-scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 111.349 ms, heap usage 240.463 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 11 completed (117.228 ms) ======\n====== rx-scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 104.555 ms, heap usage 240.413 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 12 completed (112.849 ms) ======\n====== rx-scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 98.436 ms, heap usage 240.514 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 13 completed (105.866 ms) ======\n====== rx-scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 92.783 ms, heap usage 240.977 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 14 completed (105.587 ms) ======\n====== db-shootout (database) [default], iteration 0 started ======\nGC before operation: completed in 104.333 ms, heap usage 179.823 MB -> 100.606 MB.\n====== db-shootout (database) [default], iteration 0 completed (8779.951 ms) ======\n====== db-shootout (database) [default], iteration 1 started ======\nGC before operation: completed in 107.497 ms, heap usage 242.103 MB -> 110.924 MB.\n====== db-shootout (database) [default], iteration 1 completed (9343.782 ms) ======\n====== db-shootout (database) [default], iteration 2 started ======\nGC before operation: completed in 111.405 ms, heap usage 283.357 MB -> 112.478 MB.\n====== db-shootout (database) [default], iteration 2 completed (7499.305 ms) ======\n====== db-shootout (database) [default], iteration 3 started ======\nGC before operation: completed in 94.995 ms, heap usage 543.589 MB -> 114.314 MB.\n====== db-shootout (database) [default], iteration 3 completed (8724.019 ms) ======\n====== db-shootout (database) [default], iteration 4 started ======\nGC before operation: completed in 101.845 ms, heap usage 213.978 MB -> 159.872 MB.\n====== db-shootout (database) [default], iteration 4 completed (7010.765 ms) ======\n====== db-shootout (database) [default], iteration 5 started ======\nGC before operation: completed in 164.949 ms, heap usage 636.845 MB -> 167.668 MB.\n====== db-shootout (database) [default], iteration 5 completed (7721.156 ms) ======\n====== db-shootout (database) [default], iteration 6 started ======\nGC before operation: completed in 130.093 ms, heap usage 384.324 MB -> 167.486 MB.\n====== db-shootout (database) [default], iteration 6 completed (7647.257 ms) ======\n====== db-shootout (database) [default], iteration 7 started ======\nGC before operation: completed in 109.623 ms, heap usage 282.011 MB -> 175.857 MB.\n====== db-shootout (database) [default], iteration 7 completed (7329.669 ms) ======\n====== db-shootout (database) [default], iteration 8 started ======\nGC before operation: completed in 116.420 ms, heap usage 284.042 MB -> 175.655 MB.\n====== db-shootout (database) [default], iteration 8 completed (7329.711 ms) ======\n====== db-shootout (database) [default], iteration 9 started ======\nGC before operation: completed in 171.716 ms, heap usage 342.792 MB -> 175.912 MB.\n====== db-shootout (database) [default], iteration 9 completed (6774.502 ms) ======\n====== db-shootout (database) [default], iteration 10 started ======\nGC before operation: completed in 173.829 ms, heap usage 293.932 MB -> 175.555 MB.\n====== db-shootout (database) [default], iteration 10 completed (6874.618 ms) ======\n====== db-shootout (database) [default], iteration 11 started ======\nGC before operation: completed in 148.492 ms, heap usage 400.220 MB -> 180.072 MB.\n====== db-shootout (database) [default], iteration 11 completed (7713.732 ms) ======\n====== db-shootout (database) [default], iteration 12 started ======\nGC before operation: completed in 117.617 ms, heap usage 194.930 MB -> 178.866 MB.\n====== db-shootout (database) [default], iteration 12 completed (7466.876 ms) ======\n====== db-shootout (database) [default], iteration 13 started ======\nGC before operation: completed in 129.592 ms, heap usage 290.546 MB -> 179.243 MB.\n====== db-shootout (database) [default], iteration 13 completed (6989.489 ms) ======\n====== db-shootout (database) [default], iteration 14 started ======\nGC before operation: completed in 136.413 ms, heap usage 256.392 MB -> 179.022 MB.\n====== db-shootout (database) [default], iteration 14 completed (6647.630 ms) ======\n"
    },
    "finagle-http": {
        "times": [
            17579.182,
            7093.193,
            3467.412,
            2891.463,
            3105.065,
            2695.15,
            2704.392,
            2948.935,
            2778.196,
            2747.983,
            2777.183,
            2950.363,
            2759.978,
            2831.653,
            2711.28
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 111.440 ms, heap usage 193.716 MB -> 76.034 MB.\n====== scrabble (functional) [default], iteration 0 completed (1746.818 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 75.425 ms, heap usage 124.295 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 1 completed (822.799 ms) ======\n====== scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 103.806 ms, heap usage 309.363 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 2 completed (876.688 ms) ======\n====== scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 108.057 ms, heap usage 131.528 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 3 completed (772.422 ms) ======\n====== scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 90.330 ms, heap usage 339.197 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 4 completed (664.922 ms) ======\n====== scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 78.633 ms, heap usage 242.581 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 5 completed (767.926 ms) ======\n====== scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 80.529 ms, heap usage 243.067 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 6 completed (771.953 ms) ======\n====== scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 87.821 ms, heap usage 169.966 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 7 completed (713.175 ms) ======\n====== scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 85.627 ms, heap usage 126.363 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 8 completed (705.321 ms) ======\n====== scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 77.713 ms, heap usage 279.273 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 9 completed (595.178 ms) ======\n====== scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 90.853 ms, heap usage 197.665 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 10 completed (653.981 ms) ======\n====== scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 80.787 ms, heap usage 125.936 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 11 completed (671.613 ms) ======\n====== scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 81.092 ms, heap usage 326.788 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 12 completed (614.500 ms) ======\n====== scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 74.421 ms, heap usage 199.244 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 13 completed (687.061 ms) ======\n====== scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 77.486 ms, heap usage 357.036 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 14 completed (698.120 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 39.864 ms, heap usage 626.576 MB -> 29.596 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (20832.995 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 151.296 ms, heap usage 587.802 MB -> 148.935 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (10726.986 ms) ======\n====== page-rank (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 139.528 ms, heap usage 662.229 MB -> 149.044 MB.\n====== page-rank (apache-spark) [default], iteration 2 completed (10497.012 ms) ======\n====== page-rank (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 145.301 ms, heap usage 620.847 MB -> 149.161 MB.\n====== page-rank (apache-spark) [default], iteration 3 completed (10683.078 ms) ======\n====== page-rank (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 146.272 ms, heap usage 595.956 MB -> 149.275 MB.\n====== page-rank (apache-spark) [default], iteration 4 completed (11158.857 ms) ======\n====== page-rank (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 150.477 ms, heap usage 624.956 MB -> 149.389 MB.\n====== page-rank (apache-spark) [default], iteration 5 completed (10816.748 ms) ======\n====== page-rank (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 152.563 ms, heap usage 475.956 MB -> 149.705 MB.\n====== page-rank (apache-spark) [default], iteration 6 completed (10797.777 ms) ======\n====== page-rank (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 153.431 ms, heap usage 575.956 MB -> 149.630 MB.\n====== page-rank (apache-spark) [default], iteration 7 completed (10320.855 ms) ======\n====== page-rank (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 154.161 ms, heap usage 494.956 MB -> 149.734 MB.\n====== page-rank (apache-spark) [default], iteration 8 completed (10797.875 ms) ======\n====== page-rank (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 159.810 ms, heap usage 685.884 MB -> 149.850 MB.\n====== page-rank (apache-spark) [default], iteration 9 completed (10426.551 ms) ======\n====== page-rank (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 138.119 ms, heap usage 483.136 MB -> 149.929 MB.\n====== page-rank (apache-spark) [default], iteration 10 completed (11319.287 ms) ======\n====== page-rank (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 160.571 ms, heap usage 417.218 MB -> 150.048 MB.\n====== page-rank (apache-spark) [default], iteration 11 completed (10773.541 ms) ======\n====== page-rank (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 153.774 ms, heap usage 591.956 MB -> 150.197 MB.\n====== page-rank (apache-spark) [default], iteration 12 completed (10583.141 ms) ======\n====== page-rank (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 151.297 ms, heap usage 385.309 MB -> 150.212 MB.\n====== page-rank (apache-spark) [default], iteration 13 completed (11225.389 ms) ======\n====== page-rank (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 138.750 ms, heap usage 506.956 MB -> 150.287 MB.\n====== page-rank (apache-spark) [default], iteration 14 completed (11253.752 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 60.640 ms, heap usage 661.207 MB -> 32.216 MB.\n====== future-genetic (functional) [default], iteration 0 completed (14742.129 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 51.821 ms, heap usage 114.841 MB -> 33.158 MB.\n====== future-genetic (functional) [default], iteration 1 completed (11014.493 ms) ======\n====== future-genetic (functional) [default], iteration 2 started ======\nGC before operation: completed in 34.821 ms, heap usage 68.320 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 2 completed (10628.352 ms) ======\n====== future-genetic (functional) [default], iteration 3 started ======\nGC before operation: completed in 38.504 ms, heap usage 57.876 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 3 completed (10722.143 ms) ======\n====== future-genetic (functional) [default], iteration 4 started ======\nGC before operation: completed in 39.692 ms, heap usage 145.206 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 4 completed (10840.012 ms) ======\n====== future-genetic (functional) [default], iteration 5 started ======\nGC before operation: completed in 38.411 ms, heap usage 81.011 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 5 completed (10598.435 ms) ======\n====== future-genetic (functional) [default], iteration 6 started ======\nGC before operation: completed in 40.019 ms, heap usage 144.534 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 6 completed (10786.150 ms) ======\n====== future-genetic (functional) [default], iteration 7 started ======\nGC before operation: completed in 48.015 ms, heap usage 171.419 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 7 completed (10652.683 ms) ======\n====== future-genetic (functional) [default], iteration 8 started ======\nGC before operation: completed in 35.498 ms, heap usage 37.426 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 8 completed (10488.698 ms) ======\n====== future-genetic (functional) [default], iteration 9 started ======\nGC before operation: completed in 42.383 ms, heap usage 130.505 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 9 completed (10682.271 ms) ======\n====== future-genetic (functional) [default], iteration 10 started ======\nGC before operation: completed in 48.742 ms, heap usage 134.970 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 10 completed (10549.840 ms) ======\n====== future-genetic (functional) [default], iteration 11 started ======\nGC before operation: completed in 41.808 ms, heap usage 156.009 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 11 completed (10851.547 ms) ======\n====== future-genetic (functional) [default], iteration 12 started ======\nGC before operation: completed in 40.139 ms, heap usage 163.381 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 12 completed (10940.461 ms) ======\n====== future-genetic (functional) [default], iteration 13 started ======\nGC before operation: completed in 35.048 ms, heap usage 80.372 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 13 completed (10876.099 ms) ======\n====== future-genetic (functional) [default], iteration 14 started ======\nGC before operation: completed in 43.468 ms, heap usage 62.997 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 14 completed (10763.606 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 70.620 ms, heap usage 85.721 MB -> 33.974 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 11\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (23373.227 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 371.313 ms, heap usage 780.679 MB -> 161.200 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (17055.803 ms) ======\n====== akka-uct (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 323.521 ms, heap usage 714.804 MB -> 140.346 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 2 completed (16644.579 ms) ======\n====== akka-uct (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 312.697 ms, heap usage 606.138 MB -> 139.703 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 3 completed (16230.901 ms) ======\n====== akka-uct (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 272.343 ms, heap usage 694.413 MB -> 139.888 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 4 completed (16222.783 ms) ======\n====== akka-uct (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 288.309 ms, heap usage 549.430 MB -> 124.976 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 5 completed (16061.576 ms) ======\n====== akka-uct (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 254.080 ms, heap usage 570.484 MB -> 130.699 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 6 completed (15769.690 ms) ======\n====== akka-uct (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 387.396 ms, heap usage 619.770 MB -> 158.750 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 7 completed (15901.168 ms) ======\n====== akka-uct (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 304.489 ms, heap usage 580.964 MB -> 149.879 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 8 completed (16178.151 ms) ======\n====== akka-uct (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 253.043 ms, heap usage 553.450 MB -> 150.939 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 9 completed (15874.839 ms) ======\n====== akka-uct (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 301.130 ms, heap usage 528.928 MB -> 139.937 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 10 completed (15982.587 ms) ======\n====== akka-uct (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 267.305 ms, heap usage 626.465 MB -> 131.010 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 11 completed (16353.495 ms) ======\n====== akka-uct (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 294.293 ms, heap usage 500.855 MB -> 153.125 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 12 completed (15969.903 ms) ======\n====== akka-uct (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 292.350 ms, heap usage 647.259 MB -> 125.388 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 13 completed (15322.843 ms) ======\n====== akka-uct (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 252.391 ms, heap usage 562.070 MB -> 128.190 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 14 completed (16083.172 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 2 (out of 2) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 134.630 ms, heap usage 463.678 MB -> 85.476 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (22878.805 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 103.188 ms, heap usage 272.080 MB -> 100.040 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (14811.341 ms) ======\n====== movie-lens (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 144.144 ms, heap usage 208.849 MB -> 97.194 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 2 completed (13632.892 ms) ======\n====== movie-lens (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 122.890 ms, heap usage 173.120 MB -> 97.842 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 3 completed (12814.257 ms) ======\n====== movie-lens (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 113.279 ms, heap usage 237.308 MB -> 98.141 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 4 completed (12978.413 ms) ======\n====== movie-lens (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 119.099 ms, heap usage 219.670 MB -> 98.103 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 5 completed (14306.460 ms) ======\n====== movie-lens (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 123.459 ms, heap usage 175.077 MB -> 98.404 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 6 completed (12568.443 ms) ======\n====== movie-lens (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 115.564 ms, heap usage 119.760 MB -> 100.031 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 7 completed (11505.398 ms) ======\n====== movie-lens (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 112.918 ms, heap usage 255.198 MB -> 99.024 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 8 completed (11706.594 ms) ======\n====== movie-lens (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 170.418 ms, heap usage 189.372 MB -> 98.513 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 9 completed (11662.958 ms) ======\n====== movie-lens (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 218.616 ms, heap usage 163.601 MB -> 98.629 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 10 completed (11293.424 ms) ======\n====== movie-lens (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 126.280 ms, heap usage 236.690 MB -> 98.603 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 11 completed (11873.509 ms) ======\n====== movie-lens (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 121.729 ms, heap usage 154.433 MB -> 98.657 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 12 completed (12263.435 ms) ======\n====== movie-lens (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 113.550 ms, heap usage 470.143 MB -> 102.266 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 13 completed (12351.951 ms) ======\n====== movie-lens (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 107.375 ms, heap usage 274.093 MB -> 98.738 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 14 completed (12112.256 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 83.428 ms, heap usage 476.231 MB -> 58.268 MB.\n====== scala-doku (scala) [default], iteration 0 completed (2753.475 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 83.813 ms, heap usage 150.542 MB -> 58.243 MB.\n====== scala-doku (scala) [default], iteration 1 completed (2340.567 ms) ======\n====== scala-doku (scala) [default], iteration 2 started ======\nGC before operation: completed in 88.607 ms, heap usage 121.743 MB -> 58.244 MB.\n====== scala-doku (scala) [default], iteration 2 completed (2269.313 ms) ======\n====== scala-doku (scala) [default], iteration 3 started ======\nGC before operation: completed in 79.133 ms, heap usage 118.244 MB -> 58.245 MB.\n====== scala-doku (scala) [default], iteration 3 completed (1898.181 ms) ======\n====== scala-doku (scala) [default], iteration 4 started ======\nGC before operation: completed in 86.643 ms, heap usage 120.745 MB -> 58.245 MB.\n====== scala-doku (scala) [default], iteration 4 completed (1792.430 ms) ======\n====== scala-doku (scala) [default], iteration 5 started ======\nGC before operation: completed in 77.315 ms, heap usage 119.245 MB -> 58.245 MB.\n====== scala-doku (scala) [default], iteration 5 completed (1786.944 ms) ======\n====== scala-doku (scala) [default], iteration 6 started ======\nGC before operation: completed in 89.168 ms, heap usage 120.745 MB -> 58.245 MB.\n====== scala-doku (scala) [default], iteration 6 completed (1866.830 ms) ======\n====== scala-doku (scala) [default], iteration 7 started ======\nGC before operation: completed in 76.164 ms, heap usage 120.245 MB -> 58.246 MB.\n====== scala-doku (scala) [default], iteration 7 completed (1799.903 ms) ======\n====== scala-doku (scala) [default], iteration 8 started ======\nGC before operation: completed in 79.207 ms, heap usage 119.746 MB -> 58.246 MB.\n====== scala-doku (scala) [default], iteration 8 completed (1782.750 ms) ======\n====== scala-doku (scala) [default], iteration 9 started ======\nGC before operation: completed in 86.288 ms, heap usage 120.246 MB -> 58.247 MB.\n====== scala-doku (scala) [default], iteration 9 completed (1778.745 ms) ======\n====== scala-doku (scala) [default], iteration 10 started ======\nGC before operation: completed in 77.760 ms, heap usage 119.747 MB -> 58.247 MB.\n====== scala-doku (scala) [default], iteration 10 completed (1794.655 ms) ======\n====== scala-doku (scala) [default], iteration 11 started ======\nGC before operation: completed in 92.459 ms, heap usage 119.747 MB -> 58.247 MB.\n====== scala-doku (scala) [default], iteration 11 completed (1818.580 ms) ======\n====== scala-doku (scala) [default], iteration 12 started ======\nGC before operation: completed in 77.984 ms, heap usage 120.247 MB -> 58.247 MB.\n====== scala-doku (scala) [default], iteration 12 completed (1848.215 ms) ======\n====== scala-doku (scala) [default], iteration 13 started ======\nGC before operation: completed in 93.441 ms, heap usage 119.747 MB -> 58.247 MB.\n====== scala-doku (scala) [default], iteration 13 completed (1809.411 ms) ======\n====== scala-doku (scala) [default], iteration 14 started ======\nGC before operation: completed in 82.582 ms, heap usage 119.747 MB -> 58.247 MB.\n====== scala-doku (scala) [default], iteration 14 completed (1803.934 ms) ======\nNOTE: 'chi-square' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== chi-square (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 99.379 ms, heap usage 319.426 MB -> 63.405 MB.\n====== chi-square (apache-spark) [default], iteration 0 completed (5198.635 ms) ======\n====== chi-square (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 217.985 ms, heap usage 339.427 MB -> 209.273 MB.\n====== chi-square (apache-spark) [default], iteration 1 completed (1119.485 ms) ======\n====== chi-square (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 175.933 ms, heap usage 299.968 MB -> 209.346 MB.\n====== chi-square (apache-spark) [default], iteration 2 completed (1038.669 ms) ======\n====== chi-square (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 162.484 ms, heap usage 434.584 MB -> 209.395 MB.\n====== chi-square (apache-spark) [default], iteration 3 completed (988.864 ms) ======\n====== chi-square (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 185.658 ms, heap usage 472.608 MB -> 209.448 MB.\n====== chi-square (apache-spark) [default], iteration 4 completed (1021.110 ms) ======\n====== chi-square (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 161.400 ms, heap usage 424.379 MB -> 209.494 MB.\n====== chi-square (apache-spark) [default], iteration 5 completed (1016.339 ms) ======\n====== chi-square (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 165.385 ms, heap usage 377.344 MB -> 209.638 MB.\n====== chi-square (apache-spark) [default], iteration 6 completed (1044.792 ms) ======\n====== chi-square (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 151.433 ms, heap usage 385.817 MB -> 209.712 MB.\n====== chi-square (apache-spark) [default], iteration 7 completed (892.107 ms) ======\n====== chi-square (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 148.497 ms, heap usage 375.358 MB -> 209.695 MB.\n====== chi-square (apache-spark) [default], iteration 8 completed (912.148 ms) ======\n====== chi-square (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 186.559 ms, heap usage 381.260 MB -> 209.735 MB.\n====== chi-square (apache-spark) [default], iteration 9 completed (916.193 ms) ======\n====== chi-square (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 172.071 ms, heap usage 375.984 MB -> 209.776 MB.\n====== chi-square (apache-spark) [default], iteration 10 completed (706.035 ms) ======\n====== chi-square (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 142.619 ms, heap usage 232.457 MB -> 209.816 MB.\n====== chi-square (apache-spark) [default], iteration 11 completed (764.527 ms) ======\n====== chi-square (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 164.121 ms, heap usage 670.340 MB -> 209.852 MB.\n====== chi-square (apache-spark) [default], iteration 12 completed (858.768 ms) ======\n====== chi-square (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 159.826 ms, heap usage 316.763 MB -> 209.890 MB.\n====== chi-square (apache-spark) [default], iteration 13 completed (862.769 ms) ======\n====== chi-square (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 166.687 ms, heap usage 379.775 MB -> 209.921 MB.\n====== chi-square (apache-spark) [default], iteration 14 completed (703.576 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 196.120 ms, heap usage 470.464 MB -> 147.340 MB.\n====== fj-kmeans (concurrency) [default], iteration 0 completed (8529.473 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 133.696 ms, heap usage 331.615 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 1 completed (7479.812 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 134.063 ms, heap usage 318.922 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 2 completed (7610.407 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 133.778 ms, heap usage 222.341 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 3 completed (7571.793 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 139.456 ms, heap usage 217.309 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 4 completed (7516.518 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 133.370 ms, heap usage 382.616 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 5 completed (8339.655 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 140.237 ms, heap usage 354.831 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 6 completed (7633.795 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 137.960 ms, heap usage 448.031 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 7 completed (7335.928 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 127.427 ms, heap usage 221.957 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 8 completed (7359.912 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 137.302 ms, heap usage 368.915 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 9 completed (8379.108 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 139.433 ms, heap usage 184.312 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 10 completed (8029.337 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 138.797 ms, heap usage 171.657 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 11 completed (7673.166 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 132.845 ms, heap usage 170.035 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 12 completed (7460.127 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 137.480 ms, heap usage 320.158 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 13 completed (7646.174 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 127.475 ms, heap usage 186.440 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 14 completed (7391.153 ms) ======\n====== rx-scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 138.851 ms, heap usage 249.054 MB -> 97.875 MB.\n====== rx-scrabble (functional) [default], iteration 0 completed (539.438 ms) ======\n====== rx-scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 97.806 ms, heap usage 250.872 MB -> 98.124 MB.\n====== rx-scrabble (functional) [default], iteration 1 completed (188.955 ms) ======\n====== rx-scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 121.701 ms, heap usage 240.121 MB -> 98.118 MB.\n====== rx-scrabble (functional) [default], iteration 2 completed (158.740 ms) ======\n====== rx-scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 103.202 ms, heap usage 238.618 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 3 completed (147.979 ms) ======\n====== rx-scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 107.730 ms, heap usage 239.113 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 4 completed (162.112 ms) ======\n====== rx-scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 117.578 ms, heap usage 239.463 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 5 completed (128.936 ms) ======\n====== rx-scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 111.309 ms, heap usage 239.390 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 6 completed (116.055 ms) ======\n====== rx-scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 109.603 ms, heap usage 239.557 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 7 completed (109.336 ms) ======\n====== rx-scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 108.494 ms, heap usage 239.260 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 8 completed (124.372 ms) ======\n====== rx-scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 134.578 ms, heap usage 239.449 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 9 completed (133.649 ms) ======\n====== rx-scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 98.374 ms, heap usage 240.453 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 10 completed (197.918 ms) ======\n====== rx-scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 111.349 ms, heap usage 240.463 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 11 completed (117.228 ms) ======\n====== rx-scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 104.555 ms, heap usage 240.413 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 12 completed (112.849 ms) ======\n====== rx-scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 98.436 ms, heap usage 240.514 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 13 completed (105.866 ms) ======\n====== rx-scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 92.783 ms, heap usage 240.977 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 14 completed (105.587 ms) ======\n====== db-shootout (database) [default], iteration 0 started ======\nGC before operation: completed in 104.333 ms, heap usage 179.823 MB -> 100.606 MB.\n====== db-shootout (database) [default], iteration 0 completed (8779.951 ms) ======\n====== db-shootout (database) [default], iteration 1 started ======\nGC before operation: completed in 107.497 ms, heap usage 242.103 MB -> 110.924 MB.\n====== db-shootout (database) [default], iteration 1 completed (9343.782 ms) ======\n====== db-shootout (database) [default], iteration 2 started ======\nGC before operation: completed in 111.405 ms, heap usage 283.357 MB -> 112.478 MB.\n====== db-shootout (database) [default], iteration 2 completed (7499.305 ms) ======\n====== db-shootout (database) [default], iteration 3 started ======\nGC before operation: completed in 94.995 ms, heap usage 543.589 MB -> 114.314 MB.\n====== db-shootout (database) [default], iteration 3 completed (8724.019 ms) ======\n====== db-shootout (database) [default], iteration 4 started ======\nGC before operation: completed in 101.845 ms, heap usage 213.978 MB -> 159.872 MB.\n====== db-shootout (database) [default], iteration 4 completed (7010.765 ms) ======\n====== db-shootout (database) [default], iteration 5 started ======\nGC before operation: completed in 164.949 ms, heap usage 636.845 MB -> 167.668 MB.\n====== db-shootout (database) [default], iteration 5 completed (7721.156 ms) ======\n====== db-shootout (database) [default], iteration 6 started ======\nGC before operation: completed in 130.093 ms, heap usage 384.324 MB -> 167.486 MB.\n====== db-shootout (database) [default], iteration 6 completed (7647.257 ms) ======\n====== db-shootout (database) [default], iteration 7 started ======\nGC before operation: completed in 109.623 ms, heap usage 282.011 MB -> 175.857 MB.\n====== db-shootout (database) [default], iteration 7 completed (7329.669 ms) ======\n====== db-shootout (database) [default], iteration 8 started ======\nGC before operation: completed in 116.420 ms, heap usage 284.042 MB -> 175.655 MB.\n====== db-shootout (database) [default], iteration 8 completed (7329.711 ms) ======\n====== db-shootout (database) [default], iteration 9 started ======\nGC before operation: completed in 171.716 ms, heap usage 342.792 MB -> 175.912 MB.\n====== db-shootout (database) [default], iteration 9 completed (6774.502 ms) ======\n====== db-shootout (database) [default], iteration 10 started ======\nGC before operation: completed in 173.829 ms, heap usage 293.932 MB -> 175.555 MB.\n====== db-shootout (database) [default], iteration 10 completed (6874.618 ms) ======\n====== db-shootout (database) [default], iteration 11 started ======\nGC before operation: completed in 148.492 ms, heap usage 400.220 MB -> 180.072 MB.\n====== db-shootout (database) [default], iteration 11 completed (7713.732 ms) ======\n====== db-shootout (database) [default], iteration 12 started ======\nGC before operation: completed in 117.617 ms, heap usage 194.930 MB -> 178.866 MB.\n====== db-shootout (database) [default], iteration 12 completed (7466.876 ms) ======\n====== db-shootout (database) [default], iteration 13 started ======\nGC before operation: completed in 129.592 ms, heap usage 290.546 MB -> 179.243 MB.\n====== db-shootout (database) [default], iteration 13 completed (6989.489 ms) ======\n====== db-shootout (database) [default], iteration 14 started ======\nGC before operation: completed in 136.413 ms, heap usage 256.392 MB -> 179.022 MB.\n====== db-shootout (database) [default], iteration 14 completed (6647.630 ms) ======\nCreating graph database...\nLoading resources...\nPopulating database...\nfinagle-http on :39975 spawning 2 client and default number of server workers.\n====== finagle-http (web) [default], iteration 0 started ======\nGC before operation: completed in 98.510 ms, heap usage 612.157 MB -> 111.470 MB.\n====== finagle-http (web) [default], iteration 0 completed (17579.182 ms) ======\n====== finagle-http (web) [default], iteration 1 started ======\nGC before operation: completed in 132.580 ms, heap usage 293.599 MB -> 114.255 MB.\n====== finagle-http (web) [default], iteration 1 completed (7093.193 ms) ======\n====== finagle-http (web) [default], iteration 2 started ======\nGC before operation: completed in 139.872 ms, heap usage 142.229 MB -> 114.940 MB.\n====== finagle-http (web) [default], iteration 2 completed (3467.412 ms) ======\n====== finagle-http (web) [default], iteration 3 started ======\nGC before operation: completed in 102.621 ms, heap usage 139.149 MB -> 115.008 MB.\n====== finagle-http (web) [default], iteration 3 completed (2891.463 ms) ======\n====== finagle-http (web) [default], iteration 4 started ======\nGC before operation: completed in 101.518 ms, heap usage 138.053 MB -> 115.745 MB.\n====== finagle-http (web) [default], iteration 4 completed (3105.065 ms) ======\n====== finagle-http (web) [default], iteration 5 started ======\nGC before operation: completed in 107.976 ms, heap usage 136.110 MB -> 115.075 MB.\n====== finagle-http (web) [default], iteration 5 completed (2695.150 ms) ======\n====== finagle-http (web) [default], iteration 6 started ======\nGC before operation: completed in 112.486 ms, heap usage 136.249 MB -> 115.049 MB.\n====== finagle-http (web) [default], iteration 6 completed (2704.392 ms) ======\n====== finagle-http (web) [default], iteration 7 started ======\nGC before operation: completed in 114.377 ms, heap usage 135.245 MB -> 115.020 MB.\n====== finagle-http (web) [default], iteration 7 completed (2948.935 ms) ======\n====== finagle-http (web) [default], iteration 8 started ======\nGC before operation: completed in 122.053 ms, heap usage 135.666 MB -> 115.051 MB.\n====== finagle-http (web) [default], iteration 8 completed (2778.196 ms) ======\n====== finagle-http (web) [default], iteration 9 started ======\nGC before operation: completed in 109.678 ms, heap usage 136.088 MB -> 115.031 MB.\n====== finagle-http (web) [default], iteration 9 completed (2747.983 ms) ======\n====== finagle-http (web) [default], iteration 10 started ======\nGC before operation: completed in 99.536 ms, heap usage 135.498 MB -> 115.057 MB.\n====== finagle-http (web) [default], iteration 10 completed (2777.183 ms) ======\n====== finagle-http (web) [default], iteration 11 started ======\nGC before operation: completed in 100.476 ms, heap usage 134.090 MB -> 115.060 MB.\n====== finagle-http (web) [default], iteration 11 completed (2950.363 ms) ======\n====== finagle-http (web) [default], iteration 12 started ======\nGC before operation: completed in 101.952 ms, heap usage 134.523 MB -> 115.062 MB.\n====== finagle-http (web) [default], iteration 12 completed (2759.978 ms) ======\n====== finagle-http (web) [default], iteration 13 started ======\nGC before operation: completed in 109.865 ms, heap usage 135.138 MB -> 115.064 MB.\n====== finagle-http (web) [default], iteration 13 completed (2831.653 ms) ======\n====== finagle-http (web) [default], iteration 14 started ======\nGC before operation: completed in 105.948 ms, heap usage 134.532 MB -> 115.044 MB.\n====== finagle-http (web) [default], iteration 14 completed (2711.280 ms) ======\n"
    },
    "reactors": {
        "times": [
            17020.896,
            13892.575,
            12554.742,
            13425.368,
            12579.614,
            13161.693,
            12878.519,
            12975.597,
            12770.728,
            13076.609,
            13003.432,
            14004.051,
            13270.736,
            13719.15,
            13878.366
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 111.440 ms, heap usage 193.716 MB -> 76.034 MB.\n====== scrabble (functional) [default], iteration 0 completed (1746.818 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 75.425 ms, heap usage 124.295 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 1 completed (822.799 ms) ======\n====== scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 103.806 ms, heap usage 309.363 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 2 completed (876.688 ms) ======\n====== scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 108.057 ms, heap usage 131.528 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 3 completed (772.422 ms) ======\n====== scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 90.330 ms, heap usage 339.197 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 4 completed (664.922 ms) ======\n====== scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 78.633 ms, heap usage 242.581 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 5 completed (767.926 ms) ======\n====== scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 80.529 ms, heap usage 243.067 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 6 completed (771.953 ms) ======\n====== scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 87.821 ms, heap usage 169.966 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 7 completed (713.175 ms) ======\n====== scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 85.627 ms, heap usage 126.363 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 8 completed (705.321 ms) ======\n====== scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 77.713 ms, heap usage 279.273 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 9 completed (595.178 ms) ======\n====== scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 90.853 ms, heap usage 197.665 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 10 completed (653.981 ms) ======\n====== scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 80.787 ms, heap usage 125.936 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 11 completed (671.613 ms) ======\n====== scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 81.092 ms, heap usage 326.788 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 12 completed (614.500 ms) ======\n====== scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 74.421 ms, heap usage 199.244 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 13 completed (687.061 ms) ======\n====== scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 77.486 ms, heap usage 357.036 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 14 completed (698.120 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 39.864 ms, heap usage 626.576 MB -> 29.596 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (20832.995 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 151.296 ms, heap usage 587.802 MB -> 148.935 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (10726.986 ms) ======\n====== page-rank (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 139.528 ms, heap usage 662.229 MB -> 149.044 MB.\n====== page-rank (apache-spark) [default], iteration 2 completed (10497.012 ms) ======\n====== page-rank (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 145.301 ms, heap usage 620.847 MB -> 149.161 MB.\n====== page-rank (apache-spark) [default], iteration 3 completed (10683.078 ms) ======\n====== page-rank (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 146.272 ms, heap usage 595.956 MB -> 149.275 MB.\n====== page-rank (apache-spark) [default], iteration 4 completed (11158.857 ms) ======\n====== page-rank (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 150.477 ms, heap usage 624.956 MB -> 149.389 MB.\n====== page-rank (apache-spark) [default], iteration 5 completed (10816.748 ms) ======\n====== page-rank (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 152.563 ms, heap usage 475.956 MB -> 149.705 MB.\n====== page-rank (apache-spark) [default], iteration 6 completed (10797.777 ms) ======\n====== page-rank (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 153.431 ms, heap usage 575.956 MB -> 149.630 MB.\n====== page-rank (apache-spark) [default], iteration 7 completed (10320.855 ms) ======\n====== page-rank (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 154.161 ms, heap usage 494.956 MB -> 149.734 MB.\n====== page-rank (apache-spark) [default], iteration 8 completed (10797.875 ms) ======\n====== page-rank (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 159.810 ms, heap usage 685.884 MB -> 149.850 MB.\n====== page-rank (apache-spark) [default], iteration 9 completed (10426.551 ms) ======\n====== page-rank (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 138.119 ms, heap usage 483.136 MB -> 149.929 MB.\n====== page-rank (apache-spark) [default], iteration 10 completed (11319.287 ms) ======\n====== page-rank (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 160.571 ms, heap usage 417.218 MB -> 150.048 MB.\n====== page-rank (apache-spark) [default], iteration 11 completed (10773.541 ms) ======\n====== page-rank (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 153.774 ms, heap usage 591.956 MB -> 150.197 MB.\n====== page-rank (apache-spark) [default], iteration 12 completed (10583.141 ms) ======\n====== page-rank (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 151.297 ms, heap usage 385.309 MB -> 150.212 MB.\n====== page-rank (apache-spark) [default], iteration 13 completed (11225.389 ms) ======\n====== page-rank (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 138.750 ms, heap usage 506.956 MB -> 150.287 MB.\n====== page-rank (apache-spark) [default], iteration 14 completed (11253.752 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 60.640 ms, heap usage 661.207 MB -> 32.216 MB.\n====== future-genetic (functional) [default], iteration 0 completed (14742.129 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 51.821 ms, heap usage 114.841 MB -> 33.158 MB.\n====== future-genetic (functional) [default], iteration 1 completed (11014.493 ms) ======\n====== future-genetic (functional) [default], iteration 2 started ======\nGC before operation: completed in 34.821 ms, heap usage 68.320 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 2 completed (10628.352 ms) ======\n====== future-genetic (functional) [default], iteration 3 started ======\nGC before operation: completed in 38.504 ms, heap usage 57.876 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 3 completed (10722.143 ms) ======\n====== future-genetic (functional) [default], iteration 4 started ======\nGC before operation: completed in 39.692 ms, heap usage 145.206 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 4 completed (10840.012 ms) ======\n====== future-genetic (functional) [default], iteration 5 started ======\nGC before operation: completed in 38.411 ms, heap usage 81.011 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 5 completed (10598.435 ms) ======\n====== future-genetic (functional) [default], iteration 6 started ======\nGC before operation: completed in 40.019 ms, heap usage 144.534 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 6 completed (10786.150 ms) ======\n====== future-genetic (functional) [default], iteration 7 started ======\nGC before operation: completed in 48.015 ms, heap usage 171.419 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 7 completed (10652.683 ms) ======\n====== future-genetic (functional) [default], iteration 8 started ======\nGC before operation: completed in 35.498 ms, heap usage 37.426 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 8 completed (10488.698 ms) ======\n====== future-genetic (functional) [default], iteration 9 started ======\nGC before operation: completed in 42.383 ms, heap usage 130.505 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 9 completed (10682.271 ms) ======\n====== future-genetic (functional) [default], iteration 10 started ======\nGC before operation: completed in 48.742 ms, heap usage 134.970 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 10 completed (10549.840 ms) ======\n====== future-genetic (functional) [default], iteration 11 started ======\nGC before operation: completed in 41.808 ms, heap usage 156.009 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 11 completed (10851.547 ms) ======\n====== future-genetic (functional) [default], iteration 12 started ======\nGC before operation: completed in 40.139 ms, heap usage 163.381 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 12 completed (10940.461 ms) ======\n====== future-genetic (functional) [default], iteration 13 started ======\nGC before operation: completed in 35.048 ms, heap usage 80.372 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 13 completed (10876.099 ms) ======\n====== future-genetic (functional) [default], iteration 14 started ======\nGC before operation: completed in 43.468 ms, heap usage 62.997 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 14 completed (10763.606 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 70.620 ms, heap usage 85.721 MB -> 33.974 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 11\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (23373.227 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 371.313 ms, heap usage 780.679 MB -> 161.200 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (17055.803 ms) ======\n====== akka-uct (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 323.521 ms, heap usage 714.804 MB -> 140.346 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 2 completed (16644.579 ms) ======\n====== akka-uct (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 312.697 ms, heap usage 606.138 MB -> 139.703 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 3 completed (16230.901 ms) ======\n====== akka-uct (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 272.343 ms, heap usage 694.413 MB -> 139.888 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 4 completed (16222.783 ms) ======\n====== akka-uct (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 288.309 ms, heap usage 549.430 MB -> 124.976 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 5 completed (16061.576 ms) ======\n====== akka-uct (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 254.080 ms, heap usage 570.484 MB -> 130.699 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 6 completed (15769.690 ms) ======\n====== akka-uct (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 387.396 ms, heap usage 619.770 MB -> 158.750 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 7 completed (15901.168 ms) ======\n====== akka-uct (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 304.489 ms, heap usage 580.964 MB -> 149.879 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 8 completed (16178.151 ms) ======\n====== akka-uct (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 253.043 ms, heap usage 553.450 MB -> 150.939 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 9 completed (15874.839 ms) ======\n====== akka-uct (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 301.130 ms, heap usage 528.928 MB -> 139.937 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 10 completed (15982.587 ms) ======\n====== akka-uct (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 267.305 ms, heap usage 626.465 MB -> 131.010 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 11 completed (16353.495 ms) ======\n====== akka-uct (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 294.293 ms, heap usage 500.855 MB -> 153.125 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 12 completed (15969.903 ms) ======\n====== akka-uct (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 292.350 ms, heap usage 647.259 MB -> 125.388 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 13 completed (15322.843 ms) ======\n====== akka-uct (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 252.391 ms, heap usage 562.070 MB -> 128.190 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 14 completed (16083.172 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 2 (out of 2) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 134.630 ms, heap usage 463.678 MB -> 85.476 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (22878.805 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 103.188 ms, heap usage 272.080 MB -> 100.040 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (14811.341 ms) ======\n====== movie-lens (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 144.144 ms, heap usage 208.849 MB -> 97.194 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 2 completed (13632.892 ms) ======\n====== movie-lens (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 122.890 ms, heap usage 173.120 MB -> 97.842 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 3 completed (12814.257 ms) ======\n====== movie-lens (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 113.279 ms, heap usage 237.308 MB -> 98.141 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 4 completed (12978.413 ms) ======\n====== movie-lens (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 119.099 ms, heap usage 219.670 MB -> 98.103 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 5 completed (14306.460 ms) ======\n====== movie-lens (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 123.459 ms, heap usage 175.077 MB -> 98.404 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 6 completed (12568.443 ms) ======\n====== movie-lens (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 115.564 ms, heap usage 119.760 MB -> 100.031 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 7 completed (11505.398 ms) ======\n====== movie-lens (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 112.918 ms, heap usage 255.198 MB -> 99.024 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 8 completed (11706.594 ms) ======\n====== movie-lens (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 170.418 ms, heap usage 189.372 MB -> 98.513 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 9 completed (11662.958 ms) ======\n====== movie-lens (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 218.616 ms, heap usage 163.601 MB -> 98.629 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 10 completed (11293.424 ms) ======\n====== movie-lens (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 126.280 ms, heap usage 236.690 MB -> 98.603 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 11 completed (11873.509 ms) ======\n====== movie-lens (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 121.729 ms, heap usage 154.433 MB -> 98.657 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 12 completed (12263.435 ms) ======\n====== movie-lens (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 113.550 ms, heap usage 470.143 MB -> 102.266 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 13 completed (12351.951 ms) ======\n====== movie-lens (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 107.375 ms, heap usage 274.093 MB -> 98.738 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 14 completed (12112.256 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 83.428 ms, heap usage 476.231 MB -> 58.268 MB.\n====== scala-doku (scala) [default], iteration 0 completed (2753.475 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 83.813 ms, heap usage 150.542 MB -> 58.243 MB.\n====== scala-doku (scala) [default], iteration 1 completed (2340.567 ms) ======\n====== scala-doku (scala) [default], iteration 2 started ======\nGC before operation: completed in 88.607 ms, heap usage 121.743 MB -> 58.244 MB.\n====== scala-doku (scala) [default], iteration 2 completed (2269.313 ms) ======\n====== scala-doku (scala) [default], iteration 3 started ======\nGC before operation: completed in 79.133 ms, heap usage 118.244 MB -> 58.245 MB.\n====== scala-doku (scala) [default], iteration 3 completed (1898.181 ms) ======\n====== scala-doku (scala) [default], iteration 4 started ======\nGC before operation: completed in 86.643 ms, heap usage 120.745 MB -> 58.245 MB.\n====== scala-doku (scala) [default], iteration 4 completed (1792.430 ms) ======\n====== scala-doku (scala) [default], iteration 5 started ======\nGC before operation: completed in 77.315 ms, heap usage 119.245 MB -> 58.245 MB.\n====== scala-doku (scala) [default], iteration 5 completed (1786.944 ms) ======\n====== scala-doku (scala) [default], iteration 6 started ======\nGC before operation: completed in 89.168 ms, heap usage 120.745 MB -> 58.245 MB.\n====== scala-doku (scala) [default], iteration 6 completed (1866.830 ms) ======\n====== scala-doku (scala) [default], iteration 7 started ======\nGC before operation: completed in 76.164 ms, heap usage 120.245 MB -> 58.246 MB.\n====== scala-doku (scala) [default], iteration 7 completed (1799.903 ms) ======\n====== scala-doku (scala) [default], iteration 8 started ======\nGC before operation: completed in 79.207 ms, heap usage 119.746 MB -> 58.246 MB.\n====== scala-doku (scala) [default], iteration 8 completed (1782.750 ms) ======\n====== scala-doku (scala) [default], iteration 9 started ======\nGC before operation: completed in 86.288 ms, heap usage 120.246 MB -> 58.247 MB.\n====== scala-doku (scala) [default], iteration 9 completed (1778.745 ms) ======\n====== scala-doku (scala) [default], iteration 10 started ======\nGC before operation: completed in 77.760 ms, heap usage 119.747 MB -> 58.247 MB.\n====== scala-doku (scala) [default], iteration 10 completed (1794.655 ms) ======\n====== scala-doku (scala) [default], iteration 11 started ======\nGC before operation: completed in 92.459 ms, heap usage 119.747 MB -> 58.247 MB.\n====== scala-doku (scala) [default], iteration 11 completed (1818.580 ms) ======\n====== scala-doku (scala) [default], iteration 12 started ======\nGC before operation: completed in 77.984 ms, heap usage 120.247 MB -> 58.247 MB.\n====== scala-doku (scala) [default], iteration 12 completed (1848.215 ms) ======\n====== scala-doku (scala) [default], iteration 13 started ======\nGC before operation: completed in 93.441 ms, heap usage 119.747 MB -> 58.247 MB.\n====== scala-doku (scala) [default], iteration 13 completed (1809.411 ms) ======\n====== scala-doku (scala) [default], iteration 14 started ======\nGC before operation: completed in 82.582 ms, heap usage 119.747 MB -> 58.247 MB.\n====== scala-doku (scala) [default], iteration 14 completed (1803.934 ms) ======\nNOTE: 'chi-square' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== chi-square (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 99.379 ms, heap usage 319.426 MB -> 63.405 MB.\n====== chi-square (apache-spark) [default], iteration 0 completed (5198.635 ms) ======\n====== chi-square (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 217.985 ms, heap usage 339.427 MB -> 209.273 MB.\n====== chi-square (apache-spark) [default], iteration 1 completed (1119.485 ms) ======\n====== chi-square (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 175.933 ms, heap usage 299.968 MB -> 209.346 MB.\n====== chi-square (apache-spark) [default], iteration 2 completed (1038.669 ms) ======\n====== chi-square (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 162.484 ms, heap usage 434.584 MB -> 209.395 MB.\n====== chi-square (apache-spark) [default], iteration 3 completed (988.864 ms) ======\n====== chi-square (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 185.658 ms, heap usage 472.608 MB -> 209.448 MB.\n====== chi-square (apache-spark) [default], iteration 4 completed (1021.110 ms) ======\n====== chi-square (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 161.400 ms, heap usage 424.379 MB -> 209.494 MB.\n====== chi-square (apache-spark) [default], iteration 5 completed (1016.339 ms) ======\n====== chi-square (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 165.385 ms, heap usage 377.344 MB -> 209.638 MB.\n====== chi-square (apache-spark) [default], iteration 6 completed (1044.792 ms) ======\n====== chi-square (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 151.433 ms, heap usage 385.817 MB -> 209.712 MB.\n====== chi-square (apache-spark) [default], iteration 7 completed (892.107 ms) ======\n====== chi-square (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 148.497 ms, heap usage 375.358 MB -> 209.695 MB.\n====== chi-square (apache-spark) [default], iteration 8 completed (912.148 ms) ======\n====== chi-square (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 186.559 ms, heap usage 381.260 MB -> 209.735 MB.\n====== chi-square (apache-spark) [default], iteration 9 completed (916.193 ms) ======\n====== chi-square (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 172.071 ms, heap usage 375.984 MB -> 209.776 MB.\n====== chi-square (apache-spark) [default], iteration 10 completed (706.035 ms) ======\n====== chi-square (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 142.619 ms, heap usage 232.457 MB -> 209.816 MB.\n====== chi-square (apache-spark) [default], iteration 11 completed (764.527 ms) ======\n====== chi-square (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 164.121 ms, heap usage 670.340 MB -> 209.852 MB.\n====== chi-square (apache-spark) [default], iteration 12 completed (858.768 ms) ======\n====== chi-square (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 159.826 ms, heap usage 316.763 MB -> 209.890 MB.\n====== chi-square (apache-spark) [default], iteration 13 completed (862.769 ms) ======\n====== chi-square (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 166.687 ms, heap usage 379.775 MB -> 209.921 MB.\n====== chi-square (apache-spark) [default], iteration 14 completed (703.576 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 196.120 ms, heap usage 470.464 MB -> 147.340 MB.\n====== fj-kmeans (concurrency) [default], iteration 0 completed (8529.473 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 133.696 ms, heap usage 331.615 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 1 completed (7479.812 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 134.063 ms, heap usage 318.922 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 2 completed (7610.407 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 133.778 ms, heap usage 222.341 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 3 completed (7571.793 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 139.456 ms, heap usage 217.309 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 4 completed (7516.518 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 133.370 ms, heap usage 382.616 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 5 completed (8339.655 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 140.237 ms, heap usage 354.831 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 6 completed (7633.795 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 137.960 ms, heap usage 448.031 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 7 completed (7335.928 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 127.427 ms, heap usage 221.957 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 8 completed (7359.912 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 137.302 ms, heap usage 368.915 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 9 completed (8379.108 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 139.433 ms, heap usage 184.312 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 10 completed (8029.337 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 138.797 ms, heap usage 171.657 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 11 completed (7673.166 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 132.845 ms, heap usage 170.035 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 12 completed (7460.127 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 137.480 ms, heap usage 320.158 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 13 completed (7646.174 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 127.475 ms, heap usage 186.440 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 14 completed (7391.153 ms) ======\n====== rx-scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 138.851 ms, heap usage 249.054 MB -> 97.875 MB.\n====== rx-scrabble (functional) [default], iteration 0 completed (539.438 ms) ======\n====== rx-scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 97.806 ms, heap usage 250.872 MB -> 98.124 MB.\n====== rx-scrabble (functional) [default], iteration 1 completed (188.955 ms) ======\n====== rx-scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 121.701 ms, heap usage 240.121 MB -> 98.118 MB.\n====== rx-scrabble (functional) [default], iteration 2 completed (158.740 ms) ======\n====== rx-scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 103.202 ms, heap usage 238.618 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 3 completed (147.979 ms) ======\n====== rx-scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 107.730 ms, heap usage 239.113 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 4 completed (162.112 ms) ======\n====== rx-scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 117.578 ms, heap usage 239.463 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 5 completed (128.936 ms) ======\n====== rx-scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 111.309 ms, heap usage 239.390 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 6 completed (116.055 ms) ======\n====== rx-scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 109.603 ms, heap usage 239.557 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 7 completed (109.336 ms) ======\n====== rx-scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 108.494 ms, heap usage 239.260 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 8 completed (124.372 ms) ======\n====== rx-scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 134.578 ms, heap usage 239.449 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 9 completed (133.649 ms) ======\n====== rx-scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 98.374 ms, heap usage 240.453 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 10 completed (197.918 ms) ======\n====== rx-scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 111.349 ms, heap usage 240.463 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 11 completed (117.228 ms) ======\n====== rx-scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 104.555 ms, heap usage 240.413 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 12 completed (112.849 ms) ======\n====== rx-scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 98.436 ms, heap usage 240.514 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 13 completed (105.866 ms) ======\n====== rx-scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 92.783 ms, heap usage 240.977 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 14 completed (105.587 ms) ======\n====== db-shootout (database) [default], iteration 0 started ======\nGC before operation: completed in 104.333 ms, heap usage 179.823 MB -> 100.606 MB.\n====== db-shootout (database) [default], iteration 0 completed (8779.951 ms) ======\n====== db-shootout (database) [default], iteration 1 started ======\nGC before operation: completed in 107.497 ms, heap usage 242.103 MB -> 110.924 MB.\n====== db-shootout (database) [default], iteration 1 completed (9343.782 ms) ======\n====== db-shootout (database) [default], iteration 2 started ======\nGC before operation: completed in 111.405 ms, heap usage 283.357 MB -> 112.478 MB.\n====== db-shootout (database) [default], iteration 2 completed (7499.305 ms) ======\n====== db-shootout (database) [default], iteration 3 started ======\nGC before operation: completed in 94.995 ms, heap usage 543.589 MB -> 114.314 MB.\n====== db-shootout (database) [default], iteration 3 completed (8724.019 ms) ======\n====== db-shootout (database) [default], iteration 4 started ======\nGC before operation: completed in 101.845 ms, heap usage 213.978 MB -> 159.872 MB.\n====== db-shootout (database) [default], iteration 4 completed (7010.765 ms) ======\n====== db-shootout (database) [default], iteration 5 started ======\nGC before operation: completed in 164.949 ms, heap usage 636.845 MB -> 167.668 MB.\n====== db-shootout (database) [default], iteration 5 completed (7721.156 ms) ======\n====== db-shootout (database) [default], iteration 6 started ======\nGC before operation: completed in 130.093 ms, heap usage 384.324 MB -> 167.486 MB.\n====== db-shootout (database) [default], iteration 6 completed (7647.257 ms) ======\n====== db-shootout (database) [default], iteration 7 started ======\nGC before operation: completed in 109.623 ms, heap usage 282.011 MB -> 175.857 MB.\n====== db-shootout (database) [default], iteration 7 completed (7329.669 ms) ======\n====== db-shootout (database) [default], iteration 8 started ======\nGC before operation: completed in 116.420 ms, heap usage 284.042 MB -> 175.655 MB.\n====== db-shootout (database) [default], iteration 8 completed (7329.711 ms) ======\n====== db-shootout (database) [default], iteration 9 started ======\nGC before operation: completed in 171.716 ms, heap usage 342.792 MB -> 175.912 MB.\n====== db-shootout (database) [default], iteration 9 completed (6774.502 ms) ======\n====== db-shootout (database) [default], iteration 10 started ======\nGC before operation: completed in 173.829 ms, heap usage 293.932 MB -> 175.555 MB.\n====== db-shootout (database) [default], iteration 10 completed (6874.618 ms) ======\n====== db-shootout (database) [default], iteration 11 started ======\nGC before operation: completed in 148.492 ms, heap usage 400.220 MB -> 180.072 MB.\n====== db-shootout (database) [default], iteration 11 completed (7713.732 ms) ======\n====== db-shootout (database) [default], iteration 12 started ======\nGC before operation: completed in 117.617 ms, heap usage 194.930 MB -> 178.866 MB.\n====== db-shootout (database) [default], iteration 12 completed (7466.876 ms) ======\n====== db-shootout (database) [default], iteration 13 started ======\nGC before operation: completed in 129.592 ms, heap usage 290.546 MB -> 179.243 MB.\n====== db-shootout (database) [default], iteration 13 completed (6989.489 ms) ======\n====== db-shootout (database) [default], iteration 14 started ======\nGC before operation: completed in 136.413 ms, heap usage 256.392 MB -> 179.022 MB.\n====== db-shootout (database) [default], iteration 14 completed (6647.630 ms) ======\nCreating graph database...\nLoading resources...\nPopulating database...\nfinagle-http on :39975 spawning 2 client and default number of server workers.\n====== finagle-http (web) [default], iteration 0 started ======\nGC before operation: completed in 98.510 ms, heap usage 612.157 MB -> 111.470 MB.\n====== finagle-http (web) [default], iteration 0 completed (17579.182 ms) ======\n====== finagle-http (web) [default], iteration 1 started ======\nGC before operation: completed in 132.580 ms, heap usage 293.599 MB -> 114.255 MB.\n====== finagle-http (web) [default], iteration 1 completed (7093.193 ms) ======\n====== finagle-http (web) [default], iteration 2 started ======\nGC before operation: completed in 139.872 ms, heap usage 142.229 MB -> 114.940 MB.\n====== finagle-http (web) [default], iteration 2 completed (3467.412 ms) ======\n====== finagle-http (web) [default], iteration 3 started ======\nGC before operation: completed in 102.621 ms, heap usage 139.149 MB -> 115.008 MB.\n====== finagle-http (web) [default], iteration 3 completed (2891.463 ms) ======\n====== finagle-http (web) [default], iteration 4 started ======\nGC before operation: completed in 101.518 ms, heap usage 138.053 MB -> 115.745 MB.\n====== finagle-http (web) [default], iteration 4 completed (3105.065 ms) ======\n====== finagle-http (web) [default], iteration 5 started ======\nGC before operation: completed in 107.976 ms, heap usage 136.110 MB -> 115.075 MB.\n====== finagle-http (web) [default], iteration 5 completed (2695.150 ms) ======\n====== finagle-http (web) [default], iteration 6 started ======\nGC before operation: completed in 112.486 ms, heap usage 136.249 MB -> 115.049 MB.\n====== finagle-http (web) [default], iteration 6 completed (2704.392 ms) ======\n====== finagle-http (web) [default], iteration 7 started ======\nGC before operation: completed in 114.377 ms, heap usage 135.245 MB -> 115.020 MB.\n====== finagle-http (web) [default], iteration 7 completed (2948.935 ms) ======\n====== finagle-http (web) [default], iteration 8 started ======\nGC before operation: completed in 122.053 ms, heap usage 135.666 MB -> 115.051 MB.\n====== finagle-http (web) [default], iteration 8 completed (2778.196 ms) ======\n====== finagle-http (web) [default], iteration 9 started ======\nGC before operation: completed in 109.678 ms, heap usage 136.088 MB -> 115.031 MB.\n====== finagle-http (web) [default], iteration 9 completed (2747.983 ms) ======\n====== finagle-http (web) [default], iteration 10 started ======\nGC before operation: completed in 99.536 ms, heap usage 135.498 MB -> 115.057 MB.\n====== finagle-http (web) [default], iteration 10 completed (2777.183 ms) ======\n====== finagle-http (web) [default], iteration 11 started ======\nGC before operation: completed in 100.476 ms, heap usage 134.090 MB -> 115.060 MB.\n====== finagle-http (web) [default], iteration 11 completed (2950.363 ms) ======\n====== finagle-http (web) [default], iteration 12 started ======\nGC before operation: completed in 101.952 ms, heap usage 134.523 MB -> 115.062 MB.\n====== finagle-http (web) [default], iteration 12 completed (2759.978 ms) ======\n====== finagle-http (web) [default], iteration 13 started ======\nGC before operation: completed in 109.865 ms, heap usage 135.138 MB -> 115.064 MB.\n====== finagle-http (web) [default], iteration 13 completed (2831.653 ms) ======\n====== finagle-http (web) [default], iteration 14 started ======\nGC before operation: completed in 105.948 ms, heap usage 134.532 MB -> 115.044 MB.\n====== finagle-http (web) [default], iteration 14 completed (2711.280 ms) ======\n====== reactors (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 105.850 ms, heap usage 151.704 MB -> 116.190 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 0 completed (17020.896 ms) ======\n====== reactors (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 104.599 ms, heap usage 181.251 MB -> 113.711 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 1 completed (13892.575 ms) ======\n====== reactors (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 95.102 ms, heap usage 174.198 MB -> 113.758 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 2 completed (12554.742 ms) ======\n====== reactors (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 116.893 ms, heap usage 619.954 MB -> 113.748 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 3 completed (13425.368 ms) ======\n====== reactors (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 116.460 ms, heap usage 633.733 MB -> 113.696 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 4 completed (12579.614 ms) ======\n====== reactors (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 101.795 ms, heap usage 678.695 MB -> 113.699 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 5 completed (13161.693 ms) ======\n====== reactors (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 172.615 ms, heap usage 622.470 MB -> 113.699 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 6 completed (12878.519 ms) ======\n====== reactors (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 112.228 ms, heap usage 718.171 MB -> 113.700 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 7 completed (12975.597 ms) ======\n====== reactors (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 98.762 ms, heap usage 716.077 MB -> 113.700 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 8 completed (12770.728 ms) ======\n====== reactors (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 102.126 ms, heap usage 748.105 MB -> 113.710 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 9 completed (13076.609 ms) ======\n====== reactors (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 98.649 ms, heap usage 687.606 MB -> 113.700 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 10 completed (13003.432 ms) ======\n====== reactors (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 101.379 ms, heap usage 732.195 MB -> 113.700 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 11 completed (14004.051 ms) ======\n====== reactors (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 105.159 ms, heap usage 627.924 MB -> 113.700 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 12 completed (13270.736 ms) ======\n====== reactors (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 108.063 ms, heap usage 752.521 MB -> 113.700 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 13 completed (13719.150 ms) ======\n====== reactors (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 122.216 ms, heap usage 634.683 MB -> 113.714 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 14 completed (13878.366 ms) ======\n"
    },
    "dec-tree": {
        "times": [
            10211.732,
            2450.505,
            2009.743,
            1989.605,
            1714.918,
            1705.237,
            1675.41,
            1687.319,
            1553.852,
            1516.748,
            1582.871,
            1470.741,
            1455.447,
            1444.48,
            1470.615
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 111.440 ms, heap usage 193.716 MB -> 76.034 MB.\n====== scrabble (functional) [default], iteration 0 completed (1746.818 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 75.425 ms, heap usage 124.295 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 1 completed (822.799 ms) ======\n====== scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 103.806 ms, heap usage 309.363 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 2 completed (876.688 ms) ======\n====== scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 108.057 ms, heap usage 131.528 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 3 completed (772.422 ms) ======\n====== scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 90.330 ms, heap usage 339.197 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 4 completed (664.922 ms) ======\n====== scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 78.633 ms, heap usage 242.581 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 5 completed (767.926 ms) ======\n====== scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 80.529 ms, heap usage 243.067 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 6 completed (771.953 ms) ======\n====== scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 87.821 ms, heap usage 169.966 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 7 completed (713.175 ms) ======\n====== scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 85.627 ms, heap usage 126.363 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 8 completed (705.321 ms) ======\n====== scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 77.713 ms, heap usage 279.273 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 9 completed (595.178 ms) ======\n====== scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 90.853 ms, heap usage 197.665 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 10 completed (653.981 ms) ======\n====== scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 80.787 ms, heap usage 125.936 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 11 completed (671.613 ms) ======\n====== scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 81.092 ms, heap usage 326.788 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 12 completed (614.500 ms) ======\n====== scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 74.421 ms, heap usage 199.244 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 13 completed (687.061 ms) ======\n====== scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 77.486 ms, heap usage 357.036 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 14 completed (698.120 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 39.864 ms, heap usage 626.576 MB -> 29.596 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (20832.995 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 151.296 ms, heap usage 587.802 MB -> 148.935 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (10726.986 ms) ======\n====== page-rank (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 139.528 ms, heap usage 662.229 MB -> 149.044 MB.\n====== page-rank (apache-spark) [default], iteration 2 completed (10497.012 ms) ======\n====== page-rank (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 145.301 ms, heap usage 620.847 MB -> 149.161 MB.\n====== page-rank (apache-spark) [default], iteration 3 completed (10683.078 ms) ======\n====== page-rank (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 146.272 ms, heap usage 595.956 MB -> 149.275 MB.\n====== page-rank (apache-spark) [default], iteration 4 completed (11158.857 ms) ======\n====== page-rank (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 150.477 ms, heap usage 624.956 MB -> 149.389 MB.\n====== page-rank (apache-spark) [default], iteration 5 completed (10816.748 ms) ======\n====== page-rank (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 152.563 ms, heap usage 475.956 MB -> 149.705 MB.\n====== page-rank (apache-spark) [default], iteration 6 completed (10797.777 ms) ======\n====== page-rank (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 153.431 ms, heap usage 575.956 MB -> 149.630 MB.\n====== page-rank (apache-spark) [default], iteration 7 completed (10320.855 ms) ======\n====== page-rank (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 154.161 ms, heap usage 494.956 MB -> 149.734 MB.\n====== page-rank (apache-spark) [default], iteration 8 completed (10797.875 ms) ======\n====== page-rank (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 159.810 ms, heap usage 685.884 MB -> 149.850 MB.\n====== page-rank (apache-spark) [default], iteration 9 completed (10426.551 ms) ======\n====== page-rank (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 138.119 ms, heap usage 483.136 MB -> 149.929 MB.\n====== page-rank (apache-spark) [default], iteration 10 completed (11319.287 ms) ======\n====== page-rank (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 160.571 ms, heap usage 417.218 MB -> 150.048 MB.\n====== page-rank (apache-spark) [default], iteration 11 completed (10773.541 ms) ======\n====== page-rank (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 153.774 ms, heap usage 591.956 MB -> 150.197 MB.\n====== page-rank (apache-spark) [default], iteration 12 completed (10583.141 ms) ======\n====== page-rank (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 151.297 ms, heap usage 385.309 MB -> 150.212 MB.\n====== page-rank (apache-spark) [default], iteration 13 completed (11225.389 ms) ======\n====== page-rank (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 138.750 ms, heap usage 506.956 MB -> 150.287 MB.\n====== page-rank (apache-spark) [default], iteration 14 completed (11253.752 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 60.640 ms, heap usage 661.207 MB -> 32.216 MB.\n====== future-genetic (functional) [default], iteration 0 completed (14742.129 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 51.821 ms, heap usage 114.841 MB -> 33.158 MB.\n====== future-genetic (functional) [default], iteration 1 completed (11014.493 ms) ======\n====== future-genetic (functional) [default], iteration 2 started ======\nGC before operation: completed in 34.821 ms, heap usage 68.320 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 2 completed (10628.352 ms) ======\n====== future-genetic (functional) [default], iteration 3 started ======\nGC before operation: completed in 38.504 ms, heap usage 57.876 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 3 completed (10722.143 ms) ======\n====== future-genetic (functional) [default], iteration 4 started ======\nGC before operation: completed in 39.692 ms, heap usage 145.206 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 4 completed (10840.012 ms) ======\n====== future-genetic (functional) [default], iteration 5 started ======\nGC before operation: completed in 38.411 ms, heap usage 81.011 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 5 completed (10598.435 ms) ======\n====== future-genetic (functional) [default], iteration 6 started ======\nGC before operation: completed in 40.019 ms, heap usage 144.534 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 6 completed (10786.150 ms) ======\n====== future-genetic (functional) [default], iteration 7 started ======\nGC before operation: completed in 48.015 ms, heap usage 171.419 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 7 completed (10652.683 ms) ======\n====== future-genetic (functional) [default], iteration 8 started ======\nGC before operation: completed in 35.498 ms, heap usage 37.426 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 8 completed (10488.698 ms) ======\n====== future-genetic (functional) [default], iteration 9 started ======\nGC before operation: completed in 42.383 ms, heap usage 130.505 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 9 completed (10682.271 ms) ======\n====== future-genetic (functional) [default], iteration 10 started ======\nGC before operation: completed in 48.742 ms, heap usage 134.970 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 10 completed (10549.840 ms) ======\n====== future-genetic (functional) [default], iteration 11 started ======\nGC before operation: completed in 41.808 ms, heap usage 156.009 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 11 completed (10851.547 ms) ======\n====== future-genetic (functional) [default], iteration 12 started ======\nGC before operation: completed in 40.139 ms, heap usage 163.381 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 12 completed (10940.461 ms) ======\n====== future-genetic (functional) [default], iteration 13 started ======\nGC before operation: completed in 35.048 ms, heap usage 80.372 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 13 completed (10876.099 ms) ======\n====== future-genetic (functional) [default], iteration 14 started ======\nGC before operation: completed in 43.468 ms, heap usage 62.997 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 14 completed (10763.606 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 70.620 ms, heap usage 85.721 MB -> 33.974 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 11\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (23373.227 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 371.313 ms, heap usage 780.679 MB -> 161.200 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (17055.803 ms) ======\n====== akka-uct (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 323.521 ms, heap usage 714.804 MB -> 140.346 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 2 completed (16644.579 ms) ======\n====== akka-uct (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 312.697 ms, heap usage 606.138 MB -> 139.703 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 3 completed (16230.901 ms) ======\n====== akka-uct (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 272.343 ms, heap usage 694.413 MB -> 139.888 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 4 completed (16222.783 ms) ======\n====== akka-uct (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 288.309 ms, heap usage 549.430 MB -> 124.976 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 5 completed (16061.576 ms) ======\n====== akka-uct (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 254.080 ms, heap usage 570.484 MB -> 130.699 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 6 completed (15769.690 ms) ======\n====== akka-uct (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 387.396 ms, heap usage 619.770 MB -> 158.750 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 7 completed (15901.168 ms) ======\n====== akka-uct (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 304.489 ms, heap usage 580.964 MB -> 149.879 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 8 completed (16178.151 ms) ======\n====== akka-uct (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 253.043 ms, heap usage 553.450 MB -> 150.939 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 9 completed (15874.839 ms) ======\n====== akka-uct (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 301.130 ms, heap usage 528.928 MB -> 139.937 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 10 completed (15982.587 ms) ======\n====== akka-uct (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 267.305 ms, heap usage 626.465 MB -> 131.010 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 11 completed (16353.495 ms) ======\n====== akka-uct (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 294.293 ms, heap usage 500.855 MB -> 153.125 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 12 completed (15969.903 ms) ======\n====== akka-uct (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 292.350 ms, heap usage 647.259 MB -> 125.388 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 13 completed (15322.843 ms) ======\n====== akka-uct (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 252.391 ms, heap usage 562.070 MB -> 128.190 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 14 completed (16083.172 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 2 (out of 2) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 134.630 ms, heap usage 463.678 MB -> 85.476 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (22878.805 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 103.188 ms, heap usage 272.080 MB -> 100.040 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (14811.341 ms) ======\n====== movie-lens (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 144.144 ms, heap usage 208.849 MB -> 97.194 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 2 completed (13632.892 ms) ======\n====== movie-lens (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 122.890 ms, heap usage 173.120 MB -> 97.842 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 3 completed (12814.257 ms) ======\n====== movie-lens (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 113.279 ms, heap usage 237.308 MB -> 98.141 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 4 completed (12978.413 ms) ======\n====== movie-lens (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 119.099 ms, heap usage 219.670 MB -> 98.103 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 5 completed (14306.460 ms) ======\n====== movie-lens (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 123.459 ms, heap usage 175.077 MB -> 98.404 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 6 completed (12568.443 ms) ======\n====== movie-lens (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 115.564 ms, heap usage 119.760 MB -> 100.031 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 7 completed (11505.398 ms) ======\n====== movie-lens (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 112.918 ms, heap usage 255.198 MB -> 99.024 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 8 completed (11706.594 ms) ======\n====== movie-lens (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 170.418 ms, heap usage 189.372 MB -> 98.513 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 9 completed (11662.958 ms) ======\n====== movie-lens (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 218.616 ms, heap usage 163.601 MB -> 98.629 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 10 completed (11293.424 ms) ======\n====== movie-lens (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 126.280 ms, heap usage 236.690 MB -> 98.603 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 11 completed (11873.509 ms) ======\n====== movie-lens (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 121.729 ms, heap usage 154.433 MB -> 98.657 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 12 completed (12263.435 ms) ======\n====== movie-lens (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 113.550 ms, heap usage 470.143 MB -> 102.266 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 13 completed (12351.951 ms) ======\n====== movie-lens (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 107.375 ms, heap usage 274.093 MB -> 98.738 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 14 completed (12112.256 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 83.428 ms, heap usage 476.231 MB -> 58.268 MB.\n====== scala-doku (scala) [default], iteration 0 completed (2753.475 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 83.813 ms, heap usage 150.542 MB -> 58.243 MB.\n====== scala-doku (scala) [default], iteration 1 completed (2340.567 ms) ======\n====== scala-doku (scala) [default], iteration 2 started ======\nGC before operation: completed in 88.607 ms, heap usage 121.743 MB -> 58.244 MB.\n====== scala-doku (scala) [default], iteration 2 completed (2269.313 ms) ======\n====== scala-doku (scala) [default], iteration 3 started ======\nGC before operation: completed in 79.133 ms, heap usage 118.244 MB -> 58.245 MB.\n====== scala-doku (scala) [default], iteration 3 completed (1898.181 ms) ======\n====== scala-doku (scala) [default], iteration 4 started ======\nGC before operation: completed in 86.643 ms, heap usage 120.745 MB -> 58.245 MB.\n====== scala-doku (scala) [default], iteration 4 completed (1792.430 ms) ======\n====== scala-doku (scala) [default], iteration 5 started ======\nGC before operation: completed in 77.315 ms, heap usage 119.245 MB -> 58.245 MB.\n====== scala-doku (scala) [default], iteration 5 completed (1786.944 ms) ======\n====== scala-doku (scala) [default], iteration 6 started ======\nGC before operation: completed in 89.168 ms, heap usage 120.745 MB -> 58.245 MB.\n====== scala-doku (scala) [default], iteration 6 completed (1866.830 ms) ======\n====== scala-doku (scala) [default], iteration 7 started ======\nGC before operation: completed in 76.164 ms, heap usage 120.245 MB -> 58.246 MB.\n====== scala-doku (scala) [default], iteration 7 completed (1799.903 ms) ======\n====== scala-doku (scala) [default], iteration 8 started ======\nGC before operation: completed in 79.207 ms, heap usage 119.746 MB -> 58.246 MB.\n====== scala-doku (scala) [default], iteration 8 completed (1782.750 ms) ======\n====== scala-doku (scala) [default], iteration 9 started ======\nGC before operation: completed in 86.288 ms, heap usage 120.246 MB -> 58.247 MB.\n====== scala-doku (scala) [default], iteration 9 completed (1778.745 ms) ======\n====== scala-doku (scala) [default], iteration 10 started ======\nGC before operation: completed in 77.760 ms, heap usage 119.747 MB -> 58.247 MB.\n====== scala-doku (scala) [default], iteration 10 completed (1794.655 ms) ======\n====== scala-doku (scala) [default], iteration 11 started ======\nGC before operation: completed in 92.459 ms, heap usage 119.747 MB -> 58.247 MB.\n====== scala-doku (scala) [default], iteration 11 completed (1818.580 ms) ======\n====== scala-doku (scala) [default], iteration 12 started ======\nGC before operation: completed in 77.984 ms, heap usage 120.247 MB -> 58.247 MB.\n====== scala-doku (scala) [default], iteration 12 completed (1848.215 ms) ======\n====== scala-doku (scala) [default], iteration 13 started ======\nGC before operation: completed in 93.441 ms, heap usage 119.747 MB -> 58.247 MB.\n====== scala-doku (scala) [default], iteration 13 completed (1809.411 ms) ======\n====== scala-doku (scala) [default], iteration 14 started ======\nGC before operation: completed in 82.582 ms, heap usage 119.747 MB -> 58.247 MB.\n====== scala-doku (scala) [default], iteration 14 completed (1803.934 ms) ======\nNOTE: 'chi-square' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== chi-square (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 99.379 ms, heap usage 319.426 MB -> 63.405 MB.\n====== chi-square (apache-spark) [default], iteration 0 completed (5198.635 ms) ======\n====== chi-square (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 217.985 ms, heap usage 339.427 MB -> 209.273 MB.\n====== chi-square (apache-spark) [default], iteration 1 completed (1119.485 ms) ======\n====== chi-square (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 175.933 ms, heap usage 299.968 MB -> 209.346 MB.\n====== chi-square (apache-spark) [default], iteration 2 completed (1038.669 ms) ======\n====== chi-square (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 162.484 ms, heap usage 434.584 MB -> 209.395 MB.\n====== chi-square (apache-spark) [default], iteration 3 completed (988.864 ms) ======\n====== chi-square (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 185.658 ms, heap usage 472.608 MB -> 209.448 MB.\n====== chi-square (apache-spark) [default], iteration 4 completed (1021.110 ms) ======\n====== chi-square (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 161.400 ms, heap usage 424.379 MB -> 209.494 MB.\n====== chi-square (apache-spark) [default], iteration 5 completed (1016.339 ms) ======\n====== chi-square (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 165.385 ms, heap usage 377.344 MB -> 209.638 MB.\n====== chi-square (apache-spark) [default], iteration 6 completed (1044.792 ms) ======\n====== chi-square (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 151.433 ms, heap usage 385.817 MB -> 209.712 MB.\n====== chi-square (apache-spark) [default], iteration 7 completed (892.107 ms) ======\n====== chi-square (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 148.497 ms, heap usage 375.358 MB -> 209.695 MB.\n====== chi-square (apache-spark) [default], iteration 8 completed (912.148 ms) ======\n====== chi-square (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 186.559 ms, heap usage 381.260 MB -> 209.735 MB.\n====== chi-square (apache-spark) [default], iteration 9 completed (916.193 ms) ======\n====== chi-square (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 172.071 ms, heap usage 375.984 MB -> 209.776 MB.\n====== chi-square (apache-spark) [default], iteration 10 completed (706.035 ms) ======\n====== chi-square (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 142.619 ms, heap usage 232.457 MB -> 209.816 MB.\n====== chi-square (apache-spark) [default], iteration 11 completed (764.527 ms) ======\n====== chi-square (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 164.121 ms, heap usage 670.340 MB -> 209.852 MB.\n====== chi-square (apache-spark) [default], iteration 12 completed (858.768 ms) ======\n====== chi-square (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 159.826 ms, heap usage 316.763 MB -> 209.890 MB.\n====== chi-square (apache-spark) [default], iteration 13 completed (862.769 ms) ======\n====== chi-square (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 166.687 ms, heap usage 379.775 MB -> 209.921 MB.\n====== chi-square (apache-spark) [default], iteration 14 completed (703.576 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 196.120 ms, heap usage 470.464 MB -> 147.340 MB.\n====== fj-kmeans (concurrency) [default], iteration 0 completed (8529.473 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 133.696 ms, heap usage 331.615 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 1 completed (7479.812 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 134.063 ms, heap usage 318.922 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 2 completed (7610.407 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 133.778 ms, heap usage 222.341 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 3 completed (7571.793 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 139.456 ms, heap usage 217.309 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 4 completed (7516.518 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 133.370 ms, heap usage 382.616 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 5 completed (8339.655 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 140.237 ms, heap usage 354.831 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 6 completed (7633.795 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 137.960 ms, heap usage 448.031 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 7 completed (7335.928 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 127.427 ms, heap usage 221.957 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 8 completed (7359.912 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 137.302 ms, heap usage 368.915 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 9 completed (8379.108 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 139.433 ms, heap usage 184.312 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 10 completed (8029.337 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 138.797 ms, heap usage 171.657 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 11 completed (7673.166 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 132.845 ms, heap usage 170.035 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 12 completed (7460.127 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 137.480 ms, heap usage 320.158 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 13 completed (7646.174 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 127.475 ms, heap usage 186.440 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 14 completed (7391.153 ms) ======\n====== rx-scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 138.851 ms, heap usage 249.054 MB -> 97.875 MB.\n====== rx-scrabble (functional) [default], iteration 0 completed (539.438 ms) ======\n====== rx-scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 97.806 ms, heap usage 250.872 MB -> 98.124 MB.\n====== rx-scrabble (functional) [default], iteration 1 completed (188.955 ms) ======\n====== rx-scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 121.701 ms, heap usage 240.121 MB -> 98.118 MB.\n====== rx-scrabble (functional) [default], iteration 2 completed (158.740 ms) ======\n====== rx-scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 103.202 ms, heap usage 238.618 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 3 completed (147.979 ms) ======\n====== rx-scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 107.730 ms, heap usage 239.113 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 4 completed (162.112 ms) ======\n====== rx-scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 117.578 ms, heap usage 239.463 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 5 completed (128.936 ms) ======\n====== rx-scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 111.309 ms, heap usage 239.390 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 6 completed (116.055 ms) ======\n====== rx-scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 109.603 ms, heap usage 239.557 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 7 completed (109.336 ms) ======\n====== rx-scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 108.494 ms, heap usage 239.260 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 8 completed (124.372 ms) ======\n====== rx-scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 134.578 ms, heap usage 239.449 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 9 completed (133.649 ms) ======\n====== rx-scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 98.374 ms, heap usage 240.453 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 10 completed (197.918 ms) ======\n====== rx-scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 111.349 ms, heap usage 240.463 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 11 completed (117.228 ms) ======\n====== rx-scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 104.555 ms, heap usage 240.413 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 12 completed (112.849 ms) ======\n====== rx-scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 98.436 ms, heap usage 240.514 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 13 completed (105.866 ms) ======\n====== rx-scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 92.783 ms, heap usage 240.977 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 14 completed (105.587 ms) ======\n====== db-shootout (database) [default], iteration 0 started ======\nGC before operation: completed in 104.333 ms, heap usage 179.823 MB -> 100.606 MB.\n====== db-shootout (database) [default], iteration 0 completed (8779.951 ms) ======\n====== db-shootout (database) [default], iteration 1 started ======\nGC before operation: completed in 107.497 ms, heap usage 242.103 MB -> 110.924 MB.\n====== db-shootout (database) [default], iteration 1 completed (9343.782 ms) ======\n====== db-shootout (database) [default], iteration 2 started ======\nGC before operation: completed in 111.405 ms, heap usage 283.357 MB -> 112.478 MB.\n====== db-shootout (database) [default], iteration 2 completed (7499.305 ms) ======\n====== db-shootout (database) [default], iteration 3 started ======\nGC before operation: completed in 94.995 ms, heap usage 543.589 MB -> 114.314 MB.\n====== db-shootout (database) [default], iteration 3 completed (8724.019 ms) ======\n====== db-shootout (database) [default], iteration 4 started ======\nGC before operation: completed in 101.845 ms, heap usage 213.978 MB -> 159.872 MB.\n====== db-shootout (database) [default], iteration 4 completed (7010.765 ms) ======\n====== db-shootout (database) [default], iteration 5 started ======\nGC before operation: completed in 164.949 ms, heap usage 636.845 MB -> 167.668 MB.\n====== db-shootout (database) [default], iteration 5 completed (7721.156 ms) ======\n====== db-shootout (database) [default], iteration 6 started ======\nGC before operation: completed in 130.093 ms, heap usage 384.324 MB -> 167.486 MB.\n====== db-shootout (database) [default], iteration 6 completed (7647.257 ms) ======\n====== db-shootout (database) [default], iteration 7 started ======\nGC before operation: completed in 109.623 ms, heap usage 282.011 MB -> 175.857 MB.\n====== db-shootout (database) [default], iteration 7 completed (7329.669 ms) ======\n====== db-shootout (database) [default], iteration 8 started ======\nGC before operation: completed in 116.420 ms, heap usage 284.042 MB -> 175.655 MB.\n====== db-shootout (database) [default], iteration 8 completed (7329.711 ms) ======\n====== db-shootout (database) [default], iteration 9 started ======\nGC before operation: completed in 171.716 ms, heap usage 342.792 MB -> 175.912 MB.\n====== db-shootout (database) [default], iteration 9 completed (6774.502 ms) ======\n====== db-shootout (database) [default], iteration 10 started ======\nGC before operation: completed in 173.829 ms, heap usage 293.932 MB -> 175.555 MB.\n====== db-shootout (database) [default], iteration 10 completed (6874.618 ms) ======\n====== db-shootout (database) [default], iteration 11 started ======\nGC before operation: completed in 148.492 ms, heap usage 400.220 MB -> 180.072 MB.\n====== db-shootout (database) [default], iteration 11 completed (7713.732 ms) ======\n====== db-shootout (database) [default], iteration 12 started ======\nGC before operation: completed in 117.617 ms, heap usage 194.930 MB -> 178.866 MB.\n====== db-shootout (database) [default], iteration 12 completed (7466.876 ms) ======\n====== db-shootout (database) [default], iteration 13 started ======\nGC before operation: completed in 129.592 ms, heap usage 290.546 MB -> 179.243 MB.\n====== db-shootout (database) [default], iteration 13 completed (6989.489 ms) ======\n====== db-shootout (database) [default], iteration 14 started ======\nGC before operation: completed in 136.413 ms, heap usage 256.392 MB -> 179.022 MB.\n====== db-shootout (database) [default], iteration 14 completed (6647.630 ms) ======\nCreating graph database...\nLoading resources...\nPopulating database...\nfinagle-http on :39975 spawning 2 client and default number of server workers.\n====== finagle-http (web) [default], iteration 0 started ======\nGC before operation: completed in 98.510 ms, heap usage 612.157 MB -> 111.470 MB.\n====== finagle-http (web) [default], iteration 0 completed (17579.182 ms) ======\n====== finagle-http (web) [default], iteration 1 started ======\nGC before operation: completed in 132.580 ms, heap usage 293.599 MB -> 114.255 MB.\n====== finagle-http (web) [default], iteration 1 completed (7093.193 ms) ======\n====== finagle-http (web) [default], iteration 2 started ======\nGC before operation: completed in 139.872 ms, heap usage 142.229 MB -> 114.940 MB.\n====== finagle-http (web) [default], iteration 2 completed (3467.412 ms) ======\n====== finagle-http (web) [default], iteration 3 started ======\nGC before operation: completed in 102.621 ms, heap usage 139.149 MB -> 115.008 MB.\n====== finagle-http (web) [default], iteration 3 completed (2891.463 ms) ======\n====== finagle-http (web) [default], iteration 4 started ======\nGC before operation: completed in 101.518 ms, heap usage 138.053 MB -> 115.745 MB.\n====== finagle-http (web) [default], iteration 4 completed (3105.065 ms) ======\n====== finagle-http (web) [default], iteration 5 started ======\nGC before operation: completed in 107.976 ms, heap usage 136.110 MB -> 115.075 MB.\n====== finagle-http (web) [default], iteration 5 completed (2695.150 ms) ======\n====== finagle-http (web) [default], iteration 6 started ======\nGC before operation: completed in 112.486 ms, heap usage 136.249 MB -> 115.049 MB.\n====== finagle-http (web) [default], iteration 6 completed (2704.392 ms) ======\n====== finagle-http (web) [default], iteration 7 started ======\nGC before operation: completed in 114.377 ms, heap usage 135.245 MB -> 115.020 MB.\n====== finagle-http (web) [default], iteration 7 completed (2948.935 ms) ======\n====== finagle-http (web) [default], iteration 8 started ======\nGC before operation: completed in 122.053 ms, heap usage 135.666 MB -> 115.051 MB.\n====== finagle-http (web) [default], iteration 8 completed (2778.196 ms) ======\n====== finagle-http (web) [default], iteration 9 started ======\nGC before operation: completed in 109.678 ms, heap usage 136.088 MB -> 115.031 MB.\n====== finagle-http (web) [default], iteration 9 completed (2747.983 ms) ======\n====== finagle-http (web) [default], iteration 10 started ======\nGC before operation: completed in 99.536 ms, heap usage 135.498 MB -> 115.057 MB.\n====== finagle-http (web) [default], iteration 10 completed (2777.183 ms) ======\n====== finagle-http (web) [default], iteration 11 started ======\nGC before operation: completed in 100.476 ms, heap usage 134.090 MB -> 115.060 MB.\n====== finagle-http (web) [default], iteration 11 completed (2950.363 ms) ======\n====== finagle-http (web) [default], iteration 12 started ======\nGC before operation: completed in 101.952 ms, heap usage 134.523 MB -> 115.062 MB.\n====== finagle-http (web) [default], iteration 12 completed (2759.978 ms) ======\n====== finagle-http (web) [default], iteration 13 started ======\nGC before operation: completed in 109.865 ms, heap usage 135.138 MB -> 115.064 MB.\n====== finagle-http (web) [default], iteration 13 completed (2831.653 ms) ======\n====== finagle-http (web) [default], iteration 14 started ======\nGC before operation: completed in 105.948 ms, heap usage 134.532 MB -> 115.044 MB.\n====== finagle-http (web) [default], iteration 14 completed (2711.280 ms) ======\n====== reactors (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 105.850 ms, heap usage 151.704 MB -> 116.190 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 0 completed (17020.896 ms) ======\n====== reactors (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 104.599 ms, heap usage 181.251 MB -> 113.711 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 1 completed (13892.575 ms) ======\n====== reactors (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 95.102 ms, heap usage 174.198 MB -> 113.758 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 2 completed (12554.742 ms) ======\n====== reactors (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 116.893 ms, heap usage 619.954 MB -> 113.748 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 3 completed (13425.368 ms) ======\n====== reactors (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 116.460 ms, heap usage 633.733 MB -> 113.696 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 4 completed (12579.614 ms) ======\n====== reactors (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 101.795 ms, heap usage 678.695 MB -> 113.699 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 5 completed (13161.693 ms) ======\n====== reactors (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 172.615 ms, heap usage 622.470 MB -> 113.699 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 6 completed (12878.519 ms) ======\n====== reactors (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 112.228 ms, heap usage 718.171 MB -> 113.700 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 7 completed (12975.597 ms) ======\n====== reactors (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 98.762 ms, heap usage 716.077 MB -> 113.700 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 8 completed (12770.728 ms) ======\n====== reactors (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 102.126 ms, heap usage 748.105 MB -> 113.710 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 9 completed (13076.609 ms) ======\n====== reactors (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 98.649 ms, heap usage 687.606 MB -> 113.700 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 10 completed (13003.432 ms) ======\n====== reactors (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 101.379 ms, heap usage 732.195 MB -> 113.700 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 11 completed (14004.051 ms) ======\n====== reactors (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 105.159 ms, heap usage 627.924 MB -> 113.700 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 12 completed (13270.736 ms) ======\n====== reactors (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 108.063 ms, heap usage 752.521 MB -> 113.700 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 13 completed (13719.150 ms) ======\n====== reactors (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 122.216 ms, heap usage 634.683 MB -> 113.714 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 14 completed (13878.366 ms) ======\nNOTE: 'dec-tree' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== dec-tree (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 164.697 ms, heap usage 737.360 MB -> 126.493 MB.\n====== dec-tree (apache-spark) [default], iteration 0 completed (10211.732 ms) ======\n====== dec-tree (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 163.548 ms, heap usage 286.590 MB -> 158.107 MB.\n====== dec-tree (apache-spark) [default], iteration 1 completed (2450.505 ms) ======\n====== dec-tree (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 136.565 ms, heap usage 345.940 MB -> 158.492 MB.\n====== dec-tree (apache-spark) [default], iteration 2 completed (2009.743 ms) ======\n====== dec-tree (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 138.685 ms, heap usage 279.501 MB -> 158.716 MB.\n====== dec-tree (apache-spark) [default], iteration 3 completed (1989.605 ms) ======\n====== dec-tree (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 146.026 ms, heap usage 489.120 MB -> 158.915 MB.\n====== dec-tree (apache-spark) [default], iteration 4 completed (1714.918 ms) ======\n====== dec-tree (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 127.943 ms, heap usage 488.970 MB -> 159.140 MB.\n====== dec-tree (apache-spark) [default], iteration 5 completed (1705.237 ms) ======\n====== dec-tree (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 130.962 ms, heap usage 190.728 MB -> 158.870 MB.\n====== dec-tree (apache-spark) [default], iteration 6 completed (1675.410 ms) ======\n====== dec-tree (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 128.752 ms, heap usage 464.234 MB -> 159.494 MB.\n====== dec-tree (apache-spark) [default], iteration 7 completed (1687.319 ms) ======\n====== dec-tree (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 131.642 ms, heap usage 193.742 MB -> 159.062 MB.\n====== dec-tree (apache-spark) [default], iteration 8 completed (1553.852 ms) ======\n====== dec-tree (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 146.296 ms, heap usage 480.448 MB -> 168.014 MB.\n====== dec-tree (apache-spark) [default], iteration 9 completed (1516.748 ms) ======\n====== dec-tree (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 144.013 ms, heap usage 452.343 MB -> 159.895 MB.\n====== dec-tree (apache-spark) [default], iteration 10 completed (1582.871 ms) ======\n====== dec-tree (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 134.653 ms, heap usage 443.551 MB -> 160.089 MB.\n====== dec-tree (apache-spark) [default], iteration 11 completed (1470.741 ms) ======\n====== dec-tree (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 195.778 ms, heap usage 440.791 MB -> 160.224 MB.\n====== dec-tree (apache-spark) [default], iteration 12 completed (1455.447 ms) ======\n====== dec-tree (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 153.178 ms, heap usage 513.991 MB -> 160.372 MB.\n====== dec-tree (apache-spark) [default], iteration 13 completed (1444.480 ms) ======\n====== dec-tree (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 140.368 ms, heap usage 445.814 MB -> 160.435 MB.\n====== dec-tree (apache-spark) [default], iteration 14 completed (1470.615 ms) ======\n"
    },
    "scala-stm-bench7": {
        "times": [
            2511.48,
            1783.062,
            1408.246,
            1342.53,
            1272.51,
            1480.501,
            1372.866,
            1368.893,
            1469.754,
            1497.723,
            1120.384,
            1498.094,
            1301.468,
            1351.47,
            1439.994
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 111.440 ms, heap usage 193.716 MB -> 76.034 MB.\n====== scrabble (functional) [default], iteration 0 completed (1746.818 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 75.425 ms, heap usage 124.295 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 1 completed (822.799 ms) ======\n====== scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 103.806 ms, heap usage 309.363 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 2 completed (876.688 ms) ======\n====== scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 108.057 ms, heap usage 131.528 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 3 completed (772.422 ms) ======\n====== scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 90.330 ms, heap usage 339.197 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 4 completed (664.922 ms) ======\n====== scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 78.633 ms, heap usage 242.581 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 5 completed (767.926 ms) ======\n====== scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 80.529 ms, heap usage 243.067 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 6 completed (771.953 ms) ======\n====== scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 87.821 ms, heap usage 169.966 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 7 completed (713.175 ms) ======\n====== scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 85.627 ms, heap usage 126.363 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 8 completed (705.321 ms) ======\n====== scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 77.713 ms, heap usage 279.273 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 9 completed (595.178 ms) ======\n====== scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 90.853 ms, heap usage 197.665 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 10 completed (653.981 ms) ======\n====== scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 80.787 ms, heap usage 125.936 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 11 completed (671.613 ms) ======\n====== scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 81.092 ms, heap usage 326.788 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 12 completed (614.500 ms) ======\n====== scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 74.421 ms, heap usage 199.244 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 13 completed (687.061 ms) ======\n====== scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 77.486 ms, heap usage 357.036 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 14 completed (698.120 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 39.864 ms, heap usage 626.576 MB -> 29.596 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (20832.995 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 151.296 ms, heap usage 587.802 MB -> 148.935 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (10726.986 ms) ======\n====== page-rank (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 139.528 ms, heap usage 662.229 MB -> 149.044 MB.\n====== page-rank (apache-spark) [default], iteration 2 completed (10497.012 ms) ======\n====== page-rank (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 145.301 ms, heap usage 620.847 MB -> 149.161 MB.\n====== page-rank (apache-spark) [default], iteration 3 completed (10683.078 ms) ======\n====== page-rank (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 146.272 ms, heap usage 595.956 MB -> 149.275 MB.\n====== page-rank (apache-spark) [default], iteration 4 completed (11158.857 ms) ======\n====== page-rank (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 150.477 ms, heap usage 624.956 MB -> 149.389 MB.\n====== page-rank (apache-spark) [default], iteration 5 completed (10816.748 ms) ======\n====== page-rank (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 152.563 ms, heap usage 475.956 MB -> 149.705 MB.\n====== page-rank (apache-spark) [default], iteration 6 completed (10797.777 ms) ======\n====== page-rank (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 153.431 ms, heap usage 575.956 MB -> 149.630 MB.\n====== page-rank (apache-spark) [default], iteration 7 completed (10320.855 ms) ======\n====== page-rank (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 154.161 ms, heap usage 494.956 MB -> 149.734 MB.\n====== page-rank (apache-spark) [default], iteration 8 completed (10797.875 ms) ======\n====== page-rank (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 159.810 ms, heap usage 685.884 MB -> 149.850 MB.\n====== page-rank (apache-spark) [default], iteration 9 completed (10426.551 ms) ======\n====== page-rank (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 138.119 ms, heap usage 483.136 MB -> 149.929 MB.\n====== page-rank (apache-spark) [default], iteration 10 completed (11319.287 ms) ======\n====== page-rank (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 160.571 ms, heap usage 417.218 MB -> 150.048 MB.\n====== page-rank (apache-spark) [default], iteration 11 completed (10773.541 ms) ======\n====== page-rank (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 153.774 ms, heap usage 591.956 MB -> 150.197 MB.\n====== page-rank (apache-spark) [default], iteration 12 completed (10583.141 ms) ======\n====== page-rank (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 151.297 ms, heap usage 385.309 MB -> 150.212 MB.\n====== page-rank (apache-spark) [default], iteration 13 completed (11225.389 ms) ======\n====== page-rank (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 138.750 ms, heap usage 506.956 MB -> 150.287 MB.\n====== page-rank (apache-spark) [default], iteration 14 completed (11253.752 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 60.640 ms, heap usage 661.207 MB -> 32.216 MB.\n====== future-genetic (functional) [default], iteration 0 completed (14742.129 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 51.821 ms, heap usage 114.841 MB -> 33.158 MB.\n====== future-genetic (functional) [default], iteration 1 completed (11014.493 ms) ======\n====== future-genetic (functional) [default], iteration 2 started ======\nGC before operation: completed in 34.821 ms, heap usage 68.320 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 2 completed (10628.352 ms) ======\n====== future-genetic (functional) [default], iteration 3 started ======\nGC before operation: completed in 38.504 ms, heap usage 57.876 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 3 completed (10722.143 ms) ======\n====== future-genetic (functional) [default], iteration 4 started ======\nGC before operation: completed in 39.692 ms, heap usage 145.206 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 4 completed (10840.012 ms) ======\n====== future-genetic (functional) [default], iteration 5 started ======\nGC before operation: completed in 38.411 ms, heap usage 81.011 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 5 completed (10598.435 ms) ======\n====== future-genetic (functional) [default], iteration 6 started ======\nGC before operation: completed in 40.019 ms, heap usage 144.534 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 6 completed (10786.150 ms) ======\n====== future-genetic (functional) [default], iteration 7 started ======\nGC before operation: completed in 48.015 ms, heap usage 171.419 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 7 completed (10652.683 ms) ======\n====== future-genetic (functional) [default], iteration 8 started ======\nGC before operation: completed in 35.498 ms, heap usage 37.426 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 8 completed (10488.698 ms) ======\n====== future-genetic (functional) [default], iteration 9 started ======\nGC before operation: completed in 42.383 ms, heap usage 130.505 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 9 completed (10682.271 ms) ======\n====== future-genetic (functional) [default], iteration 10 started ======\nGC before operation: completed in 48.742 ms, heap usage 134.970 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 10 completed (10549.840 ms) ======\n====== future-genetic (functional) [default], iteration 11 started ======\nGC before operation: completed in 41.808 ms, heap usage 156.009 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 11 completed (10851.547 ms) ======\n====== future-genetic (functional) [default], iteration 12 started ======\nGC before operation: completed in 40.139 ms, heap usage 163.381 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 12 completed (10940.461 ms) ======\n====== future-genetic (functional) [default], iteration 13 started ======\nGC before operation: completed in 35.048 ms, heap usage 80.372 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 13 completed (10876.099 ms) ======\n====== future-genetic (functional) [default], iteration 14 started ======\nGC before operation: completed in 43.468 ms, heap usage 62.997 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 14 completed (10763.606 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 70.620 ms, heap usage 85.721 MB -> 33.974 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 11\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (23373.227 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 371.313 ms, heap usage 780.679 MB -> 161.200 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (17055.803 ms) ======\n====== akka-uct (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 323.521 ms, heap usage 714.804 MB -> 140.346 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 2 completed (16644.579 ms) ======\n====== akka-uct (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 312.697 ms, heap usage 606.138 MB -> 139.703 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 3 completed (16230.901 ms) ======\n====== akka-uct (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 272.343 ms, heap usage 694.413 MB -> 139.888 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 4 completed (16222.783 ms) ======\n====== akka-uct (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 288.309 ms, heap usage 549.430 MB -> 124.976 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 5 completed (16061.576 ms) ======\n====== akka-uct (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 254.080 ms, heap usage 570.484 MB -> 130.699 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 6 completed (15769.690 ms) ======\n====== akka-uct (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 387.396 ms, heap usage 619.770 MB -> 158.750 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 7 completed (15901.168 ms) ======\n====== akka-uct (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 304.489 ms, heap usage 580.964 MB -> 149.879 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 8 completed (16178.151 ms) ======\n====== akka-uct (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 253.043 ms, heap usage 553.450 MB -> 150.939 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 9 completed (15874.839 ms) ======\n====== akka-uct (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 301.130 ms, heap usage 528.928 MB -> 139.937 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 10 completed (15982.587 ms) ======\n====== akka-uct (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 267.305 ms, heap usage 626.465 MB -> 131.010 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 11 completed (16353.495 ms) ======\n====== akka-uct (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 294.293 ms, heap usage 500.855 MB -> 153.125 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 12 completed (15969.903 ms) ======\n====== akka-uct (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 292.350 ms, heap usage 647.259 MB -> 125.388 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 13 completed (15322.843 ms) ======\n====== akka-uct (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 252.391 ms, heap usage 562.070 MB -> 128.190 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 14 completed (16083.172 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 2 (out of 2) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 134.630 ms, heap usage 463.678 MB -> 85.476 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (22878.805 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 103.188 ms, heap usage 272.080 MB -> 100.040 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (14811.341 ms) ======\n====== movie-lens (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 144.144 ms, heap usage 208.849 MB -> 97.194 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 2 completed (13632.892 ms) ======\n====== movie-lens (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 122.890 ms, heap usage 173.120 MB -> 97.842 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 3 completed (12814.257 ms) ======\n====== movie-lens (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 113.279 ms, heap usage 237.308 MB -> 98.141 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 4 completed (12978.413 ms) ======\n====== movie-lens (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 119.099 ms, heap usage 219.670 MB -> 98.103 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 5 completed (14306.460 ms) ======\n====== movie-lens (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 123.459 ms, heap usage 175.077 MB -> 98.404 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 6 completed (12568.443 ms) ======\n====== movie-lens (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 115.564 ms, heap usage 119.760 MB -> 100.031 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 7 completed (11505.398 ms) ======\n====== movie-lens (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 112.918 ms, heap usage 255.198 MB -> 99.024 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 8 completed (11706.594 ms) ======\n====== movie-lens (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 170.418 ms, heap usage 189.372 MB -> 98.513 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 9 completed (11662.958 ms) ======\n====== movie-lens (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 218.616 ms, heap usage 163.601 MB -> 98.629 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 10 completed (11293.424 ms) ======\n====== movie-lens (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 126.280 ms, heap usage 236.690 MB -> 98.603 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 11 completed (11873.509 ms) ======\n====== movie-lens (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 121.729 ms, heap usage 154.433 MB -> 98.657 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 12 completed (12263.435 ms) ======\n====== movie-lens (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 113.550 ms, heap usage 470.143 MB -> 102.266 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 13 completed (12351.951 ms) ======\n====== movie-lens (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 107.375 ms, heap usage 274.093 MB -> 98.738 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 14 completed (12112.256 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 83.428 ms, heap usage 476.231 MB -> 58.268 MB.\n====== scala-doku (scala) [default], iteration 0 completed (2753.475 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 83.813 ms, heap usage 150.542 MB -> 58.243 MB.\n====== scala-doku (scala) [default], iteration 1 completed (2340.567 ms) ======\n====== scala-doku (scala) [default], iteration 2 started ======\nGC before operation: completed in 88.607 ms, heap usage 121.743 MB -> 58.244 MB.\n====== scala-doku (scala) [default], iteration 2 completed (2269.313 ms) ======\n====== scala-doku (scala) [default], iteration 3 started ======\nGC before operation: completed in 79.133 ms, heap usage 118.244 MB -> 58.245 MB.\n====== scala-doku (scala) [default], iteration 3 completed (1898.181 ms) ======\n====== scala-doku (scala) [default], iteration 4 started ======\nGC before operation: completed in 86.643 ms, heap usage 120.745 MB -> 58.245 MB.\n====== scala-doku (scala) [default], iteration 4 completed (1792.430 ms) ======\n====== scala-doku (scala) [default], iteration 5 started ======\nGC before operation: completed in 77.315 ms, heap usage 119.245 MB -> 58.245 MB.\n====== scala-doku (scala) [default], iteration 5 completed (1786.944 ms) ======\n====== scala-doku (scala) [default], iteration 6 started ======\nGC before operation: completed in 89.168 ms, heap usage 120.745 MB -> 58.245 MB.\n====== scala-doku (scala) [default], iteration 6 completed (1866.830 ms) ======\n====== scala-doku (scala) [default], iteration 7 started ======\nGC before operation: completed in 76.164 ms, heap usage 120.245 MB -> 58.246 MB.\n====== scala-doku (scala) [default], iteration 7 completed (1799.903 ms) ======\n====== scala-doku (scala) [default], iteration 8 started ======\nGC before operation: completed in 79.207 ms, heap usage 119.746 MB -> 58.246 MB.\n====== scala-doku (scala) [default], iteration 8 completed (1782.750 ms) ======\n====== scala-doku (scala) [default], iteration 9 started ======\nGC before operation: completed in 86.288 ms, heap usage 120.246 MB -> 58.247 MB.\n====== scala-doku (scala) [default], iteration 9 completed (1778.745 ms) ======\n====== scala-doku (scala) [default], iteration 10 started ======\nGC before operation: completed in 77.760 ms, heap usage 119.747 MB -> 58.247 MB.\n====== scala-doku (scala) [default], iteration 10 completed (1794.655 ms) ======\n====== scala-doku (scala) [default], iteration 11 started ======\nGC before operation: completed in 92.459 ms, heap usage 119.747 MB -> 58.247 MB.\n====== scala-doku (scala) [default], iteration 11 completed (1818.580 ms) ======\n====== scala-doku (scala) [default], iteration 12 started ======\nGC before operation: completed in 77.984 ms, heap usage 120.247 MB -> 58.247 MB.\n====== scala-doku (scala) [default], iteration 12 completed (1848.215 ms) ======\n====== scala-doku (scala) [default], iteration 13 started ======\nGC before operation: completed in 93.441 ms, heap usage 119.747 MB -> 58.247 MB.\n====== scala-doku (scala) [default], iteration 13 completed (1809.411 ms) ======\n====== scala-doku (scala) [default], iteration 14 started ======\nGC before operation: completed in 82.582 ms, heap usage 119.747 MB -> 58.247 MB.\n====== scala-doku (scala) [default], iteration 14 completed (1803.934 ms) ======\nNOTE: 'chi-square' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== chi-square (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 99.379 ms, heap usage 319.426 MB -> 63.405 MB.\n====== chi-square (apache-spark) [default], iteration 0 completed (5198.635 ms) ======\n====== chi-square (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 217.985 ms, heap usage 339.427 MB -> 209.273 MB.\n====== chi-square (apache-spark) [default], iteration 1 completed (1119.485 ms) ======\n====== chi-square (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 175.933 ms, heap usage 299.968 MB -> 209.346 MB.\n====== chi-square (apache-spark) [default], iteration 2 completed (1038.669 ms) ======\n====== chi-square (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 162.484 ms, heap usage 434.584 MB -> 209.395 MB.\n====== chi-square (apache-spark) [default], iteration 3 completed (988.864 ms) ======\n====== chi-square (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 185.658 ms, heap usage 472.608 MB -> 209.448 MB.\n====== chi-square (apache-spark) [default], iteration 4 completed (1021.110 ms) ======\n====== chi-square (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 161.400 ms, heap usage 424.379 MB -> 209.494 MB.\n====== chi-square (apache-spark) [default], iteration 5 completed (1016.339 ms) ======\n====== chi-square (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 165.385 ms, heap usage 377.344 MB -> 209.638 MB.\n====== chi-square (apache-spark) [default], iteration 6 completed (1044.792 ms) ======\n====== chi-square (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 151.433 ms, heap usage 385.817 MB -> 209.712 MB.\n====== chi-square (apache-spark) [default], iteration 7 completed (892.107 ms) ======\n====== chi-square (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 148.497 ms, heap usage 375.358 MB -> 209.695 MB.\n====== chi-square (apache-spark) [default], iteration 8 completed (912.148 ms) ======\n====== chi-square (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 186.559 ms, heap usage 381.260 MB -> 209.735 MB.\n====== chi-square (apache-spark) [default], iteration 9 completed (916.193 ms) ======\n====== chi-square (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 172.071 ms, heap usage 375.984 MB -> 209.776 MB.\n====== chi-square (apache-spark) [default], iteration 10 completed (706.035 ms) ======\n====== chi-square (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 142.619 ms, heap usage 232.457 MB -> 209.816 MB.\n====== chi-square (apache-spark) [default], iteration 11 completed (764.527 ms) ======\n====== chi-square (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 164.121 ms, heap usage 670.340 MB -> 209.852 MB.\n====== chi-square (apache-spark) [default], iteration 12 completed (858.768 ms) ======\n====== chi-square (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 159.826 ms, heap usage 316.763 MB -> 209.890 MB.\n====== chi-square (apache-spark) [default], iteration 13 completed (862.769 ms) ======\n====== chi-square (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 166.687 ms, heap usage 379.775 MB -> 209.921 MB.\n====== chi-square (apache-spark) [default], iteration 14 completed (703.576 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 196.120 ms, heap usage 470.464 MB -> 147.340 MB.\n====== fj-kmeans (concurrency) [default], iteration 0 completed (8529.473 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 133.696 ms, heap usage 331.615 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 1 completed (7479.812 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 134.063 ms, heap usage 318.922 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 2 completed (7610.407 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 133.778 ms, heap usage 222.341 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 3 completed (7571.793 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 139.456 ms, heap usage 217.309 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 4 completed (7516.518 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 133.370 ms, heap usage 382.616 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 5 completed (8339.655 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 140.237 ms, heap usage 354.831 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 6 completed (7633.795 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 137.960 ms, heap usage 448.031 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 7 completed (7335.928 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 127.427 ms, heap usage 221.957 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 8 completed (7359.912 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 137.302 ms, heap usage 368.915 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 9 completed (8379.108 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 139.433 ms, heap usage 184.312 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 10 completed (8029.337 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 138.797 ms, heap usage 171.657 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 11 completed (7673.166 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 132.845 ms, heap usage 170.035 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 12 completed (7460.127 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 137.480 ms, heap usage 320.158 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 13 completed (7646.174 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 127.475 ms, heap usage 186.440 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 14 completed (7391.153 ms) ======\n====== rx-scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 138.851 ms, heap usage 249.054 MB -> 97.875 MB.\n====== rx-scrabble (functional) [default], iteration 0 completed (539.438 ms) ======\n====== rx-scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 97.806 ms, heap usage 250.872 MB -> 98.124 MB.\n====== rx-scrabble (functional) [default], iteration 1 completed (188.955 ms) ======\n====== rx-scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 121.701 ms, heap usage 240.121 MB -> 98.118 MB.\n====== rx-scrabble (functional) [default], iteration 2 completed (158.740 ms) ======\n====== rx-scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 103.202 ms, heap usage 238.618 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 3 completed (147.979 ms) ======\n====== rx-scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 107.730 ms, heap usage 239.113 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 4 completed (162.112 ms) ======\n====== rx-scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 117.578 ms, heap usage 239.463 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 5 completed (128.936 ms) ======\n====== rx-scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 111.309 ms, heap usage 239.390 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 6 completed (116.055 ms) ======\n====== rx-scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 109.603 ms, heap usage 239.557 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 7 completed (109.336 ms) ======\n====== rx-scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 108.494 ms, heap usage 239.260 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 8 completed (124.372 ms) ======\n====== rx-scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 134.578 ms, heap usage 239.449 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 9 completed (133.649 ms) ======\n====== rx-scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 98.374 ms, heap usage 240.453 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 10 completed (197.918 ms) ======\n====== rx-scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 111.349 ms, heap usage 240.463 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 11 completed (117.228 ms) ======\n====== rx-scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 104.555 ms, heap usage 240.413 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 12 completed (112.849 ms) ======\n====== rx-scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 98.436 ms, heap usage 240.514 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 13 completed (105.866 ms) ======\n====== rx-scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 92.783 ms, heap usage 240.977 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 14 completed (105.587 ms) ======\n====== db-shootout (database) [default], iteration 0 started ======\nGC before operation: completed in 104.333 ms, heap usage 179.823 MB -> 100.606 MB.\n====== db-shootout (database) [default], iteration 0 completed (8779.951 ms) ======\n====== db-shootout (database) [default], iteration 1 started ======\nGC before operation: completed in 107.497 ms, heap usage 242.103 MB -> 110.924 MB.\n====== db-shootout (database) [default], iteration 1 completed (9343.782 ms) ======\n====== db-shootout (database) [default], iteration 2 started ======\nGC before operation: completed in 111.405 ms, heap usage 283.357 MB -> 112.478 MB.\n====== db-shootout (database) [default], iteration 2 completed (7499.305 ms) ======\n====== db-shootout (database) [default], iteration 3 started ======\nGC before operation: completed in 94.995 ms, heap usage 543.589 MB -> 114.314 MB.\n====== db-shootout (database) [default], iteration 3 completed (8724.019 ms) ======\n====== db-shootout (database) [default], iteration 4 started ======\nGC before operation: completed in 101.845 ms, heap usage 213.978 MB -> 159.872 MB.\n====== db-shootout (database) [default], iteration 4 completed (7010.765 ms) ======\n====== db-shootout (database) [default], iteration 5 started ======\nGC before operation: completed in 164.949 ms, heap usage 636.845 MB -> 167.668 MB.\n====== db-shootout (database) [default], iteration 5 completed (7721.156 ms) ======\n====== db-shootout (database) [default], iteration 6 started ======\nGC before operation: completed in 130.093 ms, heap usage 384.324 MB -> 167.486 MB.\n====== db-shootout (database) [default], iteration 6 completed (7647.257 ms) ======\n====== db-shootout (database) [default], iteration 7 started ======\nGC before operation: completed in 109.623 ms, heap usage 282.011 MB -> 175.857 MB.\n====== db-shootout (database) [default], iteration 7 completed (7329.669 ms) ======\n====== db-shootout (database) [default], iteration 8 started ======\nGC before operation: completed in 116.420 ms, heap usage 284.042 MB -> 175.655 MB.\n====== db-shootout (database) [default], iteration 8 completed (7329.711 ms) ======\n====== db-shootout (database) [default], iteration 9 started ======\nGC before operation: completed in 171.716 ms, heap usage 342.792 MB -> 175.912 MB.\n====== db-shootout (database) [default], iteration 9 completed (6774.502 ms) ======\n====== db-shootout (database) [default], iteration 10 started ======\nGC before operation: completed in 173.829 ms, heap usage 293.932 MB -> 175.555 MB.\n====== db-shootout (database) [default], iteration 10 completed (6874.618 ms) ======\n====== db-shootout (database) [default], iteration 11 started ======\nGC before operation: completed in 148.492 ms, heap usage 400.220 MB -> 180.072 MB.\n====== db-shootout (database) [default], iteration 11 completed (7713.732 ms) ======\n====== db-shootout (database) [default], iteration 12 started ======\nGC before operation: completed in 117.617 ms, heap usage 194.930 MB -> 178.866 MB.\n====== db-shootout (database) [default], iteration 12 completed (7466.876 ms) ======\n====== db-shootout (database) [default], iteration 13 started ======\nGC before operation: completed in 129.592 ms, heap usage 290.546 MB -> 179.243 MB.\n====== db-shootout (database) [default], iteration 13 completed (6989.489 ms) ======\n====== db-shootout (database) [default], iteration 14 started ======\nGC before operation: completed in 136.413 ms, heap usage 256.392 MB -> 179.022 MB.\n====== db-shootout (database) [default], iteration 14 completed (6647.630 ms) ======\nCreating graph database...\nLoading resources...\nPopulating database...\nfinagle-http on :39975 spawning 2 client and default number of server workers.\n====== finagle-http (web) [default], iteration 0 started ======\nGC before operation: completed in 98.510 ms, heap usage 612.157 MB -> 111.470 MB.\n====== finagle-http (web) [default], iteration 0 completed (17579.182 ms) ======\n====== finagle-http (web) [default], iteration 1 started ======\nGC before operation: completed in 132.580 ms, heap usage 293.599 MB -> 114.255 MB.\n====== finagle-http (web) [default], iteration 1 completed (7093.193 ms) ======\n====== finagle-http (web) [default], iteration 2 started ======\nGC before operation: completed in 139.872 ms, heap usage 142.229 MB -> 114.940 MB.\n====== finagle-http (web) [default], iteration 2 completed (3467.412 ms) ======\n====== finagle-http (web) [default], iteration 3 started ======\nGC before operation: completed in 102.621 ms, heap usage 139.149 MB -> 115.008 MB.\n====== finagle-http (web) [default], iteration 3 completed (2891.463 ms) ======\n====== finagle-http (web) [default], iteration 4 started ======\nGC before operation: completed in 101.518 ms, heap usage 138.053 MB -> 115.745 MB.\n====== finagle-http (web) [default], iteration 4 completed (3105.065 ms) ======\n====== finagle-http (web) [default], iteration 5 started ======\nGC before operation: completed in 107.976 ms, heap usage 136.110 MB -> 115.075 MB.\n====== finagle-http (web) [default], iteration 5 completed (2695.150 ms) ======\n====== finagle-http (web) [default], iteration 6 started ======\nGC before operation: completed in 112.486 ms, heap usage 136.249 MB -> 115.049 MB.\n====== finagle-http (web) [default], iteration 6 completed (2704.392 ms) ======\n====== finagle-http (web) [default], iteration 7 started ======\nGC before operation: completed in 114.377 ms, heap usage 135.245 MB -> 115.020 MB.\n====== finagle-http (web) [default], iteration 7 completed (2948.935 ms) ======\n====== finagle-http (web) [default], iteration 8 started ======\nGC before operation: completed in 122.053 ms, heap usage 135.666 MB -> 115.051 MB.\n====== finagle-http (web) [default], iteration 8 completed (2778.196 ms) ======\n====== finagle-http (web) [default], iteration 9 started ======\nGC before operation: completed in 109.678 ms, heap usage 136.088 MB -> 115.031 MB.\n====== finagle-http (web) [default], iteration 9 completed (2747.983 ms) ======\n====== finagle-http (web) [default], iteration 10 started ======\nGC before operation: completed in 99.536 ms, heap usage 135.498 MB -> 115.057 MB.\n====== finagle-http (web) [default], iteration 10 completed (2777.183 ms) ======\n====== finagle-http (web) [default], iteration 11 started ======\nGC before operation: completed in 100.476 ms, heap usage 134.090 MB -> 115.060 MB.\n====== finagle-http (web) [default], iteration 11 completed (2950.363 ms) ======\n====== finagle-http (web) [default], iteration 12 started ======\nGC before operation: completed in 101.952 ms, heap usage 134.523 MB -> 115.062 MB.\n====== finagle-http (web) [default], iteration 12 completed (2759.978 ms) ======\n====== finagle-http (web) [default], iteration 13 started ======\nGC before operation: completed in 109.865 ms, heap usage 135.138 MB -> 115.064 MB.\n====== finagle-http (web) [default], iteration 13 completed (2831.653 ms) ======\n====== finagle-http (web) [default], iteration 14 started ======\nGC before operation: completed in 105.948 ms, heap usage 134.532 MB -> 115.044 MB.\n====== finagle-http (web) [default], iteration 14 completed (2711.280 ms) ======\n====== reactors (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 105.850 ms, heap usage 151.704 MB -> 116.190 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 0 completed (17020.896 ms) ======\n====== reactors (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 104.599 ms, heap usage 181.251 MB -> 113.711 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 1 completed (13892.575 ms) ======\n====== reactors (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 95.102 ms, heap usage 174.198 MB -> 113.758 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 2 completed (12554.742 ms) ======\n====== reactors (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 116.893 ms, heap usage 619.954 MB -> 113.748 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 3 completed (13425.368 ms) ======\n====== reactors (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 116.460 ms, heap usage 633.733 MB -> 113.696 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 4 completed (12579.614 ms) ======\n====== reactors (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 101.795 ms, heap usage 678.695 MB -> 113.699 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 5 completed (13161.693 ms) ======\n====== reactors (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 172.615 ms, heap usage 622.470 MB -> 113.699 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 6 completed (12878.519 ms) ======\n====== reactors (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 112.228 ms, heap usage 718.171 MB -> 113.700 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 7 completed (12975.597 ms) ======\n====== reactors (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 98.762 ms, heap usage 716.077 MB -> 113.700 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 8 completed (12770.728 ms) ======\n====== reactors (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 102.126 ms, heap usage 748.105 MB -> 113.710 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 9 completed (13076.609 ms) ======\n====== reactors (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 98.649 ms, heap usage 687.606 MB -> 113.700 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 10 completed (13003.432 ms) ======\n====== reactors (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 101.379 ms, heap usage 732.195 MB -> 113.700 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 11 completed (14004.051 ms) ======\n====== reactors (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 105.159 ms, heap usage 627.924 MB -> 113.700 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 12 completed (13270.736 ms) ======\n====== reactors (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 108.063 ms, heap usage 752.521 MB -> 113.700 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 13 completed (13719.150 ms) ======\n====== reactors (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 122.216 ms, heap usage 634.683 MB -> 113.714 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 14 completed (13878.366 ms) ======\nNOTE: 'dec-tree' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== dec-tree (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 164.697 ms, heap usage 737.360 MB -> 126.493 MB.\n====== dec-tree (apache-spark) [default], iteration 0 completed (10211.732 ms) ======\n====== dec-tree (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 163.548 ms, heap usage 286.590 MB -> 158.107 MB.\n====== dec-tree (apache-spark) [default], iteration 1 completed (2450.505 ms) ======\n====== dec-tree (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 136.565 ms, heap usage 345.940 MB -> 158.492 MB.\n====== dec-tree (apache-spark) [default], iteration 2 completed (2009.743 ms) ======\n====== dec-tree (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 138.685 ms, heap usage 279.501 MB -> 158.716 MB.\n====== dec-tree (apache-spark) [default], iteration 3 completed (1989.605 ms) ======\n====== dec-tree (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 146.026 ms, heap usage 489.120 MB -> 158.915 MB.\n====== dec-tree (apache-spark) [default], iteration 4 completed (1714.918 ms) ======\n====== dec-tree (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 127.943 ms, heap usage 488.970 MB -> 159.140 MB.\n====== dec-tree (apache-spark) [default], iteration 5 completed (1705.237 ms) ======\n====== dec-tree (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 130.962 ms, heap usage 190.728 MB -> 158.870 MB.\n====== dec-tree (apache-spark) [default], iteration 6 completed (1675.410 ms) ======\n====== dec-tree (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 128.752 ms, heap usage 464.234 MB -> 159.494 MB.\n====== dec-tree (apache-spark) [default], iteration 7 completed (1687.319 ms) ======\n====== dec-tree (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 131.642 ms, heap usage 193.742 MB -> 159.062 MB.\n====== dec-tree (apache-spark) [default], iteration 8 completed (1553.852 ms) ======\n====== dec-tree (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 146.296 ms, heap usage 480.448 MB -> 168.014 MB.\n====== dec-tree (apache-spark) [default], iteration 9 completed (1516.748 ms) ======\n====== dec-tree (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 144.013 ms, heap usage 452.343 MB -> 159.895 MB.\n====== dec-tree (apache-spark) [default], iteration 10 completed (1582.871 ms) ======\n====== dec-tree (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 134.653 ms, heap usage 443.551 MB -> 160.089 MB.\n====== dec-tree (apache-spark) [default], iteration 11 completed (1470.741 ms) ======\n====== dec-tree (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 195.778 ms, heap usage 440.791 MB -> 160.224 MB.\n====== dec-tree (apache-spark) [default], iteration 12 completed (1455.447 ms) ======\n====== dec-tree (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 153.178 ms, heap usage 513.991 MB -> 160.372 MB.\n====== dec-tree (apache-spark) [default], iteration 13 completed (1444.480 ms) ======\n====== dec-tree (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 140.368 ms, heap usage 445.814 MB -> 160.435 MB.\n====== dec-tree (apache-spark) [default], iteration 14 completed (1470.615 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 0 started ======\nGC before operation: completed in 151.372 ms, heap usage 172.187 MB -> 143.483 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 534\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 53\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 9\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 7\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 10\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 8\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 16\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 4\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 11\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 22\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 4\tmaxttc = 534\tfailed = 0\ttotal = 4\nSHORT_TRAVERSAL:  successful = 6\tmaxttc = 16\tfailed = 0\ttotal = 6\nSHORT_TRAVERSAL_RO:  successful = 10\tmaxttc = 9\tfailed = 0\ttotal = 10\nOPERATION:  successful = 8\tmaxttc = 22\tfailed = 0\ttotal = 8\nOPERATION_RO:  successful = 12\tmaxttc = 11\tfailed = 0\ttotal = 12\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 59.88 op/s (59.88 op/s including failed)\nElapsed time: 0.67 s\n====== scala-stm-bench7 (scala) [default], iteration 0 completed (2511.480 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 1 started ======\nGC before operation: completed in 135.828 ms, heap usage 523.490 MB -> 142.053 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 470\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 13\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 8\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 14\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 9\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 8\tmaxttc = 534\tfailed = 0\ttotal = 8\nSHORT_TRAVERSAL:  successful = 12\tmaxttc = 16\tfailed = 0\ttotal = 12\nSHORT_TRAVERSAL_RO:  successful = 20\tmaxttc = 9\tfailed = 0\ttotal = 20\nOPERATION:  successful = 16\tmaxttc = 22\tfailed = 0\ttotal = 16\nOPERATION_RO:  successful = 24\tmaxttc = 14\tfailed = 0\ttotal = 24\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 155.64 op/s (155.64 op/s including failed)\nElapsed time: 0.51 s\n====== scala-stm-bench7 (scala) [default], iteration 1 completed (1783.062 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 2 started ======\nGC before operation: completed in 240.384 ms, heap usage 489.877 MB -> 142.054 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 517\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 11\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 8\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 12\tmaxttc = 534\tfailed = 0\ttotal = 12\nSHORT_TRAVERSAL:  successful = 18\tmaxttc = 16\tfailed = 0\ttotal = 18\nSHORT_TRAVERSAL_RO:  successful = 30\tmaxttc = 9\tfailed = 0\ttotal = 30\nOPERATION:  successful = 24\tmaxttc = 22\tfailed = 0\ttotal = 24\nOPERATION_RO:  successful = 36\tmaxttc = 14\tfailed = 0\ttotal = 36\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 220.59 op/s (220.59 op/s including failed)\nElapsed time: 0.54 s\n====== scala-stm-bench7 (scala) [default], iteration 2 completed (1408.246 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 3 started ======\nGC before operation: completed in 136.697 ms, heap usage 506.905 MB -> 142.050 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 496\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 7\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 4\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 16\tmaxttc = 534\tfailed = 0\ttotal = 16\nSHORT_TRAVERSAL:  successful = 24\tmaxttc = 16\tfailed = 0\ttotal = 24\nSHORT_TRAVERSAL_RO:  successful = 40\tmaxttc = 9\tfailed = 0\ttotal = 40\nOPERATION:  successful = 32\tmaxttc = 22\tfailed = 0\ttotal = 32\nOPERATION_RO:  successful = 48\tmaxttc = 14\tfailed = 0\ttotal = 48\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 310.08 op/s (310.08 op/s including failed)\nElapsed time: 0.52 s\n====== scala-stm-bench7 (scala) [default], iteration 3 completed (1342.530 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 4 started ======\nGC before operation: completed in 147.926 ms, heap usage 393.121 MB -> 142.060 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 384\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 7\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 4\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 20\tmaxttc = 534\tfailed = 0\ttotal = 20\nSHORT_TRAVERSAL:  successful = 30\tmaxttc = 16\tfailed = 0\ttotal = 30\nSHORT_TRAVERSAL_RO:  successful = 50\tmaxttc = 9\tfailed = 0\ttotal = 50\nOPERATION:  successful = 40\tmaxttc = 22\tfailed = 0\ttotal = 40\nOPERATION_RO:  successful = 60\tmaxttc = 14\tfailed = 0\ttotal = 60\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 506.33 op/s (506.33 op/s including failed)\nElapsed time: 0.40 s\n====== scala-stm-bench7 (scala) [default], iteration 4 completed (1272.510 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 5 started ======\nGC before operation: completed in 185.238 ms, heap usage 380.599 MB -> 142.044 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 518\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 11\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 6\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 24\tmaxttc = 534\tfailed = 0\ttotal = 24\nSHORT_TRAVERSAL:  successful = 36\tmaxttc = 16\tfailed = 0\ttotal = 36\nSHORT_TRAVERSAL_RO:  successful = 60\tmaxttc = 9\tfailed = 0\ttotal = 60\nOPERATION:  successful = 48\tmaxttc = 22\tfailed = 0\ttotal = 48\nOPERATION_RO:  successful = 72\tmaxttc = 14\tfailed = 0\ttotal = 72\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 441.99 op/s (441.99 op/s including failed)\nElapsed time: 0.54 s\n====== scala-stm-bench7 (scala) [default], iteration 5 completed (1480.501 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 6 started ======\nGC before operation: completed in 153.068 ms, heap usage 507.102 MB -> 142.056 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 463\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 11\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 8\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 8\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 28\tmaxttc = 534\tfailed = 0\ttotal = 28\nSHORT_TRAVERSAL:  successful = 42\tmaxttc = 16\tfailed = 0\ttotal = 42\nSHORT_TRAVERSAL_RO:  successful = 70\tmaxttc = 9\tfailed = 0\ttotal = 70\nOPERATION:  successful = 56\tmaxttc = 22\tfailed = 0\ttotal = 56\nOPERATION_RO:  successful = 84\tmaxttc = 14\tfailed = 0\ttotal = 84\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 577.32 op/s (577.32 op/s including failed)\nElapsed time: 0.49 s\n====== scala-stm-bench7 (scala) [default], iteration 6 completed (1372.866 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 7 started ======\nGC before operation: completed in 147.549 ms, heap usage 507.608 MB -> 142.061 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 483\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 9\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 32\tmaxttc = 534\tfailed = 0\ttotal = 32\nSHORT_TRAVERSAL:  successful = 48\tmaxttc = 16\tfailed = 0\ttotal = 48\nSHORT_TRAVERSAL_RO:  successful = 80\tmaxttc = 9\tfailed = 0\ttotal = 80\nOPERATION:  successful = 64\tmaxttc = 22\tfailed = 0\ttotal = 64\nOPERATION_RO:  successful = 96\tmaxttc = 14\tfailed = 0\ttotal = 96\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 642.57 op/s (642.57 op/s including failed)\nElapsed time: 0.50 s\n====== scala-stm-bench7 (scala) [default], iteration 7 completed (1368.893 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 8 started ======\nGC before operation: completed in 156.075 ms, heap usage 505.601 MB -> 142.044 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 492\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 10\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 4\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 36\tmaxttc = 534\tfailed = 0\ttotal = 36\nSHORT_TRAVERSAL:  successful = 54\tmaxttc = 16\tfailed = 0\ttotal = 54\nSHORT_TRAVERSAL_RO:  successful = 90\tmaxttc = 9\tfailed = 0\ttotal = 90\nOPERATION:  successful = 72\tmaxttc = 22\tfailed = 0\ttotal = 72\nOPERATION_RO:  successful = 108\tmaxttc = 14\tfailed = 0\ttotal = 108\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 705.88 op/s (705.88 op/s including failed)\nElapsed time: 0.51 s\n====== scala-stm-bench7 (scala) [default], iteration 8 completed (1469.754 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 9 started ======\nGC before operation: completed in 137.134 ms, heap usage 507.110 MB -> 142.056 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 474\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 10\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 4\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 40\tmaxttc = 534\tfailed = 0\ttotal = 40\nSHORT_TRAVERSAL:  successful = 60\tmaxttc = 16\tfailed = 0\ttotal = 60\nSHORT_TRAVERSAL_RO:  successful = 100\tmaxttc = 9\tfailed = 0\ttotal = 100\nOPERATION:  successful = 80\tmaxttc = 22\tfailed = 0\ttotal = 80\nOPERATION_RO:  successful = 120\tmaxttc = 14\tfailed = 0\ttotal = 120\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 818.00 op/s (818.00 op/s including failed)\nElapsed time: 0.49 s\n====== scala-stm-bench7 (scala) [default], iteration 9 completed (1497.723 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 10 started ======\nGC before operation: completed in 389.866 ms, heap usage 507.497 MB -> 295.408 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 340\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 11\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 44\tmaxttc = 534\tfailed = 0\ttotal = 44\nSHORT_TRAVERSAL:  successful = 66\tmaxttc = 16\tfailed = 0\ttotal = 66\nSHORT_TRAVERSAL_RO:  successful = 110\tmaxttc = 9\tfailed = 0\ttotal = 110\nOPERATION:  successful = 88\tmaxttc = 22\tfailed = 0\ttotal = 88\nOPERATION_RO:  successful = 132\tmaxttc = 14\tfailed = 0\ttotal = 132\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1229.05 op/s (1229.05 op/s including failed)\nElapsed time: 0.36 s\n====== scala-stm-bench7 (scala) [default], iteration 10 completed (1120.384 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 11 started ======\nGC before operation: completed in 140.313 ms, heap usage 400.744 MB -> 142.052 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 600\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 12\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 48\tmaxttc = 600\tfailed = 0\ttotal = 48\nSHORT_TRAVERSAL:  successful = 72\tmaxttc = 16\tfailed = 0\ttotal = 72\nSHORT_TRAVERSAL_RO:  successful = 120\tmaxttc = 9\tfailed = 0\ttotal = 120\nOPERATION:  successful = 96\tmaxttc = 22\tfailed = 0\ttotal = 96\nOPERATION_RO:  successful = 144\tmaxttc = 14\tfailed = 0\ttotal = 144\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 770.47 op/s (770.47 op/s including failed)\nElapsed time: 0.62 s\n====== scala-stm-bench7 (scala) [default], iteration 11 completed (1498.094 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 12 started ======\nGC before operation: completed in 158.043 ms, heap usage 507.099 MB -> 142.057 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 429\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 6\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 52\tmaxttc = 600\tfailed = 0\ttotal = 52\nSHORT_TRAVERSAL:  successful = 78\tmaxttc = 16\tfailed = 0\ttotal = 78\nSHORT_TRAVERSAL_RO:  successful = 130\tmaxttc = 9\tfailed = 0\ttotal = 130\nOPERATION:  successful = 104\tmaxttc = 22\tfailed = 0\ttotal = 104\nOPERATION_RO:  successful = 156\tmaxttc = 14\tfailed = 0\ttotal = 156\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1184.51 op/s (1184.51 op/s including failed)\nElapsed time: 0.44 s\n====== scala-stm-bench7 (scala) [default], iteration 12 completed (1301.468 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 13 started ======\nGC before operation: completed in 157.214 ms, heap usage 430.109 MB -> 142.044 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 441\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 8\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 7\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 56\tmaxttc = 600\tfailed = 0\ttotal = 56\nSHORT_TRAVERSAL:  successful = 84\tmaxttc = 16\tfailed = 0\ttotal = 84\nSHORT_TRAVERSAL_RO:  successful = 140\tmaxttc = 9\tfailed = 0\ttotal = 140\nOPERATION:  successful = 112\tmaxttc = 22\tfailed = 0\ttotal = 112\nOPERATION_RO:  successful = 168\tmaxttc = 14\tfailed = 0\ttotal = 168\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1244.44 op/s (1244.44 op/s including failed)\nElapsed time: 0.45 s\n====== scala-stm-bench7 (scala) [default], iteration 13 completed (1351.470 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 14 started ======\nGC before operation: completed in 141.475 ms, heap usage 507.530 MB -> 142.049 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 482\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 10\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 60\tmaxttc = 600\tfailed = 0\ttotal = 60\nSHORT_TRAVERSAL:  successful = 90\tmaxttc = 16\tfailed = 0\ttotal = 90\nSHORT_TRAVERSAL_RO:  successful = 150\tmaxttc = 9\tfailed = 0\ttotal = 150\nOPERATION:  successful = 120\tmaxttc = 22\tfailed = 0\ttotal = 120\nOPERATION_RO:  successful = 180\tmaxttc = 14\tfailed = 0\ttotal = 180\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1204.82 op/s (1204.82 op/s including failed)\nElapsed time: 0.50 s\n====== scala-stm-bench7 (scala) [default], iteration 14 completed (1439.994 ms) ======\n"
    },
    "naive-bayes": {
        "times": [
            40505.768,
            23313.942,
            22137.04,
            22166.338,
            22021.017,
            21499.434,
            21187.52,
            22419.763,
            21701.999,
            20956.195,
            21463.384,
            20713.293,
            20682.267,
            21341.442,
            21277.786
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 111.440 ms, heap usage 193.716 MB -> 76.034 MB.\n====== scrabble (functional) [default], iteration 0 completed (1746.818 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 75.425 ms, heap usage 124.295 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 1 completed (822.799 ms) ======\n====== scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 103.806 ms, heap usage 309.363 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 2 completed (876.688 ms) ======\n====== scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 108.057 ms, heap usage 131.528 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 3 completed (772.422 ms) ======\n====== scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 90.330 ms, heap usage 339.197 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 4 completed (664.922 ms) ======\n====== scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 78.633 ms, heap usage 242.581 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 5 completed (767.926 ms) ======\n====== scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 80.529 ms, heap usage 243.067 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 6 completed (771.953 ms) ======\n====== scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 87.821 ms, heap usage 169.966 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 7 completed (713.175 ms) ======\n====== scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 85.627 ms, heap usage 126.363 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 8 completed (705.321 ms) ======\n====== scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 77.713 ms, heap usage 279.273 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 9 completed (595.178 ms) ======\n====== scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 90.853 ms, heap usage 197.665 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 10 completed (653.981 ms) ======\n====== scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 80.787 ms, heap usage 125.936 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 11 completed (671.613 ms) ======\n====== scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 81.092 ms, heap usage 326.788 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 12 completed (614.500 ms) ======\n====== scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 74.421 ms, heap usage 199.244 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 13 completed (687.061 ms) ======\n====== scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 77.486 ms, heap usage 357.036 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 14 completed (698.120 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 39.864 ms, heap usage 626.576 MB -> 29.596 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (20832.995 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 151.296 ms, heap usage 587.802 MB -> 148.935 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (10726.986 ms) ======\n====== page-rank (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 139.528 ms, heap usage 662.229 MB -> 149.044 MB.\n====== page-rank (apache-spark) [default], iteration 2 completed (10497.012 ms) ======\n====== page-rank (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 145.301 ms, heap usage 620.847 MB -> 149.161 MB.\n====== page-rank (apache-spark) [default], iteration 3 completed (10683.078 ms) ======\n====== page-rank (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 146.272 ms, heap usage 595.956 MB -> 149.275 MB.\n====== page-rank (apache-spark) [default], iteration 4 completed (11158.857 ms) ======\n====== page-rank (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 150.477 ms, heap usage 624.956 MB -> 149.389 MB.\n====== page-rank (apache-spark) [default], iteration 5 completed (10816.748 ms) ======\n====== page-rank (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 152.563 ms, heap usage 475.956 MB -> 149.705 MB.\n====== page-rank (apache-spark) [default], iteration 6 completed (10797.777 ms) ======\n====== page-rank (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 153.431 ms, heap usage 575.956 MB -> 149.630 MB.\n====== page-rank (apache-spark) [default], iteration 7 completed (10320.855 ms) ======\n====== page-rank (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 154.161 ms, heap usage 494.956 MB -> 149.734 MB.\n====== page-rank (apache-spark) [default], iteration 8 completed (10797.875 ms) ======\n====== page-rank (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 159.810 ms, heap usage 685.884 MB -> 149.850 MB.\n====== page-rank (apache-spark) [default], iteration 9 completed (10426.551 ms) ======\n====== page-rank (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 138.119 ms, heap usage 483.136 MB -> 149.929 MB.\n====== page-rank (apache-spark) [default], iteration 10 completed (11319.287 ms) ======\n====== page-rank (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 160.571 ms, heap usage 417.218 MB -> 150.048 MB.\n====== page-rank (apache-spark) [default], iteration 11 completed (10773.541 ms) ======\n====== page-rank (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 153.774 ms, heap usage 591.956 MB -> 150.197 MB.\n====== page-rank (apache-spark) [default], iteration 12 completed (10583.141 ms) ======\n====== page-rank (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 151.297 ms, heap usage 385.309 MB -> 150.212 MB.\n====== page-rank (apache-spark) [default], iteration 13 completed (11225.389 ms) ======\n====== page-rank (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 138.750 ms, heap usage 506.956 MB -> 150.287 MB.\n====== page-rank (apache-spark) [default], iteration 14 completed (11253.752 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 60.640 ms, heap usage 661.207 MB -> 32.216 MB.\n====== future-genetic (functional) [default], iteration 0 completed (14742.129 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 51.821 ms, heap usage 114.841 MB -> 33.158 MB.\n====== future-genetic (functional) [default], iteration 1 completed (11014.493 ms) ======\n====== future-genetic (functional) [default], iteration 2 started ======\nGC before operation: completed in 34.821 ms, heap usage 68.320 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 2 completed (10628.352 ms) ======\n====== future-genetic (functional) [default], iteration 3 started ======\nGC before operation: completed in 38.504 ms, heap usage 57.876 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 3 completed (10722.143 ms) ======\n====== future-genetic (functional) [default], iteration 4 started ======\nGC before operation: completed in 39.692 ms, heap usage 145.206 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 4 completed (10840.012 ms) ======\n====== future-genetic (functional) [default], iteration 5 started ======\nGC before operation: completed in 38.411 ms, heap usage 81.011 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 5 completed (10598.435 ms) ======\n====== future-genetic (functional) [default], iteration 6 started ======\nGC before operation: completed in 40.019 ms, heap usage 144.534 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 6 completed (10786.150 ms) ======\n====== future-genetic (functional) [default], iteration 7 started ======\nGC before operation: completed in 48.015 ms, heap usage 171.419 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 7 completed (10652.683 ms) ======\n====== future-genetic (functional) [default], iteration 8 started ======\nGC before operation: completed in 35.498 ms, heap usage 37.426 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 8 completed (10488.698 ms) ======\n====== future-genetic (functional) [default], iteration 9 started ======\nGC before operation: completed in 42.383 ms, heap usage 130.505 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 9 completed (10682.271 ms) ======\n====== future-genetic (functional) [default], iteration 10 started ======\nGC before operation: completed in 48.742 ms, heap usage 134.970 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 10 completed (10549.840 ms) ======\n====== future-genetic (functional) [default], iteration 11 started ======\nGC before operation: completed in 41.808 ms, heap usage 156.009 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 11 completed (10851.547 ms) ======\n====== future-genetic (functional) [default], iteration 12 started ======\nGC before operation: completed in 40.139 ms, heap usage 163.381 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 12 completed (10940.461 ms) ======\n====== future-genetic (functional) [default], iteration 13 started ======\nGC before operation: completed in 35.048 ms, heap usage 80.372 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 13 completed (10876.099 ms) ======\n====== future-genetic (functional) [default], iteration 14 started ======\nGC before operation: completed in 43.468 ms, heap usage 62.997 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 14 completed (10763.606 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 70.620 ms, heap usage 85.721 MB -> 33.974 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 11\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (23373.227 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 371.313 ms, heap usage 780.679 MB -> 161.200 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (17055.803 ms) ======\n====== akka-uct (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 323.521 ms, heap usage 714.804 MB -> 140.346 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 2 completed (16644.579 ms) ======\n====== akka-uct (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 312.697 ms, heap usage 606.138 MB -> 139.703 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 3 completed (16230.901 ms) ======\n====== akka-uct (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 272.343 ms, heap usage 694.413 MB -> 139.888 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 4 completed (16222.783 ms) ======\n====== akka-uct (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 288.309 ms, heap usage 549.430 MB -> 124.976 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 5 completed (16061.576 ms) ======\n====== akka-uct (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 254.080 ms, heap usage 570.484 MB -> 130.699 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 6 completed (15769.690 ms) ======\n====== akka-uct (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 387.396 ms, heap usage 619.770 MB -> 158.750 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 7 completed (15901.168 ms) ======\n====== akka-uct (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 304.489 ms, heap usage 580.964 MB -> 149.879 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 8 completed (16178.151 ms) ======\n====== akka-uct (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 253.043 ms, heap usage 553.450 MB -> 150.939 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 9 completed (15874.839 ms) ======\n====== akka-uct (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 301.130 ms, heap usage 528.928 MB -> 139.937 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 10 completed (15982.587 ms) ======\n====== akka-uct (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 267.305 ms, heap usage 626.465 MB -> 131.010 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 11 completed (16353.495 ms) ======\n====== akka-uct (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 294.293 ms, heap usage 500.855 MB -> 153.125 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 12 completed (15969.903 ms) ======\n====== akka-uct (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 292.350 ms, heap usage 647.259 MB -> 125.388 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 13 completed (15322.843 ms) ======\n====== akka-uct (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 252.391 ms, heap usage 562.070 MB -> 128.190 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 14 completed (16083.172 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 2 (out of 2) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 134.630 ms, heap usage 463.678 MB -> 85.476 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (22878.805 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 103.188 ms, heap usage 272.080 MB -> 100.040 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (14811.341 ms) ======\n====== movie-lens (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 144.144 ms, heap usage 208.849 MB -> 97.194 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 2 completed (13632.892 ms) ======\n====== movie-lens (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 122.890 ms, heap usage 173.120 MB -> 97.842 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 3 completed (12814.257 ms) ======\n====== movie-lens (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 113.279 ms, heap usage 237.308 MB -> 98.141 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 4 completed (12978.413 ms) ======\n====== movie-lens (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 119.099 ms, heap usage 219.670 MB -> 98.103 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 5 completed (14306.460 ms) ======\n====== movie-lens (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 123.459 ms, heap usage 175.077 MB -> 98.404 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 6 completed (12568.443 ms) ======\n====== movie-lens (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 115.564 ms, heap usage 119.760 MB -> 100.031 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 7 completed (11505.398 ms) ======\n====== movie-lens (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 112.918 ms, heap usage 255.198 MB -> 99.024 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 8 completed (11706.594 ms) ======\n====== movie-lens (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 170.418 ms, heap usage 189.372 MB -> 98.513 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 9 completed (11662.958 ms) ======\n====== movie-lens (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 218.616 ms, heap usage 163.601 MB -> 98.629 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 10 completed (11293.424 ms) ======\n====== movie-lens (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 126.280 ms, heap usage 236.690 MB -> 98.603 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 11 completed (11873.509 ms) ======\n====== movie-lens (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 121.729 ms, heap usage 154.433 MB -> 98.657 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 12 completed (12263.435 ms) ======\n====== movie-lens (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 113.550 ms, heap usage 470.143 MB -> 102.266 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 13 completed (12351.951 ms) ======\n====== movie-lens (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 107.375 ms, heap usage 274.093 MB -> 98.738 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 14 completed (12112.256 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 83.428 ms, heap usage 476.231 MB -> 58.268 MB.\n====== scala-doku (scala) [default], iteration 0 completed (2753.475 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 83.813 ms, heap usage 150.542 MB -> 58.243 MB.\n====== scala-doku (scala) [default], iteration 1 completed (2340.567 ms) ======\n====== scala-doku (scala) [default], iteration 2 started ======\nGC before operation: completed in 88.607 ms, heap usage 121.743 MB -> 58.244 MB.\n====== scala-doku (scala) [default], iteration 2 completed (2269.313 ms) ======\n====== scala-doku (scala) [default], iteration 3 started ======\nGC before operation: completed in 79.133 ms, heap usage 118.244 MB -> 58.245 MB.\n====== scala-doku (scala) [default], iteration 3 completed (1898.181 ms) ======\n====== scala-doku (scala) [default], iteration 4 started ======\nGC before operation: completed in 86.643 ms, heap usage 120.745 MB -> 58.245 MB.\n====== scala-doku (scala) [default], iteration 4 completed (1792.430 ms) ======\n====== scala-doku (scala) [default], iteration 5 started ======\nGC before operation: completed in 77.315 ms, heap usage 119.245 MB -> 58.245 MB.\n====== scala-doku (scala) [default], iteration 5 completed (1786.944 ms) ======\n====== scala-doku (scala) [default], iteration 6 started ======\nGC before operation: completed in 89.168 ms, heap usage 120.745 MB -> 58.245 MB.\n====== scala-doku (scala) [default], iteration 6 completed (1866.830 ms) ======\n====== scala-doku (scala) [default], iteration 7 started ======\nGC before operation: completed in 76.164 ms, heap usage 120.245 MB -> 58.246 MB.\n====== scala-doku (scala) [default], iteration 7 completed (1799.903 ms) ======\n====== scala-doku (scala) [default], iteration 8 started ======\nGC before operation: completed in 79.207 ms, heap usage 119.746 MB -> 58.246 MB.\n====== scala-doku (scala) [default], iteration 8 completed (1782.750 ms) ======\n====== scala-doku (scala) [default], iteration 9 started ======\nGC before operation: completed in 86.288 ms, heap usage 120.246 MB -> 58.247 MB.\n====== scala-doku (scala) [default], iteration 9 completed (1778.745 ms) ======\n====== scala-doku (scala) [default], iteration 10 started ======\nGC before operation: completed in 77.760 ms, heap usage 119.747 MB -> 58.247 MB.\n====== scala-doku (scala) [default], iteration 10 completed (1794.655 ms) ======\n====== scala-doku (scala) [default], iteration 11 started ======\nGC before operation: completed in 92.459 ms, heap usage 119.747 MB -> 58.247 MB.\n====== scala-doku (scala) [default], iteration 11 completed (1818.580 ms) ======\n====== scala-doku (scala) [default], iteration 12 started ======\nGC before operation: completed in 77.984 ms, heap usage 120.247 MB -> 58.247 MB.\n====== scala-doku (scala) [default], iteration 12 completed (1848.215 ms) ======\n====== scala-doku (scala) [default], iteration 13 started ======\nGC before operation: completed in 93.441 ms, heap usage 119.747 MB -> 58.247 MB.\n====== scala-doku (scala) [default], iteration 13 completed (1809.411 ms) ======\n====== scala-doku (scala) [default], iteration 14 started ======\nGC before operation: completed in 82.582 ms, heap usage 119.747 MB -> 58.247 MB.\n====== scala-doku (scala) [default], iteration 14 completed (1803.934 ms) ======\nNOTE: 'chi-square' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== chi-square (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 99.379 ms, heap usage 319.426 MB -> 63.405 MB.\n====== chi-square (apache-spark) [default], iteration 0 completed (5198.635 ms) ======\n====== chi-square (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 217.985 ms, heap usage 339.427 MB -> 209.273 MB.\n====== chi-square (apache-spark) [default], iteration 1 completed (1119.485 ms) ======\n====== chi-square (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 175.933 ms, heap usage 299.968 MB -> 209.346 MB.\n====== chi-square (apache-spark) [default], iteration 2 completed (1038.669 ms) ======\n====== chi-square (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 162.484 ms, heap usage 434.584 MB -> 209.395 MB.\n====== chi-square (apache-spark) [default], iteration 3 completed (988.864 ms) ======\n====== chi-square (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 185.658 ms, heap usage 472.608 MB -> 209.448 MB.\n====== chi-square (apache-spark) [default], iteration 4 completed (1021.110 ms) ======\n====== chi-square (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 161.400 ms, heap usage 424.379 MB -> 209.494 MB.\n====== chi-square (apache-spark) [default], iteration 5 completed (1016.339 ms) ======\n====== chi-square (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 165.385 ms, heap usage 377.344 MB -> 209.638 MB.\n====== chi-square (apache-spark) [default], iteration 6 completed (1044.792 ms) ======\n====== chi-square (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 151.433 ms, heap usage 385.817 MB -> 209.712 MB.\n====== chi-square (apache-spark) [default], iteration 7 completed (892.107 ms) ======\n====== chi-square (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 148.497 ms, heap usage 375.358 MB -> 209.695 MB.\n====== chi-square (apache-spark) [default], iteration 8 completed (912.148 ms) ======\n====== chi-square (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 186.559 ms, heap usage 381.260 MB -> 209.735 MB.\n====== chi-square (apache-spark) [default], iteration 9 completed (916.193 ms) ======\n====== chi-square (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 172.071 ms, heap usage 375.984 MB -> 209.776 MB.\n====== chi-square (apache-spark) [default], iteration 10 completed (706.035 ms) ======\n====== chi-square (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 142.619 ms, heap usage 232.457 MB -> 209.816 MB.\n====== chi-square (apache-spark) [default], iteration 11 completed (764.527 ms) ======\n====== chi-square (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 164.121 ms, heap usage 670.340 MB -> 209.852 MB.\n====== chi-square (apache-spark) [default], iteration 12 completed (858.768 ms) ======\n====== chi-square (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 159.826 ms, heap usage 316.763 MB -> 209.890 MB.\n====== chi-square (apache-spark) [default], iteration 13 completed (862.769 ms) ======\n====== chi-square (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 166.687 ms, heap usage 379.775 MB -> 209.921 MB.\n====== chi-square (apache-spark) [default], iteration 14 completed (703.576 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 196.120 ms, heap usage 470.464 MB -> 147.340 MB.\n====== fj-kmeans (concurrency) [default], iteration 0 completed (8529.473 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 133.696 ms, heap usage 331.615 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 1 completed (7479.812 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 134.063 ms, heap usage 318.922 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 2 completed (7610.407 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 133.778 ms, heap usage 222.341 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 3 completed (7571.793 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 139.456 ms, heap usage 217.309 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 4 completed (7516.518 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 133.370 ms, heap usage 382.616 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 5 completed (8339.655 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 140.237 ms, heap usage 354.831 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 6 completed (7633.795 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 137.960 ms, heap usage 448.031 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 7 completed (7335.928 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 127.427 ms, heap usage 221.957 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 8 completed (7359.912 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 137.302 ms, heap usage 368.915 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 9 completed (8379.108 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 139.433 ms, heap usage 184.312 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 10 completed (8029.337 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 138.797 ms, heap usage 171.657 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 11 completed (7673.166 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 132.845 ms, heap usage 170.035 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 12 completed (7460.127 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 137.480 ms, heap usage 320.158 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 13 completed (7646.174 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 127.475 ms, heap usage 186.440 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 14 completed (7391.153 ms) ======\n====== rx-scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 138.851 ms, heap usage 249.054 MB -> 97.875 MB.\n====== rx-scrabble (functional) [default], iteration 0 completed (539.438 ms) ======\n====== rx-scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 97.806 ms, heap usage 250.872 MB -> 98.124 MB.\n====== rx-scrabble (functional) [default], iteration 1 completed (188.955 ms) ======\n====== rx-scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 121.701 ms, heap usage 240.121 MB -> 98.118 MB.\n====== rx-scrabble (functional) [default], iteration 2 completed (158.740 ms) ======\n====== rx-scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 103.202 ms, heap usage 238.618 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 3 completed (147.979 ms) ======\n====== rx-scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 107.730 ms, heap usage 239.113 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 4 completed (162.112 ms) ======\n====== rx-scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 117.578 ms, heap usage 239.463 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 5 completed (128.936 ms) ======\n====== rx-scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 111.309 ms, heap usage 239.390 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 6 completed (116.055 ms) ======\n====== rx-scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 109.603 ms, heap usage 239.557 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 7 completed (109.336 ms) ======\n====== rx-scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 108.494 ms, heap usage 239.260 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 8 completed (124.372 ms) ======\n====== rx-scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 134.578 ms, heap usage 239.449 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 9 completed (133.649 ms) ======\n====== rx-scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 98.374 ms, heap usage 240.453 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 10 completed (197.918 ms) ======\n====== rx-scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 111.349 ms, heap usage 240.463 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 11 completed (117.228 ms) ======\n====== rx-scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 104.555 ms, heap usage 240.413 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 12 completed (112.849 ms) ======\n====== rx-scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 98.436 ms, heap usage 240.514 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 13 completed (105.866 ms) ======\n====== rx-scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 92.783 ms, heap usage 240.977 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 14 completed (105.587 ms) ======\n====== db-shootout (database) [default], iteration 0 started ======\nGC before operation: completed in 104.333 ms, heap usage 179.823 MB -> 100.606 MB.\n====== db-shootout (database) [default], iteration 0 completed (8779.951 ms) ======\n====== db-shootout (database) [default], iteration 1 started ======\nGC before operation: completed in 107.497 ms, heap usage 242.103 MB -> 110.924 MB.\n====== db-shootout (database) [default], iteration 1 completed (9343.782 ms) ======\n====== db-shootout (database) [default], iteration 2 started ======\nGC before operation: completed in 111.405 ms, heap usage 283.357 MB -> 112.478 MB.\n====== db-shootout (database) [default], iteration 2 completed (7499.305 ms) ======\n====== db-shootout (database) [default], iteration 3 started ======\nGC before operation: completed in 94.995 ms, heap usage 543.589 MB -> 114.314 MB.\n====== db-shootout (database) [default], iteration 3 completed (8724.019 ms) ======\n====== db-shootout (database) [default], iteration 4 started ======\nGC before operation: completed in 101.845 ms, heap usage 213.978 MB -> 159.872 MB.\n====== db-shootout (database) [default], iteration 4 completed (7010.765 ms) ======\n====== db-shootout (database) [default], iteration 5 started ======\nGC before operation: completed in 164.949 ms, heap usage 636.845 MB -> 167.668 MB.\n====== db-shootout (database) [default], iteration 5 completed (7721.156 ms) ======\n====== db-shootout (database) [default], iteration 6 started ======\nGC before operation: completed in 130.093 ms, heap usage 384.324 MB -> 167.486 MB.\n====== db-shootout (database) [default], iteration 6 completed (7647.257 ms) ======\n====== db-shootout (database) [default], iteration 7 started ======\nGC before operation: completed in 109.623 ms, heap usage 282.011 MB -> 175.857 MB.\n====== db-shootout (database) [default], iteration 7 completed (7329.669 ms) ======\n====== db-shootout (database) [default], iteration 8 started ======\nGC before operation: completed in 116.420 ms, heap usage 284.042 MB -> 175.655 MB.\n====== db-shootout (database) [default], iteration 8 completed (7329.711 ms) ======\n====== db-shootout (database) [default], iteration 9 started ======\nGC before operation: completed in 171.716 ms, heap usage 342.792 MB -> 175.912 MB.\n====== db-shootout (database) [default], iteration 9 completed (6774.502 ms) ======\n====== db-shootout (database) [default], iteration 10 started ======\nGC before operation: completed in 173.829 ms, heap usage 293.932 MB -> 175.555 MB.\n====== db-shootout (database) [default], iteration 10 completed (6874.618 ms) ======\n====== db-shootout (database) [default], iteration 11 started ======\nGC before operation: completed in 148.492 ms, heap usage 400.220 MB -> 180.072 MB.\n====== db-shootout (database) [default], iteration 11 completed (7713.732 ms) ======\n====== db-shootout (database) [default], iteration 12 started ======\nGC before operation: completed in 117.617 ms, heap usage 194.930 MB -> 178.866 MB.\n====== db-shootout (database) [default], iteration 12 completed (7466.876 ms) ======\n====== db-shootout (database) [default], iteration 13 started ======\nGC before operation: completed in 129.592 ms, heap usage 290.546 MB -> 179.243 MB.\n====== db-shootout (database) [default], iteration 13 completed (6989.489 ms) ======\n====== db-shootout (database) [default], iteration 14 started ======\nGC before operation: completed in 136.413 ms, heap usage 256.392 MB -> 179.022 MB.\n====== db-shootout (database) [default], iteration 14 completed (6647.630 ms) ======\nCreating graph database...\nLoading resources...\nPopulating database...\nfinagle-http on :39975 spawning 2 client and default number of server workers.\n====== finagle-http (web) [default], iteration 0 started ======\nGC before operation: completed in 98.510 ms, heap usage 612.157 MB -> 111.470 MB.\n====== finagle-http (web) [default], iteration 0 completed (17579.182 ms) ======\n====== finagle-http (web) [default], iteration 1 started ======\nGC before operation: completed in 132.580 ms, heap usage 293.599 MB -> 114.255 MB.\n====== finagle-http (web) [default], iteration 1 completed (7093.193 ms) ======\n====== finagle-http (web) [default], iteration 2 started ======\nGC before operation: completed in 139.872 ms, heap usage 142.229 MB -> 114.940 MB.\n====== finagle-http (web) [default], iteration 2 completed (3467.412 ms) ======\n====== finagle-http (web) [default], iteration 3 started ======\nGC before operation: completed in 102.621 ms, heap usage 139.149 MB -> 115.008 MB.\n====== finagle-http (web) [default], iteration 3 completed (2891.463 ms) ======\n====== finagle-http (web) [default], iteration 4 started ======\nGC before operation: completed in 101.518 ms, heap usage 138.053 MB -> 115.745 MB.\n====== finagle-http (web) [default], iteration 4 completed (3105.065 ms) ======\n====== finagle-http (web) [default], iteration 5 started ======\nGC before operation: completed in 107.976 ms, heap usage 136.110 MB -> 115.075 MB.\n====== finagle-http (web) [default], iteration 5 completed (2695.150 ms) ======\n====== finagle-http (web) [default], iteration 6 started ======\nGC before operation: completed in 112.486 ms, heap usage 136.249 MB -> 115.049 MB.\n====== finagle-http (web) [default], iteration 6 completed (2704.392 ms) ======\n====== finagle-http (web) [default], iteration 7 started ======\nGC before operation: completed in 114.377 ms, heap usage 135.245 MB -> 115.020 MB.\n====== finagle-http (web) [default], iteration 7 completed (2948.935 ms) ======\n====== finagle-http (web) [default], iteration 8 started ======\nGC before operation: completed in 122.053 ms, heap usage 135.666 MB -> 115.051 MB.\n====== finagle-http (web) [default], iteration 8 completed (2778.196 ms) ======\n====== finagle-http (web) [default], iteration 9 started ======\nGC before operation: completed in 109.678 ms, heap usage 136.088 MB -> 115.031 MB.\n====== finagle-http (web) [default], iteration 9 completed (2747.983 ms) ======\n====== finagle-http (web) [default], iteration 10 started ======\nGC before operation: completed in 99.536 ms, heap usage 135.498 MB -> 115.057 MB.\n====== finagle-http (web) [default], iteration 10 completed (2777.183 ms) ======\n====== finagle-http (web) [default], iteration 11 started ======\nGC before operation: completed in 100.476 ms, heap usage 134.090 MB -> 115.060 MB.\n====== finagle-http (web) [default], iteration 11 completed (2950.363 ms) ======\n====== finagle-http (web) [default], iteration 12 started ======\nGC before operation: completed in 101.952 ms, heap usage 134.523 MB -> 115.062 MB.\n====== finagle-http (web) [default], iteration 12 completed (2759.978 ms) ======\n====== finagle-http (web) [default], iteration 13 started ======\nGC before operation: completed in 109.865 ms, heap usage 135.138 MB -> 115.064 MB.\n====== finagle-http (web) [default], iteration 13 completed (2831.653 ms) ======\n====== finagle-http (web) [default], iteration 14 started ======\nGC before operation: completed in 105.948 ms, heap usage 134.532 MB -> 115.044 MB.\n====== finagle-http (web) [default], iteration 14 completed (2711.280 ms) ======\n====== reactors (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 105.850 ms, heap usage 151.704 MB -> 116.190 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 0 completed (17020.896 ms) ======\n====== reactors (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 104.599 ms, heap usage 181.251 MB -> 113.711 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 1 completed (13892.575 ms) ======\n====== reactors (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 95.102 ms, heap usage 174.198 MB -> 113.758 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 2 completed (12554.742 ms) ======\n====== reactors (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 116.893 ms, heap usage 619.954 MB -> 113.748 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 3 completed (13425.368 ms) ======\n====== reactors (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 116.460 ms, heap usage 633.733 MB -> 113.696 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 4 completed (12579.614 ms) ======\n====== reactors (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 101.795 ms, heap usage 678.695 MB -> 113.699 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 5 completed (13161.693 ms) ======\n====== reactors (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 172.615 ms, heap usage 622.470 MB -> 113.699 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 6 completed (12878.519 ms) ======\n====== reactors (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 112.228 ms, heap usage 718.171 MB -> 113.700 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 7 completed (12975.597 ms) ======\n====== reactors (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 98.762 ms, heap usage 716.077 MB -> 113.700 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 8 completed (12770.728 ms) ======\n====== reactors (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 102.126 ms, heap usage 748.105 MB -> 113.710 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 9 completed (13076.609 ms) ======\n====== reactors (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 98.649 ms, heap usage 687.606 MB -> 113.700 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 10 completed (13003.432 ms) ======\n====== reactors (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 101.379 ms, heap usage 732.195 MB -> 113.700 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 11 completed (14004.051 ms) ======\n====== reactors (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 105.159 ms, heap usage 627.924 MB -> 113.700 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 12 completed (13270.736 ms) ======\n====== reactors (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 108.063 ms, heap usage 752.521 MB -> 113.700 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 13 completed (13719.150 ms) ======\n====== reactors (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 122.216 ms, heap usage 634.683 MB -> 113.714 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 14 completed (13878.366 ms) ======\nNOTE: 'dec-tree' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== dec-tree (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 164.697 ms, heap usage 737.360 MB -> 126.493 MB.\n====== dec-tree (apache-spark) [default], iteration 0 completed (10211.732 ms) ======\n====== dec-tree (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 163.548 ms, heap usage 286.590 MB -> 158.107 MB.\n====== dec-tree (apache-spark) [default], iteration 1 completed (2450.505 ms) ======\n====== dec-tree (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 136.565 ms, heap usage 345.940 MB -> 158.492 MB.\n====== dec-tree (apache-spark) [default], iteration 2 completed (2009.743 ms) ======\n====== dec-tree (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 138.685 ms, heap usage 279.501 MB -> 158.716 MB.\n====== dec-tree (apache-spark) [default], iteration 3 completed (1989.605 ms) ======\n====== dec-tree (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 146.026 ms, heap usage 489.120 MB -> 158.915 MB.\n====== dec-tree (apache-spark) [default], iteration 4 completed (1714.918 ms) ======\n====== dec-tree (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 127.943 ms, heap usage 488.970 MB -> 159.140 MB.\n====== dec-tree (apache-spark) [default], iteration 5 completed (1705.237 ms) ======\n====== dec-tree (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 130.962 ms, heap usage 190.728 MB -> 158.870 MB.\n====== dec-tree (apache-spark) [default], iteration 6 completed (1675.410 ms) ======\n====== dec-tree (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 128.752 ms, heap usage 464.234 MB -> 159.494 MB.\n====== dec-tree (apache-spark) [default], iteration 7 completed (1687.319 ms) ======\n====== dec-tree (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 131.642 ms, heap usage 193.742 MB -> 159.062 MB.\n====== dec-tree (apache-spark) [default], iteration 8 completed (1553.852 ms) ======\n====== dec-tree (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 146.296 ms, heap usage 480.448 MB -> 168.014 MB.\n====== dec-tree (apache-spark) [default], iteration 9 completed (1516.748 ms) ======\n====== dec-tree (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 144.013 ms, heap usage 452.343 MB -> 159.895 MB.\n====== dec-tree (apache-spark) [default], iteration 10 completed (1582.871 ms) ======\n====== dec-tree (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 134.653 ms, heap usage 443.551 MB -> 160.089 MB.\n====== dec-tree (apache-spark) [default], iteration 11 completed (1470.741 ms) ======\n====== dec-tree (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 195.778 ms, heap usage 440.791 MB -> 160.224 MB.\n====== dec-tree (apache-spark) [default], iteration 12 completed (1455.447 ms) ======\n====== dec-tree (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 153.178 ms, heap usage 513.991 MB -> 160.372 MB.\n====== dec-tree (apache-spark) [default], iteration 13 completed (1444.480 ms) ======\n====== dec-tree (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 140.368 ms, heap usage 445.814 MB -> 160.435 MB.\n====== dec-tree (apache-spark) [default], iteration 14 completed (1470.615 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 0 started ======\nGC before operation: completed in 151.372 ms, heap usage 172.187 MB -> 143.483 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 534\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 53\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 9\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 7\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 10\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 8\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 16\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 4\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 11\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 22\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 4\tmaxttc = 534\tfailed = 0\ttotal = 4\nSHORT_TRAVERSAL:  successful = 6\tmaxttc = 16\tfailed = 0\ttotal = 6\nSHORT_TRAVERSAL_RO:  successful = 10\tmaxttc = 9\tfailed = 0\ttotal = 10\nOPERATION:  successful = 8\tmaxttc = 22\tfailed = 0\ttotal = 8\nOPERATION_RO:  successful = 12\tmaxttc = 11\tfailed = 0\ttotal = 12\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 59.88 op/s (59.88 op/s including failed)\nElapsed time: 0.67 s\n====== scala-stm-bench7 (scala) [default], iteration 0 completed (2511.480 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 1 started ======\nGC before operation: completed in 135.828 ms, heap usage 523.490 MB -> 142.053 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 470\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 13\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 8\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 14\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 9\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 8\tmaxttc = 534\tfailed = 0\ttotal = 8\nSHORT_TRAVERSAL:  successful = 12\tmaxttc = 16\tfailed = 0\ttotal = 12\nSHORT_TRAVERSAL_RO:  successful = 20\tmaxttc = 9\tfailed = 0\ttotal = 20\nOPERATION:  successful = 16\tmaxttc = 22\tfailed = 0\ttotal = 16\nOPERATION_RO:  successful = 24\tmaxttc = 14\tfailed = 0\ttotal = 24\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 155.64 op/s (155.64 op/s including failed)\nElapsed time: 0.51 s\n====== scala-stm-bench7 (scala) [default], iteration 1 completed (1783.062 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 2 started ======\nGC before operation: completed in 240.384 ms, heap usage 489.877 MB -> 142.054 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 517\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 11\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 8\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 12\tmaxttc = 534\tfailed = 0\ttotal = 12\nSHORT_TRAVERSAL:  successful = 18\tmaxttc = 16\tfailed = 0\ttotal = 18\nSHORT_TRAVERSAL_RO:  successful = 30\tmaxttc = 9\tfailed = 0\ttotal = 30\nOPERATION:  successful = 24\tmaxttc = 22\tfailed = 0\ttotal = 24\nOPERATION_RO:  successful = 36\tmaxttc = 14\tfailed = 0\ttotal = 36\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 220.59 op/s (220.59 op/s including failed)\nElapsed time: 0.54 s\n====== scala-stm-bench7 (scala) [default], iteration 2 completed (1408.246 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 3 started ======\nGC before operation: completed in 136.697 ms, heap usage 506.905 MB -> 142.050 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 496\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 7\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 4\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 16\tmaxttc = 534\tfailed = 0\ttotal = 16\nSHORT_TRAVERSAL:  successful = 24\tmaxttc = 16\tfailed = 0\ttotal = 24\nSHORT_TRAVERSAL_RO:  successful = 40\tmaxttc = 9\tfailed = 0\ttotal = 40\nOPERATION:  successful = 32\tmaxttc = 22\tfailed = 0\ttotal = 32\nOPERATION_RO:  successful = 48\tmaxttc = 14\tfailed = 0\ttotal = 48\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 310.08 op/s (310.08 op/s including failed)\nElapsed time: 0.52 s\n====== scala-stm-bench7 (scala) [default], iteration 3 completed (1342.530 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 4 started ======\nGC before operation: completed in 147.926 ms, heap usage 393.121 MB -> 142.060 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 384\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 7\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 4\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 20\tmaxttc = 534\tfailed = 0\ttotal = 20\nSHORT_TRAVERSAL:  successful = 30\tmaxttc = 16\tfailed = 0\ttotal = 30\nSHORT_TRAVERSAL_RO:  successful = 50\tmaxttc = 9\tfailed = 0\ttotal = 50\nOPERATION:  successful = 40\tmaxttc = 22\tfailed = 0\ttotal = 40\nOPERATION_RO:  successful = 60\tmaxttc = 14\tfailed = 0\ttotal = 60\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 506.33 op/s (506.33 op/s including failed)\nElapsed time: 0.40 s\n====== scala-stm-bench7 (scala) [default], iteration 4 completed (1272.510 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 5 started ======\nGC before operation: completed in 185.238 ms, heap usage 380.599 MB -> 142.044 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 518\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 11\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 6\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 24\tmaxttc = 534\tfailed = 0\ttotal = 24\nSHORT_TRAVERSAL:  successful = 36\tmaxttc = 16\tfailed = 0\ttotal = 36\nSHORT_TRAVERSAL_RO:  successful = 60\tmaxttc = 9\tfailed = 0\ttotal = 60\nOPERATION:  successful = 48\tmaxttc = 22\tfailed = 0\ttotal = 48\nOPERATION_RO:  successful = 72\tmaxttc = 14\tfailed = 0\ttotal = 72\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 441.99 op/s (441.99 op/s including failed)\nElapsed time: 0.54 s\n====== scala-stm-bench7 (scala) [default], iteration 5 completed (1480.501 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 6 started ======\nGC before operation: completed in 153.068 ms, heap usage 507.102 MB -> 142.056 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 463\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 11\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 8\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 8\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 28\tmaxttc = 534\tfailed = 0\ttotal = 28\nSHORT_TRAVERSAL:  successful = 42\tmaxttc = 16\tfailed = 0\ttotal = 42\nSHORT_TRAVERSAL_RO:  successful = 70\tmaxttc = 9\tfailed = 0\ttotal = 70\nOPERATION:  successful = 56\tmaxttc = 22\tfailed = 0\ttotal = 56\nOPERATION_RO:  successful = 84\tmaxttc = 14\tfailed = 0\ttotal = 84\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 577.32 op/s (577.32 op/s including failed)\nElapsed time: 0.49 s\n====== scala-stm-bench7 (scala) [default], iteration 6 completed (1372.866 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 7 started ======\nGC before operation: completed in 147.549 ms, heap usage 507.608 MB -> 142.061 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 483\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 9\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 32\tmaxttc = 534\tfailed = 0\ttotal = 32\nSHORT_TRAVERSAL:  successful = 48\tmaxttc = 16\tfailed = 0\ttotal = 48\nSHORT_TRAVERSAL_RO:  successful = 80\tmaxttc = 9\tfailed = 0\ttotal = 80\nOPERATION:  successful = 64\tmaxttc = 22\tfailed = 0\ttotal = 64\nOPERATION_RO:  successful = 96\tmaxttc = 14\tfailed = 0\ttotal = 96\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 642.57 op/s (642.57 op/s including failed)\nElapsed time: 0.50 s\n====== scala-stm-bench7 (scala) [default], iteration 7 completed (1368.893 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 8 started ======\nGC before operation: completed in 156.075 ms, heap usage 505.601 MB -> 142.044 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 492\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 10\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 4\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 36\tmaxttc = 534\tfailed = 0\ttotal = 36\nSHORT_TRAVERSAL:  successful = 54\tmaxttc = 16\tfailed = 0\ttotal = 54\nSHORT_TRAVERSAL_RO:  successful = 90\tmaxttc = 9\tfailed = 0\ttotal = 90\nOPERATION:  successful = 72\tmaxttc = 22\tfailed = 0\ttotal = 72\nOPERATION_RO:  successful = 108\tmaxttc = 14\tfailed = 0\ttotal = 108\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 705.88 op/s (705.88 op/s including failed)\nElapsed time: 0.51 s\n====== scala-stm-bench7 (scala) [default], iteration 8 completed (1469.754 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 9 started ======\nGC before operation: completed in 137.134 ms, heap usage 507.110 MB -> 142.056 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 474\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 10\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 4\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 40\tmaxttc = 534\tfailed = 0\ttotal = 40\nSHORT_TRAVERSAL:  successful = 60\tmaxttc = 16\tfailed = 0\ttotal = 60\nSHORT_TRAVERSAL_RO:  successful = 100\tmaxttc = 9\tfailed = 0\ttotal = 100\nOPERATION:  successful = 80\tmaxttc = 22\tfailed = 0\ttotal = 80\nOPERATION_RO:  successful = 120\tmaxttc = 14\tfailed = 0\ttotal = 120\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 818.00 op/s (818.00 op/s including failed)\nElapsed time: 0.49 s\n====== scala-stm-bench7 (scala) [default], iteration 9 completed (1497.723 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 10 started ======\nGC before operation: completed in 389.866 ms, heap usage 507.497 MB -> 295.408 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 340\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 11\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 44\tmaxttc = 534\tfailed = 0\ttotal = 44\nSHORT_TRAVERSAL:  successful = 66\tmaxttc = 16\tfailed = 0\ttotal = 66\nSHORT_TRAVERSAL_RO:  successful = 110\tmaxttc = 9\tfailed = 0\ttotal = 110\nOPERATION:  successful = 88\tmaxttc = 22\tfailed = 0\ttotal = 88\nOPERATION_RO:  successful = 132\tmaxttc = 14\tfailed = 0\ttotal = 132\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1229.05 op/s (1229.05 op/s including failed)\nElapsed time: 0.36 s\n====== scala-stm-bench7 (scala) [default], iteration 10 completed (1120.384 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 11 started ======\nGC before operation: completed in 140.313 ms, heap usage 400.744 MB -> 142.052 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 600\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 12\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 48\tmaxttc = 600\tfailed = 0\ttotal = 48\nSHORT_TRAVERSAL:  successful = 72\tmaxttc = 16\tfailed = 0\ttotal = 72\nSHORT_TRAVERSAL_RO:  successful = 120\tmaxttc = 9\tfailed = 0\ttotal = 120\nOPERATION:  successful = 96\tmaxttc = 22\tfailed = 0\ttotal = 96\nOPERATION_RO:  successful = 144\tmaxttc = 14\tfailed = 0\ttotal = 144\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 770.47 op/s (770.47 op/s including failed)\nElapsed time: 0.62 s\n====== scala-stm-bench7 (scala) [default], iteration 11 completed (1498.094 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 12 started ======\nGC before operation: completed in 158.043 ms, heap usage 507.099 MB -> 142.057 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 429\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 6\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 52\tmaxttc = 600\tfailed = 0\ttotal = 52\nSHORT_TRAVERSAL:  successful = 78\tmaxttc = 16\tfailed = 0\ttotal = 78\nSHORT_TRAVERSAL_RO:  successful = 130\tmaxttc = 9\tfailed = 0\ttotal = 130\nOPERATION:  successful = 104\tmaxttc = 22\tfailed = 0\ttotal = 104\nOPERATION_RO:  successful = 156\tmaxttc = 14\tfailed = 0\ttotal = 156\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1184.51 op/s (1184.51 op/s including failed)\nElapsed time: 0.44 s\n====== scala-stm-bench7 (scala) [default], iteration 12 completed (1301.468 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 13 started ======\nGC before operation: completed in 157.214 ms, heap usage 430.109 MB -> 142.044 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 441\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 8\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 7\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 56\tmaxttc = 600\tfailed = 0\ttotal = 56\nSHORT_TRAVERSAL:  successful = 84\tmaxttc = 16\tfailed = 0\ttotal = 84\nSHORT_TRAVERSAL_RO:  successful = 140\tmaxttc = 9\tfailed = 0\ttotal = 140\nOPERATION:  successful = 112\tmaxttc = 22\tfailed = 0\ttotal = 112\nOPERATION_RO:  successful = 168\tmaxttc = 14\tfailed = 0\ttotal = 168\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1244.44 op/s (1244.44 op/s including failed)\nElapsed time: 0.45 s\n====== scala-stm-bench7 (scala) [default], iteration 13 completed (1351.470 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 14 started ======\nGC before operation: completed in 141.475 ms, heap usage 507.530 MB -> 142.049 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 482\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 10\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 60\tmaxttc = 600\tfailed = 0\ttotal = 60\nSHORT_TRAVERSAL:  successful = 90\tmaxttc = 16\tfailed = 0\ttotal = 90\nSHORT_TRAVERSAL_RO:  successful = 150\tmaxttc = 9\tfailed = 0\ttotal = 150\nOPERATION:  successful = 120\tmaxttc = 22\tfailed = 0\ttotal = 120\nOPERATION_RO:  successful = 180\tmaxttc = 14\tfailed = 0\ttotal = 180\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1204.82 op/s (1204.82 op/s including failed)\nElapsed time: 0.50 s\n====== scala-stm-bench7 (scala) [default], iteration 14 completed (1439.994 ms) ======\nNOTE: 'naive-bayes' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== naive-bayes (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 157.559 ms, heap usage 173.043 MB -> 152.727 MB.\n====== naive-bayes (apache-spark) [default], iteration 0 completed (40505.768 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 203.021 ms, heap usage 442.679 MB -> 428.812 MB.\n====== naive-bayes (apache-spark) [default], iteration 1 completed (23313.942 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 184.892 ms, heap usage 455.964 MB -> 429.040 MB.\n====== naive-bayes (apache-spark) [default], iteration 2 completed (22137.040 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 207.126 ms, heap usage 447.901 MB -> 429.105 MB.\n====== naive-bayes (apache-spark) [default], iteration 3 completed (22166.338 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 178.331 ms, heap usage 447.914 MB -> 429.201 MB.\n====== naive-bayes (apache-spark) [default], iteration 4 completed (22021.017 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 188.053 ms, heap usage 531.524 MB -> 429.272 MB.\n====== naive-bayes (apache-spark) [default], iteration 5 completed (21499.434 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 198.890 ms, heap usage 499.768 MB -> 429.344 MB.\n====== naive-bayes (apache-spark) [default], iteration 6 completed (21187.520 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 175.395 ms, heap usage 531.319 MB -> 429.410 MB.\n====== naive-bayes (apache-spark) [default], iteration 7 completed (22419.763 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 282.874 ms, heap usage 492.795 MB -> 429.532 MB.\n====== naive-bayes (apache-spark) [default], iteration 8 completed (21701.999 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 167.999 ms, heap usage 455.434 MB -> 427.583 MB.\n====== naive-bayes (apache-spark) [default], iteration 9 completed (20956.195 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 211.706 ms, heap usage 813.593 MB -> 421.269 MB.\n====== naive-bayes (apache-spark) [default], iteration 10 completed (21463.384 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 165.327 ms, heap usage 542.556 MB -> 422.040 MB.\n====== naive-bayes (apache-spark) [default], iteration 11 completed (20713.293 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 156.444 ms, heap usage 742.313 MB -> 422.032 MB.\n====== naive-bayes (apache-spark) [default], iteration 12 completed (20682.267 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 143.812 ms, heap usage 741.763 MB -> 422.119 MB.\n====== naive-bayes (apache-spark) [default], iteration 13 completed (21341.442 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 154.760 ms, heap usage 448.917 MB -> 422.205 MB.\n====== naive-bayes (apache-spark) [default], iteration 14 completed (21277.786 ms) ======\n"
    },
    "als": {
        "times": [
            17245.293,
            8374.551,
            7613.825,
            7498.159,
            7222.046,
            6777.255,
            6716.076,
            6706.499,
            6692.376,
            6829.927,
            6464.726,
            6570.33,
            6550.026,
            6596.781,
            6349.995
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 111.440 ms, heap usage 193.716 MB -> 76.034 MB.\n====== scrabble (functional) [default], iteration 0 completed (1746.818 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 75.425 ms, heap usage 124.295 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 1 completed (822.799 ms) ======\n====== scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 103.806 ms, heap usage 309.363 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 2 completed (876.688 ms) ======\n====== scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 108.057 ms, heap usage 131.528 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 3 completed (772.422 ms) ======\n====== scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 90.330 ms, heap usage 339.197 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 4 completed (664.922 ms) ======\n====== scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 78.633 ms, heap usage 242.581 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 5 completed (767.926 ms) ======\n====== scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 80.529 ms, heap usage 243.067 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 6 completed (771.953 ms) ======\n====== scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 87.821 ms, heap usage 169.966 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 7 completed (713.175 ms) ======\n====== scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 85.627 ms, heap usage 126.363 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 8 completed (705.321 ms) ======\n====== scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 77.713 ms, heap usage 279.273 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 9 completed (595.178 ms) ======\n====== scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 90.853 ms, heap usage 197.665 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 10 completed (653.981 ms) ======\n====== scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 80.787 ms, heap usage 125.936 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 11 completed (671.613 ms) ======\n====== scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 81.092 ms, heap usage 326.788 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 12 completed (614.500 ms) ======\n====== scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 74.421 ms, heap usage 199.244 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 13 completed (687.061 ms) ======\n====== scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 77.486 ms, heap usage 357.036 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 14 completed (698.120 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 39.864 ms, heap usage 626.576 MB -> 29.596 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (20832.995 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 151.296 ms, heap usage 587.802 MB -> 148.935 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (10726.986 ms) ======\n====== page-rank (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 139.528 ms, heap usage 662.229 MB -> 149.044 MB.\n====== page-rank (apache-spark) [default], iteration 2 completed (10497.012 ms) ======\n====== page-rank (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 145.301 ms, heap usage 620.847 MB -> 149.161 MB.\n====== page-rank (apache-spark) [default], iteration 3 completed (10683.078 ms) ======\n====== page-rank (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 146.272 ms, heap usage 595.956 MB -> 149.275 MB.\n====== page-rank (apache-spark) [default], iteration 4 completed (11158.857 ms) ======\n====== page-rank (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 150.477 ms, heap usage 624.956 MB -> 149.389 MB.\n====== page-rank (apache-spark) [default], iteration 5 completed (10816.748 ms) ======\n====== page-rank (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 152.563 ms, heap usage 475.956 MB -> 149.705 MB.\n====== page-rank (apache-spark) [default], iteration 6 completed (10797.777 ms) ======\n====== page-rank (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 153.431 ms, heap usage 575.956 MB -> 149.630 MB.\n====== page-rank (apache-spark) [default], iteration 7 completed (10320.855 ms) ======\n====== page-rank (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 154.161 ms, heap usage 494.956 MB -> 149.734 MB.\n====== page-rank (apache-spark) [default], iteration 8 completed (10797.875 ms) ======\n====== page-rank (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 159.810 ms, heap usage 685.884 MB -> 149.850 MB.\n====== page-rank (apache-spark) [default], iteration 9 completed (10426.551 ms) ======\n====== page-rank (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 138.119 ms, heap usage 483.136 MB -> 149.929 MB.\n====== page-rank (apache-spark) [default], iteration 10 completed (11319.287 ms) ======\n====== page-rank (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 160.571 ms, heap usage 417.218 MB -> 150.048 MB.\n====== page-rank (apache-spark) [default], iteration 11 completed (10773.541 ms) ======\n====== page-rank (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 153.774 ms, heap usage 591.956 MB -> 150.197 MB.\n====== page-rank (apache-spark) [default], iteration 12 completed (10583.141 ms) ======\n====== page-rank (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 151.297 ms, heap usage 385.309 MB -> 150.212 MB.\n====== page-rank (apache-spark) [default], iteration 13 completed (11225.389 ms) ======\n====== page-rank (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 138.750 ms, heap usage 506.956 MB -> 150.287 MB.\n====== page-rank (apache-spark) [default], iteration 14 completed (11253.752 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 60.640 ms, heap usage 661.207 MB -> 32.216 MB.\n====== future-genetic (functional) [default], iteration 0 completed (14742.129 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 51.821 ms, heap usage 114.841 MB -> 33.158 MB.\n====== future-genetic (functional) [default], iteration 1 completed (11014.493 ms) ======\n====== future-genetic (functional) [default], iteration 2 started ======\nGC before operation: completed in 34.821 ms, heap usage 68.320 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 2 completed (10628.352 ms) ======\n====== future-genetic (functional) [default], iteration 3 started ======\nGC before operation: completed in 38.504 ms, heap usage 57.876 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 3 completed (10722.143 ms) ======\n====== future-genetic (functional) [default], iteration 4 started ======\nGC before operation: completed in 39.692 ms, heap usage 145.206 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 4 completed (10840.012 ms) ======\n====== future-genetic (functional) [default], iteration 5 started ======\nGC before operation: completed in 38.411 ms, heap usage 81.011 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 5 completed (10598.435 ms) ======\n====== future-genetic (functional) [default], iteration 6 started ======\nGC before operation: completed in 40.019 ms, heap usage 144.534 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 6 completed (10786.150 ms) ======\n====== future-genetic (functional) [default], iteration 7 started ======\nGC before operation: completed in 48.015 ms, heap usage 171.419 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 7 completed (10652.683 ms) ======\n====== future-genetic (functional) [default], iteration 8 started ======\nGC before operation: completed in 35.498 ms, heap usage 37.426 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 8 completed (10488.698 ms) ======\n====== future-genetic (functional) [default], iteration 9 started ======\nGC before operation: completed in 42.383 ms, heap usage 130.505 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 9 completed (10682.271 ms) ======\n====== future-genetic (functional) [default], iteration 10 started ======\nGC before operation: completed in 48.742 ms, heap usage 134.970 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 10 completed (10549.840 ms) ======\n====== future-genetic (functional) [default], iteration 11 started ======\nGC before operation: completed in 41.808 ms, heap usage 156.009 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 11 completed (10851.547 ms) ======\n====== future-genetic (functional) [default], iteration 12 started ======\nGC before operation: completed in 40.139 ms, heap usage 163.381 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 12 completed (10940.461 ms) ======\n====== future-genetic (functional) [default], iteration 13 started ======\nGC before operation: completed in 35.048 ms, heap usage 80.372 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 13 completed (10876.099 ms) ======\n====== future-genetic (functional) [default], iteration 14 started ======\nGC before operation: completed in 43.468 ms, heap usage 62.997 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 14 completed (10763.606 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 70.620 ms, heap usage 85.721 MB -> 33.974 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 11\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (23373.227 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 371.313 ms, heap usage 780.679 MB -> 161.200 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (17055.803 ms) ======\n====== akka-uct (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 323.521 ms, heap usage 714.804 MB -> 140.346 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 2 completed (16644.579 ms) ======\n====== akka-uct (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 312.697 ms, heap usage 606.138 MB -> 139.703 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 3 completed (16230.901 ms) ======\n====== akka-uct (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 272.343 ms, heap usage 694.413 MB -> 139.888 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 4 completed (16222.783 ms) ======\n====== akka-uct (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 288.309 ms, heap usage 549.430 MB -> 124.976 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 5 completed (16061.576 ms) ======\n====== akka-uct (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 254.080 ms, heap usage 570.484 MB -> 130.699 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 6 completed (15769.690 ms) ======\n====== akka-uct (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 387.396 ms, heap usage 619.770 MB -> 158.750 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 7 completed (15901.168 ms) ======\n====== akka-uct (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 304.489 ms, heap usage 580.964 MB -> 149.879 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 8 completed (16178.151 ms) ======\n====== akka-uct (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 253.043 ms, heap usage 553.450 MB -> 150.939 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 9 completed (15874.839 ms) ======\n====== akka-uct (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 301.130 ms, heap usage 528.928 MB -> 139.937 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 10 completed (15982.587 ms) ======\n====== akka-uct (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 267.305 ms, heap usage 626.465 MB -> 131.010 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 11 completed (16353.495 ms) ======\n====== akka-uct (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 294.293 ms, heap usage 500.855 MB -> 153.125 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 12 completed (15969.903 ms) ======\n====== akka-uct (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 292.350 ms, heap usage 647.259 MB -> 125.388 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 13 completed (15322.843 ms) ======\n====== akka-uct (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 252.391 ms, heap usage 562.070 MB -> 128.190 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 14 completed (16083.172 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 2 (out of 2) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 134.630 ms, heap usage 463.678 MB -> 85.476 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (22878.805 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 103.188 ms, heap usage 272.080 MB -> 100.040 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (14811.341 ms) ======\n====== movie-lens (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 144.144 ms, heap usage 208.849 MB -> 97.194 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 2 completed (13632.892 ms) ======\n====== movie-lens (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 122.890 ms, heap usage 173.120 MB -> 97.842 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 3 completed (12814.257 ms) ======\n====== movie-lens (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 113.279 ms, heap usage 237.308 MB -> 98.141 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 4 completed (12978.413 ms) ======\n====== movie-lens (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 119.099 ms, heap usage 219.670 MB -> 98.103 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 5 completed (14306.460 ms) ======\n====== movie-lens (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 123.459 ms, heap usage 175.077 MB -> 98.404 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 6 completed (12568.443 ms) ======\n====== movie-lens (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 115.564 ms, heap usage 119.760 MB -> 100.031 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 7 completed (11505.398 ms) ======\n====== movie-lens (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 112.918 ms, heap usage 255.198 MB -> 99.024 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 8 completed (11706.594 ms) ======\n====== movie-lens (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 170.418 ms, heap usage 189.372 MB -> 98.513 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 9 completed (11662.958 ms) ======\n====== movie-lens (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 218.616 ms, heap usage 163.601 MB -> 98.629 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 10 completed (11293.424 ms) ======\n====== movie-lens (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 126.280 ms, heap usage 236.690 MB -> 98.603 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 11 completed (11873.509 ms) ======\n====== movie-lens (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 121.729 ms, heap usage 154.433 MB -> 98.657 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 12 completed (12263.435 ms) ======\n====== movie-lens (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 113.550 ms, heap usage 470.143 MB -> 102.266 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 13 completed (12351.951 ms) ======\n====== movie-lens (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 107.375 ms, heap usage 274.093 MB -> 98.738 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 14 completed (12112.256 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 83.428 ms, heap usage 476.231 MB -> 58.268 MB.\n====== scala-doku (scala) [default], iteration 0 completed (2753.475 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 83.813 ms, heap usage 150.542 MB -> 58.243 MB.\n====== scala-doku (scala) [default], iteration 1 completed (2340.567 ms) ======\n====== scala-doku (scala) [default], iteration 2 started ======\nGC before operation: completed in 88.607 ms, heap usage 121.743 MB -> 58.244 MB.\n====== scala-doku (scala) [default], iteration 2 completed (2269.313 ms) ======\n====== scala-doku (scala) [default], iteration 3 started ======\nGC before operation: completed in 79.133 ms, heap usage 118.244 MB -> 58.245 MB.\n====== scala-doku (scala) [default], iteration 3 completed (1898.181 ms) ======\n====== scala-doku (scala) [default], iteration 4 started ======\nGC before operation: completed in 86.643 ms, heap usage 120.745 MB -> 58.245 MB.\n====== scala-doku (scala) [default], iteration 4 completed (1792.430 ms) ======\n====== scala-doku (scala) [default], iteration 5 started ======\nGC before operation: completed in 77.315 ms, heap usage 119.245 MB -> 58.245 MB.\n====== scala-doku (scala) [default], iteration 5 completed (1786.944 ms) ======\n====== scala-doku (scala) [default], iteration 6 started ======\nGC before operation: completed in 89.168 ms, heap usage 120.745 MB -> 58.245 MB.\n====== scala-doku (scala) [default], iteration 6 completed (1866.830 ms) ======\n====== scala-doku (scala) [default], iteration 7 started ======\nGC before operation: completed in 76.164 ms, heap usage 120.245 MB -> 58.246 MB.\n====== scala-doku (scala) [default], iteration 7 completed (1799.903 ms) ======\n====== scala-doku (scala) [default], iteration 8 started ======\nGC before operation: completed in 79.207 ms, heap usage 119.746 MB -> 58.246 MB.\n====== scala-doku (scala) [default], iteration 8 completed (1782.750 ms) ======\n====== scala-doku (scala) [default], iteration 9 started ======\nGC before operation: completed in 86.288 ms, heap usage 120.246 MB -> 58.247 MB.\n====== scala-doku (scala) [default], iteration 9 completed (1778.745 ms) ======\n====== scala-doku (scala) [default], iteration 10 started ======\nGC before operation: completed in 77.760 ms, heap usage 119.747 MB -> 58.247 MB.\n====== scala-doku (scala) [default], iteration 10 completed (1794.655 ms) ======\n====== scala-doku (scala) [default], iteration 11 started ======\nGC before operation: completed in 92.459 ms, heap usage 119.747 MB -> 58.247 MB.\n====== scala-doku (scala) [default], iteration 11 completed (1818.580 ms) ======\n====== scala-doku (scala) [default], iteration 12 started ======\nGC before operation: completed in 77.984 ms, heap usage 120.247 MB -> 58.247 MB.\n====== scala-doku (scala) [default], iteration 12 completed (1848.215 ms) ======\n====== scala-doku (scala) [default], iteration 13 started ======\nGC before operation: completed in 93.441 ms, heap usage 119.747 MB -> 58.247 MB.\n====== scala-doku (scala) [default], iteration 13 completed (1809.411 ms) ======\n====== scala-doku (scala) [default], iteration 14 started ======\nGC before operation: completed in 82.582 ms, heap usage 119.747 MB -> 58.247 MB.\n====== scala-doku (scala) [default], iteration 14 completed (1803.934 ms) ======\nNOTE: 'chi-square' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== chi-square (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 99.379 ms, heap usage 319.426 MB -> 63.405 MB.\n====== chi-square (apache-spark) [default], iteration 0 completed (5198.635 ms) ======\n====== chi-square (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 217.985 ms, heap usage 339.427 MB -> 209.273 MB.\n====== chi-square (apache-spark) [default], iteration 1 completed (1119.485 ms) ======\n====== chi-square (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 175.933 ms, heap usage 299.968 MB -> 209.346 MB.\n====== chi-square (apache-spark) [default], iteration 2 completed (1038.669 ms) ======\n====== chi-square (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 162.484 ms, heap usage 434.584 MB -> 209.395 MB.\n====== chi-square (apache-spark) [default], iteration 3 completed (988.864 ms) ======\n====== chi-square (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 185.658 ms, heap usage 472.608 MB -> 209.448 MB.\n====== chi-square (apache-spark) [default], iteration 4 completed (1021.110 ms) ======\n====== chi-square (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 161.400 ms, heap usage 424.379 MB -> 209.494 MB.\n====== chi-square (apache-spark) [default], iteration 5 completed (1016.339 ms) ======\n====== chi-square (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 165.385 ms, heap usage 377.344 MB -> 209.638 MB.\n====== chi-square (apache-spark) [default], iteration 6 completed (1044.792 ms) ======\n====== chi-square (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 151.433 ms, heap usage 385.817 MB -> 209.712 MB.\n====== chi-square (apache-spark) [default], iteration 7 completed (892.107 ms) ======\n====== chi-square (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 148.497 ms, heap usage 375.358 MB -> 209.695 MB.\n====== chi-square (apache-spark) [default], iteration 8 completed (912.148 ms) ======\n====== chi-square (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 186.559 ms, heap usage 381.260 MB -> 209.735 MB.\n====== chi-square (apache-spark) [default], iteration 9 completed (916.193 ms) ======\n====== chi-square (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 172.071 ms, heap usage 375.984 MB -> 209.776 MB.\n====== chi-square (apache-spark) [default], iteration 10 completed (706.035 ms) ======\n====== chi-square (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 142.619 ms, heap usage 232.457 MB -> 209.816 MB.\n====== chi-square (apache-spark) [default], iteration 11 completed (764.527 ms) ======\n====== chi-square (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 164.121 ms, heap usage 670.340 MB -> 209.852 MB.\n====== chi-square (apache-spark) [default], iteration 12 completed (858.768 ms) ======\n====== chi-square (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 159.826 ms, heap usage 316.763 MB -> 209.890 MB.\n====== chi-square (apache-spark) [default], iteration 13 completed (862.769 ms) ======\n====== chi-square (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 166.687 ms, heap usage 379.775 MB -> 209.921 MB.\n====== chi-square (apache-spark) [default], iteration 14 completed (703.576 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 196.120 ms, heap usage 470.464 MB -> 147.340 MB.\n====== fj-kmeans (concurrency) [default], iteration 0 completed (8529.473 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 133.696 ms, heap usage 331.615 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 1 completed (7479.812 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 134.063 ms, heap usage 318.922 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 2 completed (7610.407 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 133.778 ms, heap usage 222.341 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 3 completed (7571.793 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 139.456 ms, heap usage 217.309 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 4 completed (7516.518 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 133.370 ms, heap usage 382.616 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 5 completed (8339.655 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 140.237 ms, heap usage 354.831 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 6 completed (7633.795 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 137.960 ms, heap usage 448.031 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 7 completed (7335.928 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 127.427 ms, heap usage 221.957 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 8 completed (7359.912 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 137.302 ms, heap usage 368.915 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 9 completed (8379.108 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 139.433 ms, heap usage 184.312 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 10 completed (8029.337 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 138.797 ms, heap usage 171.657 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 11 completed (7673.166 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 132.845 ms, heap usage 170.035 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 12 completed (7460.127 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 137.480 ms, heap usage 320.158 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 13 completed (7646.174 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 127.475 ms, heap usage 186.440 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 14 completed (7391.153 ms) ======\n====== rx-scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 138.851 ms, heap usage 249.054 MB -> 97.875 MB.\n====== rx-scrabble (functional) [default], iteration 0 completed (539.438 ms) ======\n====== rx-scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 97.806 ms, heap usage 250.872 MB -> 98.124 MB.\n====== rx-scrabble (functional) [default], iteration 1 completed (188.955 ms) ======\n====== rx-scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 121.701 ms, heap usage 240.121 MB -> 98.118 MB.\n====== rx-scrabble (functional) [default], iteration 2 completed (158.740 ms) ======\n====== rx-scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 103.202 ms, heap usage 238.618 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 3 completed (147.979 ms) ======\n====== rx-scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 107.730 ms, heap usage 239.113 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 4 completed (162.112 ms) ======\n====== rx-scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 117.578 ms, heap usage 239.463 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 5 completed (128.936 ms) ======\n====== rx-scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 111.309 ms, heap usage 239.390 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 6 completed (116.055 ms) ======\n====== rx-scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 109.603 ms, heap usage 239.557 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 7 completed (109.336 ms) ======\n====== rx-scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 108.494 ms, heap usage 239.260 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 8 completed (124.372 ms) ======\n====== rx-scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 134.578 ms, heap usage 239.449 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 9 completed (133.649 ms) ======\n====== rx-scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 98.374 ms, heap usage 240.453 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 10 completed (197.918 ms) ======\n====== rx-scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 111.349 ms, heap usage 240.463 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 11 completed (117.228 ms) ======\n====== rx-scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 104.555 ms, heap usage 240.413 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 12 completed (112.849 ms) ======\n====== rx-scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 98.436 ms, heap usage 240.514 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 13 completed (105.866 ms) ======\n====== rx-scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 92.783 ms, heap usage 240.977 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 14 completed (105.587 ms) ======\n====== db-shootout (database) [default], iteration 0 started ======\nGC before operation: completed in 104.333 ms, heap usage 179.823 MB -> 100.606 MB.\n====== db-shootout (database) [default], iteration 0 completed (8779.951 ms) ======\n====== db-shootout (database) [default], iteration 1 started ======\nGC before operation: completed in 107.497 ms, heap usage 242.103 MB -> 110.924 MB.\n====== db-shootout (database) [default], iteration 1 completed (9343.782 ms) ======\n====== db-shootout (database) [default], iteration 2 started ======\nGC before operation: completed in 111.405 ms, heap usage 283.357 MB -> 112.478 MB.\n====== db-shootout (database) [default], iteration 2 completed (7499.305 ms) ======\n====== db-shootout (database) [default], iteration 3 started ======\nGC before operation: completed in 94.995 ms, heap usage 543.589 MB -> 114.314 MB.\n====== db-shootout (database) [default], iteration 3 completed (8724.019 ms) ======\n====== db-shootout (database) [default], iteration 4 started ======\nGC before operation: completed in 101.845 ms, heap usage 213.978 MB -> 159.872 MB.\n====== db-shootout (database) [default], iteration 4 completed (7010.765 ms) ======\n====== db-shootout (database) [default], iteration 5 started ======\nGC before operation: completed in 164.949 ms, heap usage 636.845 MB -> 167.668 MB.\n====== db-shootout (database) [default], iteration 5 completed (7721.156 ms) ======\n====== db-shootout (database) [default], iteration 6 started ======\nGC before operation: completed in 130.093 ms, heap usage 384.324 MB -> 167.486 MB.\n====== db-shootout (database) [default], iteration 6 completed (7647.257 ms) ======\n====== db-shootout (database) [default], iteration 7 started ======\nGC before operation: completed in 109.623 ms, heap usage 282.011 MB -> 175.857 MB.\n====== db-shootout (database) [default], iteration 7 completed (7329.669 ms) ======\n====== db-shootout (database) [default], iteration 8 started ======\nGC before operation: completed in 116.420 ms, heap usage 284.042 MB -> 175.655 MB.\n====== db-shootout (database) [default], iteration 8 completed (7329.711 ms) ======\n====== db-shootout (database) [default], iteration 9 started ======\nGC before operation: completed in 171.716 ms, heap usage 342.792 MB -> 175.912 MB.\n====== db-shootout (database) [default], iteration 9 completed (6774.502 ms) ======\n====== db-shootout (database) [default], iteration 10 started ======\nGC before operation: completed in 173.829 ms, heap usage 293.932 MB -> 175.555 MB.\n====== db-shootout (database) [default], iteration 10 completed (6874.618 ms) ======\n====== db-shootout (database) [default], iteration 11 started ======\nGC before operation: completed in 148.492 ms, heap usage 400.220 MB -> 180.072 MB.\n====== db-shootout (database) [default], iteration 11 completed (7713.732 ms) ======\n====== db-shootout (database) [default], iteration 12 started ======\nGC before operation: completed in 117.617 ms, heap usage 194.930 MB -> 178.866 MB.\n====== db-shootout (database) [default], iteration 12 completed (7466.876 ms) ======\n====== db-shootout (database) [default], iteration 13 started ======\nGC before operation: completed in 129.592 ms, heap usage 290.546 MB -> 179.243 MB.\n====== db-shootout (database) [default], iteration 13 completed (6989.489 ms) ======\n====== db-shootout (database) [default], iteration 14 started ======\nGC before operation: completed in 136.413 ms, heap usage 256.392 MB -> 179.022 MB.\n====== db-shootout (database) [default], iteration 14 completed (6647.630 ms) ======\nCreating graph database...\nLoading resources...\nPopulating database...\nfinagle-http on :39975 spawning 2 client and default number of server workers.\n====== finagle-http (web) [default], iteration 0 started ======\nGC before operation: completed in 98.510 ms, heap usage 612.157 MB -> 111.470 MB.\n====== finagle-http (web) [default], iteration 0 completed (17579.182 ms) ======\n====== finagle-http (web) [default], iteration 1 started ======\nGC before operation: completed in 132.580 ms, heap usage 293.599 MB -> 114.255 MB.\n====== finagle-http (web) [default], iteration 1 completed (7093.193 ms) ======\n====== finagle-http (web) [default], iteration 2 started ======\nGC before operation: completed in 139.872 ms, heap usage 142.229 MB -> 114.940 MB.\n====== finagle-http (web) [default], iteration 2 completed (3467.412 ms) ======\n====== finagle-http (web) [default], iteration 3 started ======\nGC before operation: completed in 102.621 ms, heap usage 139.149 MB -> 115.008 MB.\n====== finagle-http (web) [default], iteration 3 completed (2891.463 ms) ======\n====== finagle-http (web) [default], iteration 4 started ======\nGC before operation: completed in 101.518 ms, heap usage 138.053 MB -> 115.745 MB.\n====== finagle-http (web) [default], iteration 4 completed (3105.065 ms) ======\n====== finagle-http (web) [default], iteration 5 started ======\nGC before operation: completed in 107.976 ms, heap usage 136.110 MB -> 115.075 MB.\n====== finagle-http (web) [default], iteration 5 completed (2695.150 ms) ======\n====== finagle-http (web) [default], iteration 6 started ======\nGC before operation: completed in 112.486 ms, heap usage 136.249 MB -> 115.049 MB.\n====== finagle-http (web) [default], iteration 6 completed (2704.392 ms) ======\n====== finagle-http (web) [default], iteration 7 started ======\nGC before operation: completed in 114.377 ms, heap usage 135.245 MB -> 115.020 MB.\n====== finagle-http (web) [default], iteration 7 completed (2948.935 ms) ======\n====== finagle-http (web) [default], iteration 8 started ======\nGC before operation: completed in 122.053 ms, heap usage 135.666 MB -> 115.051 MB.\n====== finagle-http (web) [default], iteration 8 completed (2778.196 ms) ======\n====== finagle-http (web) [default], iteration 9 started ======\nGC before operation: completed in 109.678 ms, heap usage 136.088 MB -> 115.031 MB.\n====== finagle-http (web) [default], iteration 9 completed (2747.983 ms) ======\n====== finagle-http (web) [default], iteration 10 started ======\nGC before operation: completed in 99.536 ms, heap usage 135.498 MB -> 115.057 MB.\n====== finagle-http (web) [default], iteration 10 completed (2777.183 ms) ======\n====== finagle-http (web) [default], iteration 11 started ======\nGC before operation: completed in 100.476 ms, heap usage 134.090 MB -> 115.060 MB.\n====== finagle-http (web) [default], iteration 11 completed (2950.363 ms) ======\n====== finagle-http (web) [default], iteration 12 started ======\nGC before operation: completed in 101.952 ms, heap usage 134.523 MB -> 115.062 MB.\n====== finagle-http (web) [default], iteration 12 completed (2759.978 ms) ======\n====== finagle-http (web) [default], iteration 13 started ======\nGC before operation: completed in 109.865 ms, heap usage 135.138 MB -> 115.064 MB.\n====== finagle-http (web) [default], iteration 13 completed (2831.653 ms) ======\n====== finagle-http (web) [default], iteration 14 started ======\nGC before operation: completed in 105.948 ms, heap usage 134.532 MB -> 115.044 MB.\n====== finagle-http (web) [default], iteration 14 completed (2711.280 ms) ======\n====== reactors (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 105.850 ms, heap usage 151.704 MB -> 116.190 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 0 completed (17020.896 ms) ======\n====== reactors (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 104.599 ms, heap usage 181.251 MB -> 113.711 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 1 completed (13892.575 ms) ======\n====== reactors (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 95.102 ms, heap usage 174.198 MB -> 113.758 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 2 completed (12554.742 ms) ======\n====== reactors (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 116.893 ms, heap usage 619.954 MB -> 113.748 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 3 completed (13425.368 ms) ======\n====== reactors (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 116.460 ms, heap usage 633.733 MB -> 113.696 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 4 completed (12579.614 ms) ======\n====== reactors (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 101.795 ms, heap usage 678.695 MB -> 113.699 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 5 completed (13161.693 ms) ======\n====== reactors (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 172.615 ms, heap usage 622.470 MB -> 113.699 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 6 completed (12878.519 ms) ======\n====== reactors (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 112.228 ms, heap usage 718.171 MB -> 113.700 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 7 completed (12975.597 ms) ======\n====== reactors (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 98.762 ms, heap usage 716.077 MB -> 113.700 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 8 completed (12770.728 ms) ======\n====== reactors (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 102.126 ms, heap usage 748.105 MB -> 113.710 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 9 completed (13076.609 ms) ======\n====== reactors (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 98.649 ms, heap usage 687.606 MB -> 113.700 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 10 completed (13003.432 ms) ======\n====== reactors (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 101.379 ms, heap usage 732.195 MB -> 113.700 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 11 completed (14004.051 ms) ======\n====== reactors (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 105.159 ms, heap usage 627.924 MB -> 113.700 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 12 completed (13270.736 ms) ======\n====== reactors (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 108.063 ms, heap usage 752.521 MB -> 113.700 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 13 completed (13719.150 ms) ======\n====== reactors (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 122.216 ms, heap usage 634.683 MB -> 113.714 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 14 completed (13878.366 ms) ======\nNOTE: 'dec-tree' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== dec-tree (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 164.697 ms, heap usage 737.360 MB -> 126.493 MB.\n====== dec-tree (apache-spark) [default], iteration 0 completed (10211.732 ms) ======\n====== dec-tree (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 163.548 ms, heap usage 286.590 MB -> 158.107 MB.\n====== dec-tree (apache-spark) [default], iteration 1 completed (2450.505 ms) ======\n====== dec-tree (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 136.565 ms, heap usage 345.940 MB -> 158.492 MB.\n====== dec-tree (apache-spark) [default], iteration 2 completed (2009.743 ms) ======\n====== dec-tree (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 138.685 ms, heap usage 279.501 MB -> 158.716 MB.\n====== dec-tree (apache-spark) [default], iteration 3 completed (1989.605 ms) ======\n====== dec-tree (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 146.026 ms, heap usage 489.120 MB -> 158.915 MB.\n====== dec-tree (apache-spark) [default], iteration 4 completed (1714.918 ms) ======\n====== dec-tree (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 127.943 ms, heap usage 488.970 MB -> 159.140 MB.\n====== dec-tree (apache-spark) [default], iteration 5 completed (1705.237 ms) ======\n====== dec-tree (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 130.962 ms, heap usage 190.728 MB -> 158.870 MB.\n====== dec-tree (apache-spark) [default], iteration 6 completed (1675.410 ms) ======\n====== dec-tree (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 128.752 ms, heap usage 464.234 MB -> 159.494 MB.\n====== dec-tree (apache-spark) [default], iteration 7 completed (1687.319 ms) ======\n====== dec-tree (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 131.642 ms, heap usage 193.742 MB -> 159.062 MB.\n====== dec-tree (apache-spark) [default], iteration 8 completed (1553.852 ms) ======\n====== dec-tree (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 146.296 ms, heap usage 480.448 MB -> 168.014 MB.\n====== dec-tree (apache-spark) [default], iteration 9 completed (1516.748 ms) ======\n====== dec-tree (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 144.013 ms, heap usage 452.343 MB -> 159.895 MB.\n====== dec-tree (apache-spark) [default], iteration 10 completed (1582.871 ms) ======\n====== dec-tree (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 134.653 ms, heap usage 443.551 MB -> 160.089 MB.\n====== dec-tree (apache-spark) [default], iteration 11 completed (1470.741 ms) ======\n====== dec-tree (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 195.778 ms, heap usage 440.791 MB -> 160.224 MB.\n====== dec-tree (apache-spark) [default], iteration 12 completed (1455.447 ms) ======\n====== dec-tree (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 153.178 ms, heap usage 513.991 MB -> 160.372 MB.\n====== dec-tree (apache-spark) [default], iteration 13 completed (1444.480 ms) ======\n====== dec-tree (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 140.368 ms, heap usage 445.814 MB -> 160.435 MB.\n====== dec-tree (apache-spark) [default], iteration 14 completed (1470.615 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 0 started ======\nGC before operation: completed in 151.372 ms, heap usage 172.187 MB -> 143.483 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 534\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 53\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 9\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 7\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 10\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 8\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 16\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 4\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 11\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 22\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 4\tmaxttc = 534\tfailed = 0\ttotal = 4\nSHORT_TRAVERSAL:  successful = 6\tmaxttc = 16\tfailed = 0\ttotal = 6\nSHORT_TRAVERSAL_RO:  successful = 10\tmaxttc = 9\tfailed = 0\ttotal = 10\nOPERATION:  successful = 8\tmaxttc = 22\tfailed = 0\ttotal = 8\nOPERATION_RO:  successful = 12\tmaxttc = 11\tfailed = 0\ttotal = 12\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 59.88 op/s (59.88 op/s including failed)\nElapsed time: 0.67 s\n====== scala-stm-bench7 (scala) [default], iteration 0 completed (2511.480 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 1 started ======\nGC before operation: completed in 135.828 ms, heap usage 523.490 MB -> 142.053 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 470\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 13\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 8\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 14\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 9\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 8\tmaxttc = 534\tfailed = 0\ttotal = 8\nSHORT_TRAVERSAL:  successful = 12\tmaxttc = 16\tfailed = 0\ttotal = 12\nSHORT_TRAVERSAL_RO:  successful = 20\tmaxttc = 9\tfailed = 0\ttotal = 20\nOPERATION:  successful = 16\tmaxttc = 22\tfailed = 0\ttotal = 16\nOPERATION_RO:  successful = 24\tmaxttc = 14\tfailed = 0\ttotal = 24\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 155.64 op/s (155.64 op/s including failed)\nElapsed time: 0.51 s\n====== scala-stm-bench7 (scala) [default], iteration 1 completed (1783.062 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 2 started ======\nGC before operation: completed in 240.384 ms, heap usage 489.877 MB -> 142.054 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 517\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 11\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 8\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 12\tmaxttc = 534\tfailed = 0\ttotal = 12\nSHORT_TRAVERSAL:  successful = 18\tmaxttc = 16\tfailed = 0\ttotal = 18\nSHORT_TRAVERSAL_RO:  successful = 30\tmaxttc = 9\tfailed = 0\ttotal = 30\nOPERATION:  successful = 24\tmaxttc = 22\tfailed = 0\ttotal = 24\nOPERATION_RO:  successful = 36\tmaxttc = 14\tfailed = 0\ttotal = 36\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 220.59 op/s (220.59 op/s including failed)\nElapsed time: 0.54 s\n====== scala-stm-bench7 (scala) [default], iteration 2 completed (1408.246 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 3 started ======\nGC before operation: completed in 136.697 ms, heap usage 506.905 MB -> 142.050 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 496\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 7\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 4\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 16\tmaxttc = 534\tfailed = 0\ttotal = 16\nSHORT_TRAVERSAL:  successful = 24\tmaxttc = 16\tfailed = 0\ttotal = 24\nSHORT_TRAVERSAL_RO:  successful = 40\tmaxttc = 9\tfailed = 0\ttotal = 40\nOPERATION:  successful = 32\tmaxttc = 22\tfailed = 0\ttotal = 32\nOPERATION_RO:  successful = 48\tmaxttc = 14\tfailed = 0\ttotal = 48\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 310.08 op/s (310.08 op/s including failed)\nElapsed time: 0.52 s\n====== scala-stm-bench7 (scala) [default], iteration 3 completed (1342.530 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 4 started ======\nGC before operation: completed in 147.926 ms, heap usage 393.121 MB -> 142.060 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 384\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 7\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 4\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 20\tmaxttc = 534\tfailed = 0\ttotal = 20\nSHORT_TRAVERSAL:  successful = 30\tmaxttc = 16\tfailed = 0\ttotal = 30\nSHORT_TRAVERSAL_RO:  successful = 50\tmaxttc = 9\tfailed = 0\ttotal = 50\nOPERATION:  successful = 40\tmaxttc = 22\tfailed = 0\ttotal = 40\nOPERATION_RO:  successful = 60\tmaxttc = 14\tfailed = 0\ttotal = 60\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 506.33 op/s (506.33 op/s including failed)\nElapsed time: 0.40 s\n====== scala-stm-bench7 (scala) [default], iteration 4 completed (1272.510 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 5 started ======\nGC before operation: completed in 185.238 ms, heap usage 380.599 MB -> 142.044 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 518\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 11\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 6\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 24\tmaxttc = 534\tfailed = 0\ttotal = 24\nSHORT_TRAVERSAL:  successful = 36\tmaxttc = 16\tfailed = 0\ttotal = 36\nSHORT_TRAVERSAL_RO:  successful = 60\tmaxttc = 9\tfailed = 0\ttotal = 60\nOPERATION:  successful = 48\tmaxttc = 22\tfailed = 0\ttotal = 48\nOPERATION_RO:  successful = 72\tmaxttc = 14\tfailed = 0\ttotal = 72\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 441.99 op/s (441.99 op/s including failed)\nElapsed time: 0.54 s\n====== scala-stm-bench7 (scala) [default], iteration 5 completed (1480.501 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 6 started ======\nGC before operation: completed in 153.068 ms, heap usage 507.102 MB -> 142.056 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 463\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 11\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 8\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 8\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 28\tmaxttc = 534\tfailed = 0\ttotal = 28\nSHORT_TRAVERSAL:  successful = 42\tmaxttc = 16\tfailed = 0\ttotal = 42\nSHORT_TRAVERSAL_RO:  successful = 70\tmaxttc = 9\tfailed = 0\ttotal = 70\nOPERATION:  successful = 56\tmaxttc = 22\tfailed = 0\ttotal = 56\nOPERATION_RO:  successful = 84\tmaxttc = 14\tfailed = 0\ttotal = 84\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 577.32 op/s (577.32 op/s including failed)\nElapsed time: 0.49 s\n====== scala-stm-bench7 (scala) [default], iteration 6 completed (1372.866 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 7 started ======\nGC before operation: completed in 147.549 ms, heap usage 507.608 MB -> 142.061 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 483\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 9\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 32\tmaxttc = 534\tfailed = 0\ttotal = 32\nSHORT_TRAVERSAL:  successful = 48\tmaxttc = 16\tfailed = 0\ttotal = 48\nSHORT_TRAVERSAL_RO:  successful = 80\tmaxttc = 9\tfailed = 0\ttotal = 80\nOPERATION:  successful = 64\tmaxttc = 22\tfailed = 0\ttotal = 64\nOPERATION_RO:  successful = 96\tmaxttc = 14\tfailed = 0\ttotal = 96\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 642.57 op/s (642.57 op/s including failed)\nElapsed time: 0.50 s\n====== scala-stm-bench7 (scala) [default], iteration 7 completed (1368.893 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 8 started ======\nGC before operation: completed in 156.075 ms, heap usage 505.601 MB -> 142.044 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 492\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 10\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 4\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 36\tmaxttc = 534\tfailed = 0\ttotal = 36\nSHORT_TRAVERSAL:  successful = 54\tmaxttc = 16\tfailed = 0\ttotal = 54\nSHORT_TRAVERSAL_RO:  successful = 90\tmaxttc = 9\tfailed = 0\ttotal = 90\nOPERATION:  successful = 72\tmaxttc = 22\tfailed = 0\ttotal = 72\nOPERATION_RO:  successful = 108\tmaxttc = 14\tfailed = 0\ttotal = 108\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 705.88 op/s (705.88 op/s including failed)\nElapsed time: 0.51 s\n====== scala-stm-bench7 (scala) [default], iteration 8 completed (1469.754 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 9 started ======\nGC before operation: completed in 137.134 ms, heap usage 507.110 MB -> 142.056 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 474\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 10\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 4\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 40\tmaxttc = 534\tfailed = 0\ttotal = 40\nSHORT_TRAVERSAL:  successful = 60\tmaxttc = 16\tfailed = 0\ttotal = 60\nSHORT_TRAVERSAL_RO:  successful = 100\tmaxttc = 9\tfailed = 0\ttotal = 100\nOPERATION:  successful = 80\tmaxttc = 22\tfailed = 0\ttotal = 80\nOPERATION_RO:  successful = 120\tmaxttc = 14\tfailed = 0\ttotal = 120\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 818.00 op/s (818.00 op/s including failed)\nElapsed time: 0.49 s\n====== scala-stm-bench7 (scala) [default], iteration 9 completed (1497.723 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 10 started ======\nGC before operation: completed in 389.866 ms, heap usage 507.497 MB -> 295.408 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 340\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 11\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 44\tmaxttc = 534\tfailed = 0\ttotal = 44\nSHORT_TRAVERSAL:  successful = 66\tmaxttc = 16\tfailed = 0\ttotal = 66\nSHORT_TRAVERSAL_RO:  successful = 110\tmaxttc = 9\tfailed = 0\ttotal = 110\nOPERATION:  successful = 88\tmaxttc = 22\tfailed = 0\ttotal = 88\nOPERATION_RO:  successful = 132\tmaxttc = 14\tfailed = 0\ttotal = 132\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1229.05 op/s (1229.05 op/s including failed)\nElapsed time: 0.36 s\n====== scala-stm-bench7 (scala) [default], iteration 10 completed (1120.384 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 11 started ======\nGC before operation: completed in 140.313 ms, heap usage 400.744 MB -> 142.052 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 600\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 12\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 48\tmaxttc = 600\tfailed = 0\ttotal = 48\nSHORT_TRAVERSAL:  successful = 72\tmaxttc = 16\tfailed = 0\ttotal = 72\nSHORT_TRAVERSAL_RO:  successful = 120\tmaxttc = 9\tfailed = 0\ttotal = 120\nOPERATION:  successful = 96\tmaxttc = 22\tfailed = 0\ttotal = 96\nOPERATION_RO:  successful = 144\tmaxttc = 14\tfailed = 0\ttotal = 144\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 770.47 op/s (770.47 op/s including failed)\nElapsed time: 0.62 s\n====== scala-stm-bench7 (scala) [default], iteration 11 completed (1498.094 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 12 started ======\nGC before operation: completed in 158.043 ms, heap usage 507.099 MB -> 142.057 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 429\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 6\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 52\tmaxttc = 600\tfailed = 0\ttotal = 52\nSHORT_TRAVERSAL:  successful = 78\tmaxttc = 16\tfailed = 0\ttotal = 78\nSHORT_TRAVERSAL_RO:  successful = 130\tmaxttc = 9\tfailed = 0\ttotal = 130\nOPERATION:  successful = 104\tmaxttc = 22\tfailed = 0\ttotal = 104\nOPERATION_RO:  successful = 156\tmaxttc = 14\tfailed = 0\ttotal = 156\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1184.51 op/s (1184.51 op/s including failed)\nElapsed time: 0.44 s\n====== scala-stm-bench7 (scala) [default], iteration 12 completed (1301.468 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 13 started ======\nGC before operation: completed in 157.214 ms, heap usage 430.109 MB -> 142.044 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 441\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 8\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 7\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 56\tmaxttc = 600\tfailed = 0\ttotal = 56\nSHORT_TRAVERSAL:  successful = 84\tmaxttc = 16\tfailed = 0\ttotal = 84\nSHORT_TRAVERSAL_RO:  successful = 140\tmaxttc = 9\tfailed = 0\ttotal = 140\nOPERATION:  successful = 112\tmaxttc = 22\tfailed = 0\ttotal = 112\nOPERATION_RO:  successful = 168\tmaxttc = 14\tfailed = 0\ttotal = 168\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1244.44 op/s (1244.44 op/s including failed)\nElapsed time: 0.45 s\n====== scala-stm-bench7 (scala) [default], iteration 13 completed (1351.470 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 14 started ======\nGC before operation: completed in 141.475 ms, heap usage 507.530 MB -> 142.049 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 482\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 10\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 60\tmaxttc = 600\tfailed = 0\ttotal = 60\nSHORT_TRAVERSAL:  successful = 90\tmaxttc = 16\tfailed = 0\ttotal = 90\nSHORT_TRAVERSAL_RO:  successful = 150\tmaxttc = 9\tfailed = 0\ttotal = 150\nOPERATION:  successful = 120\tmaxttc = 22\tfailed = 0\ttotal = 120\nOPERATION_RO:  successful = 180\tmaxttc = 14\tfailed = 0\ttotal = 180\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1204.82 op/s (1204.82 op/s including failed)\nElapsed time: 0.50 s\n====== scala-stm-bench7 (scala) [default], iteration 14 completed (1439.994 ms) ======\nNOTE: 'naive-bayes' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== naive-bayes (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 157.559 ms, heap usage 173.043 MB -> 152.727 MB.\n====== naive-bayes (apache-spark) [default], iteration 0 completed (40505.768 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 203.021 ms, heap usage 442.679 MB -> 428.812 MB.\n====== naive-bayes (apache-spark) [default], iteration 1 completed (23313.942 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 184.892 ms, heap usage 455.964 MB -> 429.040 MB.\n====== naive-bayes (apache-spark) [default], iteration 2 completed (22137.040 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 207.126 ms, heap usage 447.901 MB -> 429.105 MB.\n====== naive-bayes (apache-spark) [default], iteration 3 completed (22166.338 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 178.331 ms, heap usage 447.914 MB -> 429.201 MB.\n====== naive-bayes (apache-spark) [default], iteration 4 completed (22021.017 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 188.053 ms, heap usage 531.524 MB -> 429.272 MB.\n====== naive-bayes (apache-spark) [default], iteration 5 completed (21499.434 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 198.890 ms, heap usage 499.768 MB -> 429.344 MB.\n====== naive-bayes (apache-spark) [default], iteration 6 completed (21187.520 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 175.395 ms, heap usage 531.319 MB -> 429.410 MB.\n====== naive-bayes (apache-spark) [default], iteration 7 completed (22419.763 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 282.874 ms, heap usage 492.795 MB -> 429.532 MB.\n====== naive-bayes (apache-spark) [default], iteration 8 completed (21701.999 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 167.999 ms, heap usage 455.434 MB -> 427.583 MB.\n====== naive-bayes (apache-spark) [default], iteration 9 completed (20956.195 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 211.706 ms, heap usage 813.593 MB -> 421.269 MB.\n====== naive-bayes (apache-spark) [default], iteration 10 completed (21463.384 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 165.327 ms, heap usage 542.556 MB -> 422.040 MB.\n====== naive-bayes (apache-spark) [default], iteration 11 completed (20713.293 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 156.444 ms, heap usage 742.313 MB -> 422.032 MB.\n====== naive-bayes (apache-spark) [default], iteration 12 completed (20682.267 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 143.812 ms, heap usage 741.763 MB -> 422.119 MB.\n====== naive-bayes (apache-spark) [default], iteration 13 completed (21341.442 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 154.760 ms, heap usage 448.917 MB -> 422.205 MB.\n====== naive-bayes (apache-spark) [default], iteration 14 completed (21277.786 ms) ======\nNOTE: 'als' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== als (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 170.517 ms, heap usage 342.184 MB -> 167.715 MB.\n====== als (apache-spark) [default], iteration 0 completed (17245.293 ms) ======\n====== als (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 206.106 ms, heap usage 381.163 MB -> 192.447 MB.\n====== als (apache-spark) [default], iteration 1 completed (8374.551 ms) ======\n====== als (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 203.403 ms, heap usage 692.875 MB -> 193.732 MB.\n====== als (apache-spark) [default], iteration 2 completed (7613.825 ms) ======\n====== als (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 197.033 ms, heap usage 770.490 MB -> 194.322 MB.\n====== als (apache-spark) [default], iteration 3 completed (7498.159 ms) ======\n====== als (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 222.854 ms, heap usage 724.610 MB -> 194.842 MB.\n====== als (apache-spark) [default], iteration 4 completed (7222.046 ms) ======\n====== als (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 199.073 ms, heap usage 630.683 MB -> 195.312 MB.\n====== als (apache-spark) [default], iteration 5 completed (6777.255 ms) ======\n====== als (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 196.178 ms, heap usage 670.045 MB -> 195.920 MB.\n====== als (apache-spark) [default], iteration 6 completed (6716.076 ms) ======\n====== als (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 196.405 ms, heap usage 703.914 MB -> 196.465 MB.\n====== als (apache-spark) [default], iteration 7 completed (6706.499 ms) ======\n====== als (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 200.429 ms, heap usage 690.188 MB -> 197.117 MB.\n====== als (apache-spark) [default], iteration 8 completed (6692.376 ms) ======\n====== als (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 206.096 ms, heap usage 703.429 MB -> 197.402 MB.\n====== als (apache-spark) [default], iteration 9 completed (6829.927 ms) ======\n====== als (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 210.566 ms, heap usage 722.096 MB -> 197.832 MB.\n====== als (apache-spark) [default], iteration 10 completed (6464.726 ms) ======\n====== als (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 207.892 ms, heap usage 691.523 MB -> 197.993 MB.\n====== als (apache-spark) [default], iteration 11 completed (6570.330 ms) ======\n====== als (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 235.043 ms, heap usage 728.923 MB -> 198.219 MB.\n====== als (apache-spark) [default], iteration 12 completed (6550.026 ms) ======\n====== als (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 204.262 ms, heap usage 672.212 MB -> 198.515 MB.\n====== als (apache-spark) [default], iteration 13 completed (6596.781 ms) ======\n====== als (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 202.815 ms, heap usage 743.348 MB -> 198.767 MB.\n====== als (apache-spark) [default], iteration 14 completed (6349.995 ms) ======\n"
    },
    "par-mnemonics": {
        "times": [
            4479.313,
            4119.0,
            4258.146,
            4452.797,
            3933.25,
            4007.08,
            3953.148,
            4068.803,
            3881.191,
            4171.076,
            3953.921,
            4020.731,
            4155.199,
            4420.589,
            3653.633
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 111.440 ms, heap usage 193.716 MB -> 76.034 MB.\n====== scrabble (functional) [default], iteration 0 completed (1746.818 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 75.425 ms, heap usage 124.295 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 1 completed (822.799 ms) ======\n====== scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 103.806 ms, heap usage 309.363 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 2 completed (876.688 ms) ======\n====== scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 108.057 ms, heap usage 131.528 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 3 completed (772.422 ms) ======\n====== scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 90.330 ms, heap usage 339.197 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 4 completed (664.922 ms) ======\n====== scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 78.633 ms, heap usage 242.581 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 5 completed (767.926 ms) ======\n====== scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 80.529 ms, heap usage 243.067 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 6 completed (771.953 ms) ======\n====== scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 87.821 ms, heap usage 169.966 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 7 completed (713.175 ms) ======\n====== scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 85.627 ms, heap usage 126.363 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 8 completed (705.321 ms) ======\n====== scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 77.713 ms, heap usage 279.273 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 9 completed (595.178 ms) ======\n====== scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 90.853 ms, heap usage 197.665 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 10 completed (653.981 ms) ======\n====== scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 80.787 ms, heap usage 125.936 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 11 completed (671.613 ms) ======\n====== scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 81.092 ms, heap usage 326.788 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 12 completed (614.500 ms) ======\n====== scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 74.421 ms, heap usage 199.244 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 13 completed (687.061 ms) ======\n====== scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 77.486 ms, heap usage 357.036 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 14 completed (698.120 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 39.864 ms, heap usage 626.576 MB -> 29.596 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (20832.995 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 151.296 ms, heap usage 587.802 MB -> 148.935 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (10726.986 ms) ======\n====== page-rank (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 139.528 ms, heap usage 662.229 MB -> 149.044 MB.\n====== page-rank (apache-spark) [default], iteration 2 completed (10497.012 ms) ======\n====== page-rank (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 145.301 ms, heap usage 620.847 MB -> 149.161 MB.\n====== page-rank (apache-spark) [default], iteration 3 completed (10683.078 ms) ======\n====== page-rank (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 146.272 ms, heap usage 595.956 MB -> 149.275 MB.\n====== page-rank (apache-spark) [default], iteration 4 completed (11158.857 ms) ======\n====== page-rank (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 150.477 ms, heap usage 624.956 MB -> 149.389 MB.\n====== page-rank (apache-spark) [default], iteration 5 completed (10816.748 ms) ======\n====== page-rank (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 152.563 ms, heap usage 475.956 MB -> 149.705 MB.\n====== page-rank (apache-spark) [default], iteration 6 completed (10797.777 ms) ======\n====== page-rank (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 153.431 ms, heap usage 575.956 MB -> 149.630 MB.\n====== page-rank (apache-spark) [default], iteration 7 completed (10320.855 ms) ======\n====== page-rank (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 154.161 ms, heap usage 494.956 MB -> 149.734 MB.\n====== page-rank (apache-spark) [default], iteration 8 completed (10797.875 ms) ======\n====== page-rank (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 159.810 ms, heap usage 685.884 MB -> 149.850 MB.\n====== page-rank (apache-spark) [default], iteration 9 completed (10426.551 ms) ======\n====== page-rank (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 138.119 ms, heap usage 483.136 MB -> 149.929 MB.\n====== page-rank (apache-spark) [default], iteration 10 completed (11319.287 ms) ======\n====== page-rank (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 160.571 ms, heap usage 417.218 MB -> 150.048 MB.\n====== page-rank (apache-spark) [default], iteration 11 completed (10773.541 ms) ======\n====== page-rank (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 153.774 ms, heap usage 591.956 MB -> 150.197 MB.\n====== page-rank (apache-spark) [default], iteration 12 completed (10583.141 ms) ======\n====== page-rank (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 151.297 ms, heap usage 385.309 MB -> 150.212 MB.\n====== page-rank (apache-spark) [default], iteration 13 completed (11225.389 ms) ======\n====== page-rank (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 138.750 ms, heap usage 506.956 MB -> 150.287 MB.\n====== page-rank (apache-spark) [default], iteration 14 completed (11253.752 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 60.640 ms, heap usage 661.207 MB -> 32.216 MB.\n====== future-genetic (functional) [default], iteration 0 completed (14742.129 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 51.821 ms, heap usage 114.841 MB -> 33.158 MB.\n====== future-genetic (functional) [default], iteration 1 completed (11014.493 ms) ======\n====== future-genetic (functional) [default], iteration 2 started ======\nGC before operation: completed in 34.821 ms, heap usage 68.320 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 2 completed (10628.352 ms) ======\n====== future-genetic (functional) [default], iteration 3 started ======\nGC before operation: completed in 38.504 ms, heap usage 57.876 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 3 completed (10722.143 ms) ======\n====== future-genetic (functional) [default], iteration 4 started ======\nGC before operation: completed in 39.692 ms, heap usage 145.206 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 4 completed (10840.012 ms) ======\n====== future-genetic (functional) [default], iteration 5 started ======\nGC before operation: completed in 38.411 ms, heap usage 81.011 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 5 completed (10598.435 ms) ======\n====== future-genetic (functional) [default], iteration 6 started ======\nGC before operation: completed in 40.019 ms, heap usage 144.534 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 6 completed (10786.150 ms) ======\n====== future-genetic (functional) [default], iteration 7 started ======\nGC before operation: completed in 48.015 ms, heap usage 171.419 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 7 completed (10652.683 ms) ======\n====== future-genetic (functional) [default], iteration 8 started ======\nGC before operation: completed in 35.498 ms, heap usage 37.426 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 8 completed (10488.698 ms) ======\n====== future-genetic (functional) [default], iteration 9 started ======\nGC before operation: completed in 42.383 ms, heap usage 130.505 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 9 completed (10682.271 ms) ======\n====== future-genetic (functional) [default], iteration 10 started ======\nGC before operation: completed in 48.742 ms, heap usage 134.970 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 10 completed (10549.840 ms) ======\n====== future-genetic (functional) [default], iteration 11 started ======\nGC before operation: completed in 41.808 ms, heap usage 156.009 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 11 completed (10851.547 ms) ======\n====== future-genetic (functional) [default], iteration 12 started ======\nGC before operation: completed in 40.139 ms, heap usage 163.381 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 12 completed (10940.461 ms) ======\n====== future-genetic (functional) [default], iteration 13 started ======\nGC before operation: completed in 35.048 ms, heap usage 80.372 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 13 completed (10876.099 ms) ======\n====== future-genetic (functional) [default], iteration 14 started ======\nGC before operation: completed in 43.468 ms, heap usage 62.997 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 14 completed (10763.606 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 70.620 ms, heap usage 85.721 MB -> 33.974 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 11\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (23373.227 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 371.313 ms, heap usage 780.679 MB -> 161.200 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (17055.803 ms) ======\n====== akka-uct (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 323.521 ms, heap usage 714.804 MB -> 140.346 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 2 completed (16644.579 ms) ======\n====== akka-uct (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 312.697 ms, heap usage 606.138 MB -> 139.703 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 3 completed (16230.901 ms) ======\n====== akka-uct (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 272.343 ms, heap usage 694.413 MB -> 139.888 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 4 completed (16222.783 ms) ======\n====== akka-uct (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 288.309 ms, heap usage 549.430 MB -> 124.976 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 5 completed (16061.576 ms) ======\n====== akka-uct (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 254.080 ms, heap usage 570.484 MB -> 130.699 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 6 completed (15769.690 ms) ======\n====== akka-uct (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 387.396 ms, heap usage 619.770 MB -> 158.750 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 7 completed (15901.168 ms) ======\n====== akka-uct (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 304.489 ms, heap usage 580.964 MB -> 149.879 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 8 completed (16178.151 ms) ======\n====== akka-uct (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 253.043 ms, heap usage 553.450 MB -> 150.939 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 9 completed (15874.839 ms) ======\n====== akka-uct (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 301.130 ms, heap usage 528.928 MB -> 139.937 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 10 completed (15982.587 ms) ======\n====== akka-uct (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 267.305 ms, heap usage 626.465 MB -> 131.010 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 11 completed (16353.495 ms) ======\n====== akka-uct (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 294.293 ms, heap usage 500.855 MB -> 153.125 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 12 completed (15969.903 ms) ======\n====== akka-uct (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 292.350 ms, heap usage 647.259 MB -> 125.388 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 13 completed (15322.843 ms) ======\n====== akka-uct (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 252.391 ms, heap usage 562.070 MB -> 128.190 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 14 completed (16083.172 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 2 (out of 2) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 134.630 ms, heap usage 463.678 MB -> 85.476 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (22878.805 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 103.188 ms, heap usage 272.080 MB -> 100.040 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (14811.341 ms) ======\n====== movie-lens (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 144.144 ms, heap usage 208.849 MB -> 97.194 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 2 completed (13632.892 ms) ======\n====== movie-lens (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 122.890 ms, heap usage 173.120 MB -> 97.842 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 3 completed (12814.257 ms) ======\n====== movie-lens (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 113.279 ms, heap usage 237.308 MB -> 98.141 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 4 completed (12978.413 ms) ======\n====== movie-lens (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 119.099 ms, heap usage 219.670 MB -> 98.103 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 5 completed (14306.460 ms) ======\n====== movie-lens (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 123.459 ms, heap usage 175.077 MB -> 98.404 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 6 completed (12568.443 ms) ======\n====== movie-lens (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 115.564 ms, heap usage 119.760 MB -> 100.031 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 7 completed (11505.398 ms) ======\n====== movie-lens (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 112.918 ms, heap usage 255.198 MB -> 99.024 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 8 completed (11706.594 ms) ======\n====== movie-lens (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 170.418 ms, heap usage 189.372 MB -> 98.513 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 9 completed (11662.958 ms) ======\n====== movie-lens (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 218.616 ms, heap usage 163.601 MB -> 98.629 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 10 completed (11293.424 ms) ======\n====== movie-lens (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 126.280 ms, heap usage 236.690 MB -> 98.603 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 11 completed (11873.509 ms) ======\n====== movie-lens (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 121.729 ms, heap usage 154.433 MB -> 98.657 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 12 completed (12263.435 ms) ======\n====== movie-lens (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 113.550 ms, heap usage 470.143 MB -> 102.266 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 13 completed (12351.951 ms) ======\n====== movie-lens (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 107.375 ms, heap usage 274.093 MB -> 98.738 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 14 completed (12112.256 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 83.428 ms, heap usage 476.231 MB -> 58.268 MB.\n====== scala-doku (scala) [default], iteration 0 completed (2753.475 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 83.813 ms, heap usage 150.542 MB -> 58.243 MB.\n====== scala-doku (scala) [default], iteration 1 completed (2340.567 ms) ======\n====== scala-doku (scala) [default], iteration 2 started ======\nGC before operation: completed in 88.607 ms, heap usage 121.743 MB -> 58.244 MB.\n====== scala-doku (scala) [default], iteration 2 completed (2269.313 ms) ======\n====== scala-doku (scala) [default], iteration 3 started ======\nGC before operation: completed in 79.133 ms, heap usage 118.244 MB -> 58.245 MB.\n====== scala-doku (scala) [default], iteration 3 completed (1898.181 ms) ======\n====== scala-doku (scala) [default], iteration 4 started ======\nGC before operation: completed in 86.643 ms, heap usage 120.745 MB -> 58.245 MB.\n====== scala-doku (scala) [default], iteration 4 completed (1792.430 ms) ======\n====== scala-doku (scala) [default], iteration 5 started ======\nGC before operation: completed in 77.315 ms, heap usage 119.245 MB -> 58.245 MB.\n====== scala-doku (scala) [default], iteration 5 completed (1786.944 ms) ======\n====== scala-doku (scala) [default], iteration 6 started ======\nGC before operation: completed in 89.168 ms, heap usage 120.745 MB -> 58.245 MB.\n====== scala-doku (scala) [default], iteration 6 completed (1866.830 ms) ======\n====== scala-doku (scala) [default], iteration 7 started ======\nGC before operation: completed in 76.164 ms, heap usage 120.245 MB -> 58.246 MB.\n====== scala-doku (scala) [default], iteration 7 completed (1799.903 ms) ======\n====== scala-doku (scala) [default], iteration 8 started ======\nGC before operation: completed in 79.207 ms, heap usage 119.746 MB -> 58.246 MB.\n====== scala-doku (scala) [default], iteration 8 completed (1782.750 ms) ======\n====== scala-doku (scala) [default], iteration 9 started ======\nGC before operation: completed in 86.288 ms, heap usage 120.246 MB -> 58.247 MB.\n====== scala-doku (scala) [default], iteration 9 completed (1778.745 ms) ======\n====== scala-doku (scala) [default], iteration 10 started ======\nGC before operation: completed in 77.760 ms, heap usage 119.747 MB -> 58.247 MB.\n====== scala-doku (scala) [default], iteration 10 completed (1794.655 ms) ======\n====== scala-doku (scala) [default], iteration 11 started ======\nGC before operation: completed in 92.459 ms, heap usage 119.747 MB -> 58.247 MB.\n====== scala-doku (scala) [default], iteration 11 completed (1818.580 ms) ======\n====== scala-doku (scala) [default], iteration 12 started ======\nGC before operation: completed in 77.984 ms, heap usage 120.247 MB -> 58.247 MB.\n====== scala-doku (scala) [default], iteration 12 completed (1848.215 ms) ======\n====== scala-doku (scala) [default], iteration 13 started ======\nGC before operation: completed in 93.441 ms, heap usage 119.747 MB -> 58.247 MB.\n====== scala-doku (scala) [default], iteration 13 completed (1809.411 ms) ======\n====== scala-doku (scala) [default], iteration 14 started ======\nGC before operation: completed in 82.582 ms, heap usage 119.747 MB -> 58.247 MB.\n====== scala-doku (scala) [default], iteration 14 completed (1803.934 ms) ======\nNOTE: 'chi-square' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== chi-square (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 99.379 ms, heap usage 319.426 MB -> 63.405 MB.\n====== chi-square (apache-spark) [default], iteration 0 completed (5198.635 ms) ======\n====== chi-square (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 217.985 ms, heap usage 339.427 MB -> 209.273 MB.\n====== chi-square (apache-spark) [default], iteration 1 completed (1119.485 ms) ======\n====== chi-square (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 175.933 ms, heap usage 299.968 MB -> 209.346 MB.\n====== chi-square (apache-spark) [default], iteration 2 completed (1038.669 ms) ======\n====== chi-square (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 162.484 ms, heap usage 434.584 MB -> 209.395 MB.\n====== chi-square (apache-spark) [default], iteration 3 completed (988.864 ms) ======\n====== chi-square (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 185.658 ms, heap usage 472.608 MB -> 209.448 MB.\n====== chi-square (apache-spark) [default], iteration 4 completed (1021.110 ms) ======\n====== chi-square (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 161.400 ms, heap usage 424.379 MB -> 209.494 MB.\n====== chi-square (apache-spark) [default], iteration 5 completed (1016.339 ms) ======\n====== chi-square (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 165.385 ms, heap usage 377.344 MB -> 209.638 MB.\n====== chi-square (apache-spark) [default], iteration 6 completed (1044.792 ms) ======\n====== chi-square (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 151.433 ms, heap usage 385.817 MB -> 209.712 MB.\n====== chi-square (apache-spark) [default], iteration 7 completed (892.107 ms) ======\n====== chi-square (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 148.497 ms, heap usage 375.358 MB -> 209.695 MB.\n====== chi-square (apache-spark) [default], iteration 8 completed (912.148 ms) ======\n====== chi-square (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 186.559 ms, heap usage 381.260 MB -> 209.735 MB.\n====== chi-square (apache-spark) [default], iteration 9 completed (916.193 ms) ======\n====== chi-square (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 172.071 ms, heap usage 375.984 MB -> 209.776 MB.\n====== chi-square (apache-spark) [default], iteration 10 completed (706.035 ms) ======\n====== chi-square (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 142.619 ms, heap usage 232.457 MB -> 209.816 MB.\n====== chi-square (apache-spark) [default], iteration 11 completed (764.527 ms) ======\n====== chi-square (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 164.121 ms, heap usage 670.340 MB -> 209.852 MB.\n====== chi-square (apache-spark) [default], iteration 12 completed (858.768 ms) ======\n====== chi-square (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 159.826 ms, heap usage 316.763 MB -> 209.890 MB.\n====== chi-square (apache-spark) [default], iteration 13 completed (862.769 ms) ======\n====== chi-square (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 166.687 ms, heap usage 379.775 MB -> 209.921 MB.\n====== chi-square (apache-spark) [default], iteration 14 completed (703.576 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 196.120 ms, heap usage 470.464 MB -> 147.340 MB.\n====== fj-kmeans (concurrency) [default], iteration 0 completed (8529.473 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 133.696 ms, heap usage 331.615 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 1 completed (7479.812 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 134.063 ms, heap usage 318.922 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 2 completed (7610.407 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 133.778 ms, heap usage 222.341 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 3 completed (7571.793 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 139.456 ms, heap usage 217.309 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 4 completed (7516.518 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 133.370 ms, heap usage 382.616 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 5 completed (8339.655 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 140.237 ms, heap usage 354.831 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 6 completed (7633.795 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 137.960 ms, heap usage 448.031 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 7 completed (7335.928 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 127.427 ms, heap usage 221.957 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 8 completed (7359.912 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 137.302 ms, heap usage 368.915 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 9 completed (8379.108 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 139.433 ms, heap usage 184.312 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 10 completed (8029.337 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 138.797 ms, heap usage 171.657 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 11 completed (7673.166 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 132.845 ms, heap usage 170.035 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 12 completed (7460.127 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 137.480 ms, heap usage 320.158 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 13 completed (7646.174 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 127.475 ms, heap usage 186.440 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 14 completed (7391.153 ms) ======\n====== rx-scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 138.851 ms, heap usage 249.054 MB -> 97.875 MB.\n====== rx-scrabble (functional) [default], iteration 0 completed (539.438 ms) ======\n====== rx-scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 97.806 ms, heap usage 250.872 MB -> 98.124 MB.\n====== rx-scrabble (functional) [default], iteration 1 completed (188.955 ms) ======\n====== rx-scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 121.701 ms, heap usage 240.121 MB -> 98.118 MB.\n====== rx-scrabble (functional) [default], iteration 2 completed (158.740 ms) ======\n====== rx-scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 103.202 ms, heap usage 238.618 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 3 completed (147.979 ms) ======\n====== rx-scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 107.730 ms, heap usage 239.113 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 4 completed (162.112 ms) ======\n====== rx-scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 117.578 ms, heap usage 239.463 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 5 completed (128.936 ms) ======\n====== rx-scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 111.309 ms, heap usage 239.390 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 6 completed (116.055 ms) ======\n====== rx-scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 109.603 ms, heap usage 239.557 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 7 completed (109.336 ms) ======\n====== rx-scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 108.494 ms, heap usage 239.260 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 8 completed (124.372 ms) ======\n====== rx-scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 134.578 ms, heap usage 239.449 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 9 completed (133.649 ms) ======\n====== rx-scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 98.374 ms, heap usage 240.453 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 10 completed (197.918 ms) ======\n====== rx-scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 111.349 ms, heap usage 240.463 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 11 completed (117.228 ms) ======\n====== rx-scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 104.555 ms, heap usage 240.413 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 12 completed (112.849 ms) ======\n====== rx-scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 98.436 ms, heap usage 240.514 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 13 completed (105.866 ms) ======\n====== rx-scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 92.783 ms, heap usage 240.977 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 14 completed (105.587 ms) ======\n====== db-shootout (database) [default], iteration 0 started ======\nGC before operation: completed in 104.333 ms, heap usage 179.823 MB -> 100.606 MB.\n====== db-shootout (database) [default], iteration 0 completed (8779.951 ms) ======\n====== db-shootout (database) [default], iteration 1 started ======\nGC before operation: completed in 107.497 ms, heap usage 242.103 MB -> 110.924 MB.\n====== db-shootout (database) [default], iteration 1 completed (9343.782 ms) ======\n====== db-shootout (database) [default], iteration 2 started ======\nGC before operation: completed in 111.405 ms, heap usage 283.357 MB -> 112.478 MB.\n====== db-shootout (database) [default], iteration 2 completed (7499.305 ms) ======\n====== db-shootout (database) [default], iteration 3 started ======\nGC before operation: completed in 94.995 ms, heap usage 543.589 MB -> 114.314 MB.\n====== db-shootout (database) [default], iteration 3 completed (8724.019 ms) ======\n====== db-shootout (database) [default], iteration 4 started ======\nGC before operation: completed in 101.845 ms, heap usage 213.978 MB -> 159.872 MB.\n====== db-shootout (database) [default], iteration 4 completed (7010.765 ms) ======\n====== db-shootout (database) [default], iteration 5 started ======\nGC before operation: completed in 164.949 ms, heap usage 636.845 MB -> 167.668 MB.\n====== db-shootout (database) [default], iteration 5 completed (7721.156 ms) ======\n====== db-shootout (database) [default], iteration 6 started ======\nGC before operation: completed in 130.093 ms, heap usage 384.324 MB -> 167.486 MB.\n====== db-shootout (database) [default], iteration 6 completed (7647.257 ms) ======\n====== db-shootout (database) [default], iteration 7 started ======\nGC before operation: completed in 109.623 ms, heap usage 282.011 MB -> 175.857 MB.\n====== db-shootout (database) [default], iteration 7 completed (7329.669 ms) ======\n====== db-shootout (database) [default], iteration 8 started ======\nGC before operation: completed in 116.420 ms, heap usage 284.042 MB -> 175.655 MB.\n====== db-shootout (database) [default], iteration 8 completed (7329.711 ms) ======\n====== db-shootout (database) [default], iteration 9 started ======\nGC before operation: completed in 171.716 ms, heap usage 342.792 MB -> 175.912 MB.\n====== db-shootout (database) [default], iteration 9 completed (6774.502 ms) ======\n====== db-shootout (database) [default], iteration 10 started ======\nGC before operation: completed in 173.829 ms, heap usage 293.932 MB -> 175.555 MB.\n====== db-shootout (database) [default], iteration 10 completed (6874.618 ms) ======\n====== db-shootout (database) [default], iteration 11 started ======\nGC before operation: completed in 148.492 ms, heap usage 400.220 MB -> 180.072 MB.\n====== db-shootout (database) [default], iteration 11 completed (7713.732 ms) ======\n====== db-shootout (database) [default], iteration 12 started ======\nGC before operation: completed in 117.617 ms, heap usage 194.930 MB -> 178.866 MB.\n====== db-shootout (database) [default], iteration 12 completed (7466.876 ms) ======\n====== db-shootout (database) [default], iteration 13 started ======\nGC before operation: completed in 129.592 ms, heap usage 290.546 MB -> 179.243 MB.\n====== db-shootout (database) [default], iteration 13 completed (6989.489 ms) ======\n====== db-shootout (database) [default], iteration 14 started ======\nGC before operation: completed in 136.413 ms, heap usage 256.392 MB -> 179.022 MB.\n====== db-shootout (database) [default], iteration 14 completed (6647.630 ms) ======\nCreating graph database...\nLoading resources...\nPopulating database...\nfinagle-http on :39975 spawning 2 client and default number of server workers.\n====== finagle-http (web) [default], iteration 0 started ======\nGC before operation: completed in 98.510 ms, heap usage 612.157 MB -> 111.470 MB.\n====== finagle-http (web) [default], iteration 0 completed (17579.182 ms) ======\n====== finagle-http (web) [default], iteration 1 started ======\nGC before operation: completed in 132.580 ms, heap usage 293.599 MB -> 114.255 MB.\n====== finagle-http (web) [default], iteration 1 completed (7093.193 ms) ======\n====== finagle-http (web) [default], iteration 2 started ======\nGC before operation: completed in 139.872 ms, heap usage 142.229 MB -> 114.940 MB.\n====== finagle-http (web) [default], iteration 2 completed (3467.412 ms) ======\n====== finagle-http (web) [default], iteration 3 started ======\nGC before operation: completed in 102.621 ms, heap usage 139.149 MB -> 115.008 MB.\n====== finagle-http (web) [default], iteration 3 completed (2891.463 ms) ======\n====== finagle-http (web) [default], iteration 4 started ======\nGC before operation: completed in 101.518 ms, heap usage 138.053 MB -> 115.745 MB.\n====== finagle-http (web) [default], iteration 4 completed (3105.065 ms) ======\n====== finagle-http (web) [default], iteration 5 started ======\nGC before operation: completed in 107.976 ms, heap usage 136.110 MB -> 115.075 MB.\n====== finagle-http (web) [default], iteration 5 completed (2695.150 ms) ======\n====== finagle-http (web) [default], iteration 6 started ======\nGC before operation: completed in 112.486 ms, heap usage 136.249 MB -> 115.049 MB.\n====== finagle-http (web) [default], iteration 6 completed (2704.392 ms) ======\n====== finagle-http (web) [default], iteration 7 started ======\nGC before operation: completed in 114.377 ms, heap usage 135.245 MB -> 115.020 MB.\n====== finagle-http (web) [default], iteration 7 completed (2948.935 ms) ======\n====== finagle-http (web) [default], iteration 8 started ======\nGC before operation: completed in 122.053 ms, heap usage 135.666 MB -> 115.051 MB.\n====== finagle-http (web) [default], iteration 8 completed (2778.196 ms) ======\n====== finagle-http (web) [default], iteration 9 started ======\nGC before operation: completed in 109.678 ms, heap usage 136.088 MB -> 115.031 MB.\n====== finagle-http (web) [default], iteration 9 completed (2747.983 ms) ======\n====== finagle-http (web) [default], iteration 10 started ======\nGC before operation: completed in 99.536 ms, heap usage 135.498 MB -> 115.057 MB.\n====== finagle-http (web) [default], iteration 10 completed (2777.183 ms) ======\n====== finagle-http (web) [default], iteration 11 started ======\nGC before operation: completed in 100.476 ms, heap usage 134.090 MB -> 115.060 MB.\n====== finagle-http (web) [default], iteration 11 completed (2950.363 ms) ======\n====== finagle-http (web) [default], iteration 12 started ======\nGC before operation: completed in 101.952 ms, heap usage 134.523 MB -> 115.062 MB.\n====== finagle-http (web) [default], iteration 12 completed (2759.978 ms) ======\n====== finagle-http (web) [default], iteration 13 started ======\nGC before operation: completed in 109.865 ms, heap usage 135.138 MB -> 115.064 MB.\n====== finagle-http (web) [default], iteration 13 completed (2831.653 ms) ======\n====== finagle-http (web) [default], iteration 14 started ======\nGC before operation: completed in 105.948 ms, heap usage 134.532 MB -> 115.044 MB.\n====== finagle-http (web) [default], iteration 14 completed (2711.280 ms) ======\n====== reactors (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 105.850 ms, heap usage 151.704 MB -> 116.190 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 0 completed (17020.896 ms) ======\n====== reactors (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 104.599 ms, heap usage 181.251 MB -> 113.711 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 1 completed (13892.575 ms) ======\n====== reactors (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 95.102 ms, heap usage 174.198 MB -> 113.758 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 2 completed (12554.742 ms) ======\n====== reactors (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 116.893 ms, heap usage 619.954 MB -> 113.748 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 3 completed (13425.368 ms) ======\n====== reactors (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 116.460 ms, heap usage 633.733 MB -> 113.696 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 4 completed (12579.614 ms) ======\n====== reactors (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 101.795 ms, heap usage 678.695 MB -> 113.699 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 5 completed (13161.693 ms) ======\n====== reactors (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 172.615 ms, heap usage 622.470 MB -> 113.699 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 6 completed (12878.519 ms) ======\n====== reactors (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 112.228 ms, heap usage 718.171 MB -> 113.700 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 7 completed (12975.597 ms) ======\n====== reactors (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 98.762 ms, heap usage 716.077 MB -> 113.700 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 8 completed (12770.728 ms) ======\n====== reactors (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 102.126 ms, heap usage 748.105 MB -> 113.710 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 9 completed (13076.609 ms) ======\n====== reactors (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 98.649 ms, heap usage 687.606 MB -> 113.700 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 10 completed (13003.432 ms) ======\n====== reactors (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 101.379 ms, heap usage 732.195 MB -> 113.700 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 11 completed (14004.051 ms) ======\n====== reactors (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 105.159 ms, heap usage 627.924 MB -> 113.700 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 12 completed (13270.736 ms) ======\n====== reactors (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 108.063 ms, heap usage 752.521 MB -> 113.700 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 13 completed (13719.150 ms) ======\n====== reactors (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 122.216 ms, heap usage 634.683 MB -> 113.714 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 14 completed (13878.366 ms) ======\nNOTE: 'dec-tree' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== dec-tree (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 164.697 ms, heap usage 737.360 MB -> 126.493 MB.\n====== dec-tree (apache-spark) [default], iteration 0 completed (10211.732 ms) ======\n====== dec-tree (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 163.548 ms, heap usage 286.590 MB -> 158.107 MB.\n====== dec-tree (apache-spark) [default], iteration 1 completed (2450.505 ms) ======\n====== dec-tree (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 136.565 ms, heap usage 345.940 MB -> 158.492 MB.\n====== dec-tree (apache-spark) [default], iteration 2 completed (2009.743 ms) ======\n====== dec-tree (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 138.685 ms, heap usage 279.501 MB -> 158.716 MB.\n====== dec-tree (apache-spark) [default], iteration 3 completed (1989.605 ms) ======\n====== dec-tree (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 146.026 ms, heap usage 489.120 MB -> 158.915 MB.\n====== dec-tree (apache-spark) [default], iteration 4 completed (1714.918 ms) ======\n====== dec-tree (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 127.943 ms, heap usage 488.970 MB -> 159.140 MB.\n====== dec-tree (apache-spark) [default], iteration 5 completed (1705.237 ms) ======\n====== dec-tree (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 130.962 ms, heap usage 190.728 MB -> 158.870 MB.\n====== dec-tree (apache-spark) [default], iteration 6 completed (1675.410 ms) ======\n====== dec-tree (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 128.752 ms, heap usage 464.234 MB -> 159.494 MB.\n====== dec-tree (apache-spark) [default], iteration 7 completed (1687.319 ms) ======\n====== dec-tree (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 131.642 ms, heap usage 193.742 MB -> 159.062 MB.\n====== dec-tree (apache-spark) [default], iteration 8 completed (1553.852 ms) ======\n====== dec-tree (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 146.296 ms, heap usage 480.448 MB -> 168.014 MB.\n====== dec-tree (apache-spark) [default], iteration 9 completed (1516.748 ms) ======\n====== dec-tree (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 144.013 ms, heap usage 452.343 MB -> 159.895 MB.\n====== dec-tree (apache-spark) [default], iteration 10 completed (1582.871 ms) ======\n====== dec-tree (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 134.653 ms, heap usage 443.551 MB -> 160.089 MB.\n====== dec-tree (apache-spark) [default], iteration 11 completed (1470.741 ms) ======\n====== dec-tree (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 195.778 ms, heap usage 440.791 MB -> 160.224 MB.\n====== dec-tree (apache-spark) [default], iteration 12 completed (1455.447 ms) ======\n====== dec-tree (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 153.178 ms, heap usage 513.991 MB -> 160.372 MB.\n====== dec-tree (apache-spark) [default], iteration 13 completed (1444.480 ms) ======\n====== dec-tree (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 140.368 ms, heap usage 445.814 MB -> 160.435 MB.\n====== dec-tree (apache-spark) [default], iteration 14 completed (1470.615 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 0 started ======\nGC before operation: completed in 151.372 ms, heap usage 172.187 MB -> 143.483 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 534\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 53\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 9\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 7\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 10\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 8\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 16\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 4\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 11\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 22\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 4\tmaxttc = 534\tfailed = 0\ttotal = 4\nSHORT_TRAVERSAL:  successful = 6\tmaxttc = 16\tfailed = 0\ttotal = 6\nSHORT_TRAVERSAL_RO:  successful = 10\tmaxttc = 9\tfailed = 0\ttotal = 10\nOPERATION:  successful = 8\tmaxttc = 22\tfailed = 0\ttotal = 8\nOPERATION_RO:  successful = 12\tmaxttc = 11\tfailed = 0\ttotal = 12\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 59.88 op/s (59.88 op/s including failed)\nElapsed time: 0.67 s\n====== scala-stm-bench7 (scala) [default], iteration 0 completed (2511.480 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 1 started ======\nGC before operation: completed in 135.828 ms, heap usage 523.490 MB -> 142.053 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 470\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 13\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 8\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 14\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 9\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 8\tmaxttc = 534\tfailed = 0\ttotal = 8\nSHORT_TRAVERSAL:  successful = 12\tmaxttc = 16\tfailed = 0\ttotal = 12\nSHORT_TRAVERSAL_RO:  successful = 20\tmaxttc = 9\tfailed = 0\ttotal = 20\nOPERATION:  successful = 16\tmaxttc = 22\tfailed = 0\ttotal = 16\nOPERATION_RO:  successful = 24\tmaxttc = 14\tfailed = 0\ttotal = 24\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 155.64 op/s (155.64 op/s including failed)\nElapsed time: 0.51 s\n====== scala-stm-bench7 (scala) [default], iteration 1 completed (1783.062 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 2 started ======\nGC before operation: completed in 240.384 ms, heap usage 489.877 MB -> 142.054 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 517\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 11\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 8\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 12\tmaxttc = 534\tfailed = 0\ttotal = 12\nSHORT_TRAVERSAL:  successful = 18\tmaxttc = 16\tfailed = 0\ttotal = 18\nSHORT_TRAVERSAL_RO:  successful = 30\tmaxttc = 9\tfailed = 0\ttotal = 30\nOPERATION:  successful = 24\tmaxttc = 22\tfailed = 0\ttotal = 24\nOPERATION_RO:  successful = 36\tmaxttc = 14\tfailed = 0\ttotal = 36\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 220.59 op/s (220.59 op/s including failed)\nElapsed time: 0.54 s\n====== scala-stm-bench7 (scala) [default], iteration 2 completed (1408.246 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 3 started ======\nGC before operation: completed in 136.697 ms, heap usage 506.905 MB -> 142.050 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 496\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 7\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 4\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 16\tmaxttc = 534\tfailed = 0\ttotal = 16\nSHORT_TRAVERSAL:  successful = 24\tmaxttc = 16\tfailed = 0\ttotal = 24\nSHORT_TRAVERSAL_RO:  successful = 40\tmaxttc = 9\tfailed = 0\ttotal = 40\nOPERATION:  successful = 32\tmaxttc = 22\tfailed = 0\ttotal = 32\nOPERATION_RO:  successful = 48\tmaxttc = 14\tfailed = 0\ttotal = 48\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 310.08 op/s (310.08 op/s including failed)\nElapsed time: 0.52 s\n====== scala-stm-bench7 (scala) [default], iteration 3 completed (1342.530 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 4 started ======\nGC before operation: completed in 147.926 ms, heap usage 393.121 MB -> 142.060 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 384\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 7\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 4\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 20\tmaxttc = 534\tfailed = 0\ttotal = 20\nSHORT_TRAVERSAL:  successful = 30\tmaxttc = 16\tfailed = 0\ttotal = 30\nSHORT_TRAVERSAL_RO:  successful = 50\tmaxttc = 9\tfailed = 0\ttotal = 50\nOPERATION:  successful = 40\tmaxttc = 22\tfailed = 0\ttotal = 40\nOPERATION_RO:  successful = 60\tmaxttc = 14\tfailed = 0\ttotal = 60\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 506.33 op/s (506.33 op/s including failed)\nElapsed time: 0.40 s\n====== scala-stm-bench7 (scala) [default], iteration 4 completed (1272.510 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 5 started ======\nGC before operation: completed in 185.238 ms, heap usage 380.599 MB -> 142.044 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 518\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 11\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 6\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 24\tmaxttc = 534\tfailed = 0\ttotal = 24\nSHORT_TRAVERSAL:  successful = 36\tmaxttc = 16\tfailed = 0\ttotal = 36\nSHORT_TRAVERSAL_RO:  successful = 60\tmaxttc = 9\tfailed = 0\ttotal = 60\nOPERATION:  successful = 48\tmaxttc = 22\tfailed = 0\ttotal = 48\nOPERATION_RO:  successful = 72\tmaxttc = 14\tfailed = 0\ttotal = 72\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 441.99 op/s (441.99 op/s including failed)\nElapsed time: 0.54 s\n====== scala-stm-bench7 (scala) [default], iteration 5 completed (1480.501 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 6 started ======\nGC before operation: completed in 153.068 ms, heap usage 507.102 MB -> 142.056 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 463\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 11\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 8\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 8\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 28\tmaxttc = 534\tfailed = 0\ttotal = 28\nSHORT_TRAVERSAL:  successful = 42\tmaxttc = 16\tfailed = 0\ttotal = 42\nSHORT_TRAVERSAL_RO:  successful = 70\tmaxttc = 9\tfailed = 0\ttotal = 70\nOPERATION:  successful = 56\tmaxttc = 22\tfailed = 0\ttotal = 56\nOPERATION_RO:  successful = 84\tmaxttc = 14\tfailed = 0\ttotal = 84\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 577.32 op/s (577.32 op/s including failed)\nElapsed time: 0.49 s\n====== scala-stm-bench7 (scala) [default], iteration 6 completed (1372.866 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 7 started ======\nGC before operation: completed in 147.549 ms, heap usage 507.608 MB -> 142.061 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 483\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 9\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 32\tmaxttc = 534\tfailed = 0\ttotal = 32\nSHORT_TRAVERSAL:  successful = 48\tmaxttc = 16\tfailed = 0\ttotal = 48\nSHORT_TRAVERSAL_RO:  successful = 80\tmaxttc = 9\tfailed = 0\ttotal = 80\nOPERATION:  successful = 64\tmaxttc = 22\tfailed = 0\ttotal = 64\nOPERATION_RO:  successful = 96\tmaxttc = 14\tfailed = 0\ttotal = 96\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 642.57 op/s (642.57 op/s including failed)\nElapsed time: 0.50 s\n====== scala-stm-bench7 (scala) [default], iteration 7 completed (1368.893 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 8 started ======\nGC before operation: completed in 156.075 ms, heap usage 505.601 MB -> 142.044 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 492\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 10\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 4\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 36\tmaxttc = 534\tfailed = 0\ttotal = 36\nSHORT_TRAVERSAL:  successful = 54\tmaxttc = 16\tfailed = 0\ttotal = 54\nSHORT_TRAVERSAL_RO:  successful = 90\tmaxttc = 9\tfailed = 0\ttotal = 90\nOPERATION:  successful = 72\tmaxttc = 22\tfailed = 0\ttotal = 72\nOPERATION_RO:  successful = 108\tmaxttc = 14\tfailed = 0\ttotal = 108\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 705.88 op/s (705.88 op/s including failed)\nElapsed time: 0.51 s\n====== scala-stm-bench7 (scala) [default], iteration 8 completed (1469.754 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 9 started ======\nGC before operation: completed in 137.134 ms, heap usage 507.110 MB -> 142.056 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 474\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 10\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 4\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 40\tmaxttc = 534\tfailed = 0\ttotal = 40\nSHORT_TRAVERSAL:  successful = 60\tmaxttc = 16\tfailed = 0\ttotal = 60\nSHORT_TRAVERSAL_RO:  successful = 100\tmaxttc = 9\tfailed = 0\ttotal = 100\nOPERATION:  successful = 80\tmaxttc = 22\tfailed = 0\ttotal = 80\nOPERATION_RO:  successful = 120\tmaxttc = 14\tfailed = 0\ttotal = 120\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 818.00 op/s (818.00 op/s including failed)\nElapsed time: 0.49 s\n====== scala-stm-bench7 (scala) [default], iteration 9 completed (1497.723 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 10 started ======\nGC before operation: completed in 389.866 ms, heap usage 507.497 MB -> 295.408 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 340\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 11\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 44\tmaxttc = 534\tfailed = 0\ttotal = 44\nSHORT_TRAVERSAL:  successful = 66\tmaxttc = 16\tfailed = 0\ttotal = 66\nSHORT_TRAVERSAL_RO:  successful = 110\tmaxttc = 9\tfailed = 0\ttotal = 110\nOPERATION:  successful = 88\tmaxttc = 22\tfailed = 0\ttotal = 88\nOPERATION_RO:  successful = 132\tmaxttc = 14\tfailed = 0\ttotal = 132\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1229.05 op/s (1229.05 op/s including failed)\nElapsed time: 0.36 s\n====== scala-stm-bench7 (scala) [default], iteration 10 completed (1120.384 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 11 started ======\nGC before operation: completed in 140.313 ms, heap usage 400.744 MB -> 142.052 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 600\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 12\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 48\tmaxttc = 600\tfailed = 0\ttotal = 48\nSHORT_TRAVERSAL:  successful = 72\tmaxttc = 16\tfailed = 0\ttotal = 72\nSHORT_TRAVERSAL_RO:  successful = 120\tmaxttc = 9\tfailed = 0\ttotal = 120\nOPERATION:  successful = 96\tmaxttc = 22\tfailed = 0\ttotal = 96\nOPERATION_RO:  successful = 144\tmaxttc = 14\tfailed = 0\ttotal = 144\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 770.47 op/s (770.47 op/s including failed)\nElapsed time: 0.62 s\n====== scala-stm-bench7 (scala) [default], iteration 11 completed (1498.094 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 12 started ======\nGC before operation: completed in 158.043 ms, heap usage 507.099 MB -> 142.057 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 429\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 6\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 52\tmaxttc = 600\tfailed = 0\ttotal = 52\nSHORT_TRAVERSAL:  successful = 78\tmaxttc = 16\tfailed = 0\ttotal = 78\nSHORT_TRAVERSAL_RO:  successful = 130\tmaxttc = 9\tfailed = 0\ttotal = 130\nOPERATION:  successful = 104\tmaxttc = 22\tfailed = 0\ttotal = 104\nOPERATION_RO:  successful = 156\tmaxttc = 14\tfailed = 0\ttotal = 156\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1184.51 op/s (1184.51 op/s including failed)\nElapsed time: 0.44 s\n====== scala-stm-bench7 (scala) [default], iteration 12 completed (1301.468 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 13 started ======\nGC before operation: completed in 157.214 ms, heap usage 430.109 MB -> 142.044 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 441\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 8\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 7\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 56\tmaxttc = 600\tfailed = 0\ttotal = 56\nSHORT_TRAVERSAL:  successful = 84\tmaxttc = 16\tfailed = 0\ttotal = 84\nSHORT_TRAVERSAL_RO:  successful = 140\tmaxttc = 9\tfailed = 0\ttotal = 140\nOPERATION:  successful = 112\tmaxttc = 22\tfailed = 0\ttotal = 112\nOPERATION_RO:  successful = 168\tmaxttc = 14\tfailed = 0\ttotal = 168\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1244.44 op/s (1244.44 op/s including failed)\nElapsed time: 0.45 s\n====== scala-stm-bench7 (scala) [default], iteration 13 completed (1351.470 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 14 started ======\nGC before operation: completed in 141.475 ms, heap usage 507.530 MB -> 142.049 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 482\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 10\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 60\tmaxttc = 600\tfailed = 0\ttotal = 60\nSHORT_TRAVERSAL:  successful = 90\tmaxttc = 16\tfailed = 0\ttotal = 90\nSHORT_TRAVERSAL_RO:  successful = 150\tmaxttc = 9\tfailed = 0\ttotal = 150\nOPERATION:  successful = 120\tmaxttc = 22\tfailed = 0\ttotal = 120\nOPERATION_RO:  successful = 180\tmaxttc = 14\tfailed = 0\ttotal = 180\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1204.82 op/s (1204.82 op/s including failed)\nElapsed time: 0.50 s\n====== scala-stm-bench7 (scala) [default], iteration 14 completed (1439.994 ms) ======\nNOTE: 'naive-bayes' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== naive-bayes (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 157.559 ms, heap usage 173.043 MB -> 152.727 MB.\n====== naive-bayes (apache-spark) [default], iteration 0 completed (40505.768 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 203.021 ms, heap usage 442.679 MB -> 428.812 MB.\n====== naive-bayes (apache-spark) [default], iteration 1 completed (23313.942 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 184.892 ms, heap usage 455.964 MB -> 429.040 MB.\n====== naive-bayes (apache-spark) [default], iteration 2 completed (22137.040 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 207.126 ms, heap usage 447.901 MB -> 429.105 MB.\n====== naive-bayes (apache-spark) [default], iteration 3 completed (22166.338 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 178.331 ms, heap usage 447.914 MB -> 429.201 MB.\n====== naive-bayes (apache-spark) [default], iteration 4 completed (22021.017 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 188.053 ms, heap usage 531.524 MB -> 429.272 MB.\n====== naive-bayes (apache-spark) [default], iteration 5 completed (21499.434 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 198.890 ms, heap usage 499.768 MB -> 429.344 MB.\n====== naive-bayes (apache-spark) [default], iteration 6 completed (21187.520 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 175.395 ms, heap usage 531.319 MB -> 429.410 MB.\n====== naive-bayes (apache-spark) [default], iteration 7 completed (22419.763 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 282.874 ms, heap usage 492.795 MB -> 429.532 MB.\n====== naive-bayes (apache-spark) [default], iteration 8 completed (21701.999 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 167.999 ms, heap usage 455.434 MB -> 427.583 MB.\n====== naive-bayes (apache-spark) [default], iteration 9 completed (20956.195 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 211.706 ms, heap usage 813.593 MB -> 421.269 MB.\n====== naive-bayes (apache-spark) [default], iteration 10 completed (21463.384 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 165.327 ms, heap usage 542.556 MB -> 422.040 MB.\n====== naive-bayes (apache-spark) [default], iteration 11 completed (20713.293 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 156.444 ms, heap usage 742.313 MB -> 422.032 MB.\n====== naive-bayes (apache-spark) [default], iteration 12 completed (20682.267 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 143.812 ms, heap usage 741.763 MB -> 422.119 MB.\n====== naive-bayes (apache-spark) [default], iteration 13 completed (21341.442 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 154.760 ms, heap usage 448.917 MB -> 422.205 MB.\n====== naive-bayes (apache-spark) [default], iteration 14 completed (21277.786 ms) ======\nNOTE: 'als' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== als (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 170.517 ms, heap usage 342.184 MB -> 167.715 MB.\n====== als (apache-spark) [default], iteration 0 completed (17245.293 ms) ======\n====== als (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 206.106 ms, heap usage 381.163 MB -> 192.447 MB.\n====== als (apache-spark) [default], iteration 1 completed (8374.551 ms) ======\n====== als (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 203.403 ms, heap usage 692.875 MB -> 193.732 MB.\n====== als (apache-spark) [default], iteration 2 completed (7613.825 ms) ======\n====== als (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 197.033 ms, heap usage 770.490 MB -> 194.322 MB.\n====== als (apache-spark) [default], iteration 3 completed (7498.159 ms) ======\n====== als (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 222.854 ms, heap usage 724.610 MB -> 194.842 MB.\n====== als (apache-spark) [default], iteration 4 completed (7222.046 ms) ======\n====== als (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 199.073 ms, heap usage 630.683 MB -> 195.312 MB.\n====== als (apache-spark) [default], iteration 5 completed (6777.255 ms) ======\n====== als (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 196.178 ms, heap usage 670.045 MB -> 195.920 MB.\n====== als (apache-spark) [default], iteration 6 completed (6716.076 ms) ======\n====== als (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 196.405 ms, heap usage 703.914 MB -> 196.465 MB.\n====== als (apache-spark) [default], iteration 7 completed (6706.499 ms) ======\n====== als (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 200.429 ms, heap usage 690.188 MB -> 197.117 MB.\n====== als (apache-spark) [default], iteration 8 completed (6692.376 ms) ======\n====== als (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 206.096 ms, heap usage 703.429 MB -> 197.402 MB.\n====== als (apache-spark) [default], iteration 9 completed (6829.927 ms) ======\n====== als (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 210.566 ms, heap usage 722.096 MB -> 197.832 MB.\n====== als (apache-spark) [default], iteration 10 completed (6464.726 ms) ======\n====== als (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 207.892 ms, heap usage 691.523 MB -> 197.993 MB.\n====== als (apache-spark) [default], iteration 11 completed (6570.330 ms) ======\n====== als (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 235.043 ms, heap usage 728.923 MB -> 198.219 MB.\n====== als (apache-spark) [default], iteration 12 completed (6550.026 ms) ======\n====== als (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 204.262 ms, heap usage 672.212 MB -> 198.515 MB.\n====== als (apache-spark) [default], iteration 13 completed (6596.781 ms) ======\n====== als (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 202.815 ms, heap usage 743.348 MB -> 198.767 MB.\n====== als (apache-spark) [default], iteration 14 completed (6349.995 ms) ======\n====== par-mnemonics (functional) [default], iteration 0 started ======\nGC before operation: completed in 300.165 ms, heap usage 696.077 MB -> 179.147 MB.\n====== par-mnemonics (functional) [default], iteration 0 completed (4479.313 ms) ======\n====== par-mnemonics (functional) [default], iteration 1 started ======\nGC before operation: completed in 193.254 ms, heap usage 336.437 MB -> 179.107 MB.\n====== par-mnemonics (functional) [default], iteration 1 completed (4119.000 ms) ======\n====== par-mnemonics (functional) [default], iteration 2 started ======\nGC before operation: completed in 192.306 ms, heap usage 405.576 MB -> 179.104 MB.\n====== par-mnemonics (functional) [default], iteration 2 completed (4258.146 ms) ======\n====== par-mnemonics (functional) [default], iteration 3 started ======\nGC before operation: completed in 193.004 ms, heap usage 324.174 MB -> 179.108 MB.\n====== par-mnemonics (functional) [default], iteration 3 completed (4452.797 ms) ======\n====== par-mnemonics (functional) [default], iteration 4 started ======\nGC before operation: completed in 177.712 ms, heap usage 419.693 MB -> 179.105 MB.\n====== par-mnemonics (functional) [default], iteration 4 completed (3933.250 ms) ======\n====== par-mnemonics (functional) [default], iteration 5 started ======\nGC before operation: completed in 186.258 ms, heap usage 324.982 MB -> 179.105 MB.\n====== par-mnemonics (functional) [default], iteration 5 completed (4007.080 ms) ======\n====== par-mnemonics (functional) [default], iteration 6 started ======\nGC before operation: completed in 190.779 ms, heap usage 309.104 MB -> 179.121 MB.\n====== par-mnemonics (functional) [default], iteration 6 completed (3953.148 ms) ======\n====== par-mnemonics (functional) [default], iteration 7 started ======\nGC before operation: completed in 204.409 ms, heap usage 312.674 MB -> 179.116 MB.\n====== par-mnemonics (functional) [default], iteration 7 completed (4068.803 ms) ======\n====== par-mnemonics (functional) [default], iteration 8 started ======\nGC before operation: completed in 187.505 ms, heap usage 315.067 MB -> 179.106 MB.\n====== par-mnemonics (functional) [default], iteration 8 completed (3881.191 ms) ======\n====== par-mnemonics (functional) [default], iteration 9 started ======\nGC before operation: completed in 178.405 ms, heap usage 312.898 MB -> 179.106 MB.\n====== par-mnemonics (functional) [default], iteration 9 completed (4171.076 ms) ======\n====== par-mnemonics (functional) [default], iteration 10 started ======\nGC before operation: completed in 188.686 ms, heap usage 312.174 MB -> 179.106 MB.\n====== par-mnemonics (functional) [default], iteration 10 completed (3953.921 ms) ======\n====== par-mnemonics (functional) [default], iteration 11 started ======\nGC before operation: completed in 191.991 ms, heap usage 319.854 MB -> 179.106 MB.\n====== par-mnemonics (functional) [default], iteration 11 completed (4020.731 ms) ======\n====== par-mnemonics (functional) [default], iteration 12 started ======\nGC before operation: completed in 194.977 ms, heap usage 313.371 MB -> 179.106 MB.\n====== par-mnemonics (functional) [default], iteration 12 completed (4155.199 ms) ======\n====== par-mnemonics (functional) [default], iteration 13 started ======\nGC before operation: completed in 186.738 ms, heap usage 349.674 MB -> 179.103 MB.\n====== par-mnemonics (functional) [default], iteration 13 completed (4420.589 ms) ======\n====== par-mnemonics (functional) [default], iteration 14 started ======\nGC before operation: completed in 189.534 ms, heap usage 309.674 MB -> 179.103 MB.\n====== par-mnemonics (functional) [default], iteration 14 completed (3653.633 ms) ======\n"
    },
    "scala-kmeans": {
        "times": [
            339.766,
            226.462,
            224.094,
            222.411,
            223.27,
            224.528,
            231.478,
            229.89,
            259.279,
            235.502,
            235.422,
            339.977,
            222.818,
            220.477,
            222.039
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 111.440 ms, heap usage 193.716 MB -> 76.034 MB.\n====== scrabble (functional) [default], iteration 0 completed (1746.818 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 75.425 ms, heap usage 124.295 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 1 completed (822.799 ms) ======\n====== scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 103.806 ms, heap usage 309.363 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 2 completed (876.688 ms) ======\n====== scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 108.057 ms, heap usage 131.528 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 3 completed (772.422 ms) ======\n====== scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 90.330 ms, heap usage 339.197 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 4 completed (664.922 ms) ======\n====== scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 78.633 ms, heap usage 242.581 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 5 completed (767.926 ms) ======\n====== scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 80.529 ms, heap usage 243.067 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 6 completed (771.953 ms) ======\n====== scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 87.821 ms, heap usage 169.966 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 7 completed (713.175 ms) ======\n====== scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 85.627 ms, heap usage 126.363 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 8 completed (705.321 ms) ======\n====== scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 77.713 ms, heap usage 279.273 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 9 completed (595.178 ms) ======\n====== scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 90.853 ms, heap usage 197.665 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 10 completed (653.981 ms) ======\n====== scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 80.787 ms, heap usage 125.936 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 11 completed (671.613 ms) ======\n====== scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 81.092 ms, heap usage 326.788 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 12 completed (614.500 ms) ======\n====== scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 74.421 ms, heap usage 199.244 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 13 completed (687.061 ms) ======\n====== scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 77.486 ms, heap usage 357.036 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 14 completed (698.120 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 39.864 ms, heap usage 626.576 MB -> 29.596 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (20832.995 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 151.296 ms, heap usage 587.802 MB -> 148.935 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (10726.986 ms) ======\n====== page-rank (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 139.528 ms, heap usage 662.229 MB -> 149.044 MB.\n====== page-rank (apache-spark) [default], iteration 2 completed (10497.012 ms) ======\n====== page-rank (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 145.301 ms, heap usage 620.847 MB -> 149.161 MB.\n====== page-rank (apache-spark) [default], iteration 3 completed (10683.078 ms) ======\n====== page-rank (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 146.272 ms, heap usage 595.956 MB -> 149.275 MB.\n====== page-rank (apache-spark) [default], iteration 4 completed (11158.857 ms) ======\n====== page-rank (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 150.477 ms, heap usage 624.956 MB -> 149.389 MB.\n====== page-rank (apache-spark) [default], iteration 5 completed (10816.748 ms) ======\n====== page-rank (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 152.563 ms, heap usage 475.956 MB -> 149.705 MB.\n====== page-rank (apache-spark) [default], iteration 6 completed (10797.777 ms) ======\n====== page-rank (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 153.431 ms, heap usage 575.956 MB -> 149.630 MB.\n====== page-rank (apache-spark) [default], iteration 7 completed (10320.855 ms) ======\n====== page-rank (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 154.161 ms, heap usage 494.956 MB -> 149.734 MB.\n====== page-rank (apache-spark) [default], iteration 8 completed (10797.875 ms) ======\n====== page-rank (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 159.810 ms, heap usage 685.884 MB -> 149.850 MB.\n====== page-rank (apache-spark) [default], iteration 9 completed (10426.551 ms) ======\n====== page-rank (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 138.119 ms, heap usage 483.136 MB -> 149.929 MB.\n====== page-rank (apache-spark) [default], iteration 10 completed (11319.287 ms) ======\n====== page-rank (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 160.571 ms, heap usage 417.218 MB -> 150.048 MB.\n====== page-rank (apache-spark) [default], iteration 11 completed (10773.541 ms) ======\n====== page-rank (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 153.774 ms, heap usage 591.956 MB -> 150.197 MB.\n====== page-rank (apache-spark) [default], iteration 12 completed (10583.141 ms) ======\n====== page-rank (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 151.297 ms, heap usage 385.309 MB -> 150.212 MB.\n====== page-rank (apache-spark) [default], iteration 13 completed (11225.389 ms) ======\n====== page-rank (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 138.750 ms, heap usage 506.956 MB -> 150.287 MB.\n====== page-rank (apache-spark) [default], iteration 14 completed (11253.752 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 60.640 ms, heap usage 661.207 MB -> 32.216 MB.\n====== future-genetic (functional) [default], iteration 0 completed (14742.129 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 51.821 ms, heap usage 114.841 MB -> 33.158 MB.\n====== future-genetic (functional) [default], iteration 1 completed (11014.493 ms) ======\n====== future-genetic (functional) [default], iteration 2 started ======\nGC before operation: completed in 34.821 ms, heap usage 68.320 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 2 completed (10628.352 ms) ======\n====== future-genetic (functional) [default], iteration 3 started ======\nGC before operation: completed in 38.504 ms, heap usage 57.876 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 3 completed (10722.143 ms) ======\n====== future-genetic (functional) [default], iteration 4 started ======\nGC before operation: completed in 39.692 ms, heap usage 145.206 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 4 completed (10840.012 ms) ======\n====== future-genetic (functional) [default], iteration 5 started ======\nGC before operation: completed in 38.411 ms, heap usage 81.011 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 5 completed (10598.435 ms) ======\n====== future-genetic (functional) [default], iteration 6 started ======\nGC before operation: completed in 40.019 ms, heap usage 144.534 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 6 completed (10786.150 ms) ======\n====== future-genetic (functional) [default], iteration 7 started ======\nGC before operation: completed in 48.015 ms, heap usage 171.419 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 7 completed (10652.683 ms) ======\n====== future-genetic (functional) [default], iteration 8 started ======\nGC before operation: completed in 35.498 ms, heap usage 37.426 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 8 completed (10488.698 ms) ======\n====== future-genetic (functional) [default], iteration 9 started ======\nGC before operation: completed in 42.383 ms, heap usage 130.505 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 9 completed (10682.271 ms) ======\n====== future-genetic (functional) [default], iteration 10 started ======\nGC before operation: completed in 48.742 ms, heap usage 134.970 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 10 completed (10549.840 ms) ======\n====== future-genetic (functional) [default], iteration 11 started ======\nGC before operation: completed in 41.808 ms, heap usage 156.009 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 11 completed (10851.547 ms) ======\n====== future-genetic (functional) [default], iteration 12 started ======\nGC before operation: completed in 40.139 ms, heap usage 163.381 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 12 completed (10940.461 ms) ======\n====== future-genetic (functional) [default], iteration 13 started ======\nGC before operation: completed in 35.048 ms, heap usage 80.372 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 13 completed (10876.099 ms) ======\n====== future-genetic (functional) [default], iteration 14 started ======\nGC before operation: completed in 43.468 ms, heap usage 62.997 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 14 completed (10763.606 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 70.620 ms, heap usage 85.721 MB -> 33.974 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 11\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (23373.227 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 371.313 ms, heap usage 780.679 MB -> 161.200 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (17055.803 ms) ======\n====== akka-uct (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 323.521 ms, heap usage 714.804 MB -> 140.346 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 2 completed (16644.579 ms) ======\n====== akka-uct (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 312.697 ms, heap usage 606.138 MB -> 139.703 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 3 completed (16230.901 ms) ======\n====== akka-uct (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 272.343 ms, heap usage 694.413 MB -> 139.888 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 4 completed (16222.783 ms) ======\n====== akka-uct (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 288.309 ms, heap usage 549.430 MB -> 124.976 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 5 completed (16061.576 ms) ======\n====== akka-uct (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 254.080 ms, heap usage 570.484 MB -> 130.699 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 6 completed (15769.690 ms) ======\n====== akka-uct (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 387.396 ms, heap usage 619.770 MB -> 158.750 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 7 completed (15901.168 ms) ======\n====== akka-uct (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 304.489 ms, heap usage 580.964 MB -> 149.879 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 8 completed (16178.151 ms) ======\n====== akka-uct (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 253.043 ms, heap usage 553.450 MB -> 150.939 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 9 completed (15874.839 ms) ======\n====== akka-uct (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 301.130 ms, heap usage 528.928 MB -> 139.937 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 10 completed (15982.587 ms) ======\n====== akka-uct (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 267.305 ms, heap usage 626.465 MB -> 131.010 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 11 completed (16353.495 ms) ======\n====== akka-uct (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 294.293 ms, heap usage 500.855 MB -> 153.125 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 12 completed (15969.903 ms) ======\n====== akka-uct (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 292.350 ms, heap usage 647.259 MB -> 125.388 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 13 completed (15322.843 ms) ======\n====== akka-uct (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 252.391 ms, heap usage 562.070 MB -> 128.190 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 14 completed (16083.172 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 2 (out of 2) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 134.630 ms, heap usage 463.678 MB -> 85.476 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (22878.805 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 103.188 ms, heap usage 272.080 MB -> 100.040 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (14811.341 ms) ======\n====== movie-lens (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 144.144 ms, heap usage 208.849 MB -> 97.194 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 2 completed (13632.892 ms) ======\n====== movie-lens (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 122.890 ms, heap usage 173.120 MB -> 97.842 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 3 completed (12814.257 ms) ======\n====== movie-lens (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 113.279 ms, heap usage 237.308 MB -> 98.141 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 4 completed (12978.413 ms) ======\n====== movie-lens (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 119.099 ms, heap usage 219.670 MB -> 98.103 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 5 completed (14306.460 ms) ======\n====== movie-lens (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 123.459 ms, heap usage 175.077 MB -> 98.404 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 6 completed (12568.443 ms) ======\n====== movie-lens (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 115.564 ms, heap usage 119.760 MB -> 100.031 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 7 completed (11505.398 ms) ======\n====== movie-lens (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 112.918 ms, heap usage 255.198 MB -> 99.024 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 8 completed (11706.594 ms) ======\n====== movie-lens (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 170.418 ms, heap usage 189.372 MB -> 98.513 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 9 completed (11662.958 ms) ======\n====== movie-lens (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 218.616 ms, heap usage 163.601 MB -> 98.629 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 10 completed (11293.424 ms) ======\n====== movie-lens (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 126.280 ms, heap usage 236.690 MB -> 98.603 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 11 completed (11873.509 ms) ======\n====== movie-lens (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 121.729 ms, heap usage 154.433 MB -> 98.657 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 12 completed (12263.435 ms) ======\n====== movie-lens (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 113.550 ms, heap usage 470.143 MB -> 102.266 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 13 completed (12351.951 ms) ======\n====== movie-lens (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 107.375 ms, heap usage 274.093 MB -> 98.738 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 14 completed (12112.256 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 83.428 ms, heap usage 476.231 MB -> 58.268 MB.\n====== scala-doku (scala) [default], iteration 0 completed (2753.475 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 83.813 ms, heap usage 150.542 MB -> 58.243 MB.\n====== scala-doku (scala) [default], iteration 1 completed (2340.567 ms) ======\n====== scala-doku (scala) [default], iteration 2 started ======\nGC before operation: completed in 88.607 ms, heap usage 121.743 MB -> 58.244 MB.\n====== scala-doku (scala) [default], iteration 2 completed (2269.313 ms) ======\n====== scala-doku (scala) [default], iteration 3 started ======\nGC before operation: completed in 79.133 ms, heap usage 118.244 MB -> 58.245 MB.\n====== scala-doku (scala) [default], iteration 3 completed (1898.181 ms) ======\n====== scala-doku (scala) [default], iteration 4 started ======\nGC before operation: completed in 86.643 ms, heap usage 120.745 MB -> 58.245 MB.\n====== scala-doku (scala) [default], iteration 4 completed (1792.430 ms) ======\n====== scala-doku (scala) [default], iteration 5 started ======\nGC before operation: completed in 77.315 ms, heap usage 119.245 MB -> 58.245 MB.\n====== scala-doku (scala) [default], iteration 5 completed (1786.944 ms) ======\n====== scala-doku (scala) [default], iteration 6 started ======\nGC before operation: completed in 89.168 ms, heap usage 120.745 MB -> 58.245 MB.\n====== scala-doku (scala) [default], iteration 6 completed (1866.830 ms) ======\n====== scala-doku (scala) [default], iteration 7 started ======\nGC before operation: completed in 76.164 ms, heap usage 120.245 MB -> 58.246 MB.\n====== scala-doku (scala) [default], iteration 7 completed (1799.903 ms) ======\n====== scala-doku (scala) [default], iteration 8 started ======\nGC before operation: completed in 79.207 ms, heap usage 119.746 MB -> 58.246 MB.\n====== scala-doku (scala) [default], iteration 8 completed (1782.750 ms) ======\n====== scala-doku (scala) [default], iteration 9 started ======\nGC before operation: completed in 86.288 ms, heap usage 120.246 MB -> 58.247 MB.\n====== scala-doku (scala) [default], iteration 9 completed (1778.745 ms) ======\n====== scala-doku (scala) [default], iteration 10 started ======\nGC before operation: completed in 77.760 ms, heap usage 119.747 MB -> 58.247 MB.\n====== scala-doku (scala) [default], iteration 10 completed (1794.655 ms) ======\n====== scala-doku (scala) [default], iteration 11 started ======\nGC before operation: completed in 92.459 ms, heap usage 119.747 MB -> 58.247 MB.\n====== scala-doku (scala) [default], iteration 11 completed (1818.580 ms) ======\n====== scala-doku (scala) [default], iteration 12 started ======\nGC before operation: completed in 77.984 ms, heap usage 120.247 MB -> 58.247 MB.\n====== scala-doku (scala) [default], iteration 12 completed (1848.215 ms) ======\n====== scala-doku (scala) [default], iteration 13 started ======\nGC before operation: completed in 93.441 ms, heap usage 119.747 MB -> 58.247 MB.\n====== scala-doku (scala) [default], iteration 13 completed (1809.411 ms) ======\n====== scala-doku (scala) [default], iteration 14 started ======\nGC before operation: completed in 82.582 ms, heap usage 119.747 MB -> 58.247 MB.\n====== scala-doku (scala) [default], iteration 14 completed (1803.934 ms) ======\nNOTE: 'chi-square' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== chi-square (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 99.379 ms, heap usage 319.426 MB -> 63.405 MB.\n====== chi-square (apache-spark) [default], iteration 0 completed (5198.635 ms) ======\n====== chi-square (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 217.985 ms, heap usage 339.427 MB -> 209.273 MB.\n====== chi-square (apache-spark) [default], iteration 1 completed (1119.485 ms) ======\n====== chi-square (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 175.933 ms, heap usage 299.968 MB -> 209.346 MB.\n====== chi-square (apache-spark) [default], iteration 2 completed (1038.669 ms) ======\n====== chi-square (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 162.484 ms, heap usage 434.584 MB -> 209.395 MB.\n====== chi-square (apache-spark) [default], iteration 3 completed (988.864 ms) ======\n====== chi-square (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 185.658 ms, heap usage 472.608 MB -> 209.448 MB.\n====== chi-square (apache-spark) [default], iteration 4 completed (1021.110 ms) ======\n====== chi-square (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 161.400 ms, heap usage 424.379 MB -> 209.494 MB.\n====== chi-square (apache-spark) [default], iteration 5 completed (1016.339 ms) ======\n====== chi-square (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 165.385 ms, heap usage 377.344 MB -> 209.638 MB.\n====== chi-square (apache-spark) [default], iteration 6 completed (1044.792 ms) ======\n====== chi-square (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 151.433 ms, heap usage 385.817 MB -> 209.712 MB.\n====== chi-square (apache-spark) [default], iteration 7 completed (892.107 ms) ======\n====== chi-square (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 148.497 ms, heap usage 375.358 MB -> 209.695 MB.\n====== chi-square (apache-spark) [default], iteration 8 completed (912.148 ms) ======\n====== chi-square (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 186.559 ms, heap usage 381.260 MB -> 209.735 MB.\n====== chi-square (apache-spark) [default], iteration 9 completed (916.193 ms) ======\n====== chi-square (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 172.071 ms, heap usage 375.984 MB -> 209.776 MB.\n====== chi-square (apache-spark) [default], iteration 10 completed (706.035 ms) ======\n====== chi-square (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 142.619 ms, heap usage 232.457 MB -> 209.816 MB.\n====== chi-square (apache-spark) [default], iteration 11 completed (764.527 ms) ======\n====== chi-square (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 164.121 ms, heap usage 670.340 MB -> 209.852 MB.\n====== chi-square (apache-spark) [default], iteration 12 completed (858.768 ms) ======\n====== chi-square (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 159.826 ms, heap usage 316.763 MB -> 209.890 MB.\n====== chi-square (apache-spark) [default], iteration 13 completed (862.769 ms) ======\n====== chi-square (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 166.687 ms, heap usage 379.775 MB -> 209.921 MB.\n====== chi-square (apache-spark) [default], iteration 14 completed (703.576 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 196.120 ms, heap usage 470.464 MB -> 147.340 MB.\n====== fj-kmeans (concurrency) [default], iteration 0 completed (8529.473 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 133.696 ms, heap usage 331.615 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 1 completed (7479.812 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 134.063 ms, heap usage 318.922 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 2 completed (7610.407 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 133.778 ms, heap usage 222.341 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 3 completed (7571.793 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 139.456 ms, heap usage 217.309 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 4 completed (7516.518 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 133.370 ms, heap usage 382.616 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 5 completed (8339.655 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 140.237 ms, heap usage 354.831 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 6 completed (7633.795 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 137.960 ms, heap usage 448.031 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 7 completed (7335.928 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 127.427 ms, heap usage 221.957 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 8 completed (7359.912 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 137.302 ms, heap usage 368.915 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 9 completed (8379.108 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 139.433 ms, heap usage 184.312 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 10 completed (8029.337 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 138.797 ms, heap usage 171.657 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 11 completed (7673.166 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 132.845 ms, heap usage 170.035 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 12 completed (7460.127 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 137.480 ms, heap usage 320.158 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 13 completed (7646.174 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 127.475 ms, heap usage 186.440 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 14 completed (7391.153 ms) ======\n====== rx-scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 138.851 ms, heap usage 249.054 MB -> 97.875 MB.\n====== rx-scrabble (functional) [default], iteration 0 completed (539.438 ms) ======\n====== rx-scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 97.806 ms, heap usage 250.872 MB -> 98.124 MB.\n====== rx-scrabble (functional) [default], iteration 1 completed (188.955 ms) ======\n====== rx-scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 121.701 ms, heap usage 240.121 MB -> 98.118 MB.\n====== rx-scrabble (functional) [default], iteration 2 completed (158.740 ms) ======\n====== rx-scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 103.202 ms, heap usage 238.618 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 3 completed (147.979 ms) ======\n====== rx-scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 107.730 ms, heap usage 239.113 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 4 completed (162.112 ms) ======\n====== rx-scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 117.578 ms, heap usage 239.463 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 5 completed (128.936 ms) ======\n====== rx-scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 111.309 ms, heap usage 239.390 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 6 completed (116.055 ms) ======\n====== rx-scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 109.603 ms, heap usage 239.557 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 7 completed (109.336 ms) ======\n====== rx-scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 108.494 ms, heap usage 239.260 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 8 completed (124.372 ms) ======\n====== rx-scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 134.578 ms, heap usage 239.449 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 9 completed (133.649 ms) ======\n====== rx-scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 98.374 ms, heap usage 240.453 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 10 completed (197.918 ms) ======\n====== rx-scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 111.349 ms, heap usage 240.463 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 11 completed (117.228 ms) ======\n====== rx-scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 104.555 ms, heap usage 240.413 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 12 completed (112.849 ms) ======\n====== rx-scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 98.436 ms, heap usage 240.514 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 13 completed (105.866 ms) ======\n====== rx-scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 92.783 ms, heap usage 240.977 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 14 completed (105.587 ms) ======\n====== db-shootout (database) [default], iteration 0 started ======\nGC before operation: completed in 104.333 ms, heap usage 179.823 MB -> 100.606 MB.\n====== db-shootout (database) [default], iteration 0 completed (8779.951 ms) ======\n====== db-shootout (database) [default], iteration 1 started ======\nGC before operation: completed in 107.497 ms, heap usage 242.103 MB -> 110.924 MB.\n====== db-shootout (database) [default], iteration 1 completed (9343.782 ms) ======\n====== db-shootout (database) [default], iteration 2 started ======\nGC before operation: completed in 111.405 ms, heap usage 283.357 MB -> 112.478 MB.\n====== db-shootout (database) [default], iteration 2 completed (7499.305 ms) ======\n====== db-shootout (database) [default], iteration 3 started ======\nGC before operation: completed in 94.995 ms, heap usage 543.589 MB -> 114.314 MB.\n====== db-shootout (database) [default], iteration 3 completed (8724.019 ms) ======\n====== db-shootout (database) [default], iteration 4 started ======\nGC before operation: completed in 101.845 ms, heap usage 213.978 MB -> 159.872 MB.\n====== db-shootout (database) [default], iteration 4 completed (7010.765 ms) ======\n====== db-shootout (database) [default], iteration 5 started ======\nGC before operation: completed in 164.949 ms, heap usage 636.845 MB -> 167.668 MB.\n====== db-shootout (database) [default], iteration 5 completed (7721.156 ms) ======\n====== db-shootout (database) [default], iteration 6 started ======\nGC before operation: completed in 130.093 ms, heap usage 384.324 MB -> 167.486 MB.\n====== db-shootout (database) [default], iteration 6 completed (7647.257 ms) ======\n====== db-shootout (database) [default], iteration 7 started ======\nGC before operation: completed in 109.623 ms, heap usage 282.011 MB -> 175.857 MB.\n====== db-shootout (database) [default], iteration 7 completed (7329.669 ms) ======\n====== db-shootout (database) [default], iteration 8 started ======\nGC before operation: completed in 116.420 ms, heap usage 284.042 MB -> 175.655 MB.\n====== db-shootout (database) [default], iteration 8 completed (7329.711 ms) ======\n====== db-shootout (database) [default], iteration 9 started ======\nGC before operation: completed in 171.716 ms, heap usage 342.792 MB -> 175.912 MB.\n====== db-shootout (database) [default], iteration 9 completed (6774.502 ms) ======\n====== db-shootout (database) [default], iteration 10 started ======\nGC before operation: completed in 173.829 ms, heap usage 293.932 MB -> 175.555 MB.\n====== db-shootout (database) [default], iteration 10 completed (6874.618 ms) ======\n====== db-shootout (database) [default], iteration 11 started ======\nGC before operation: completed in 148.492 ms, heap usage 400.220 MB -> 180.072 MB.\n====== db-shootout (database) [default], iteration 11 completed (7713.732 ms) ======\n====== db-shootout (database) [default], iteration 12 started ======\nGC before operation: completed in 117.617 ms, heap usage 194.930 MB -> 178.866 MB.\n====== db-shootout (database) [default], iteration 12 completed (7466.876 ms) ======\n====== db-shootout (database) [default], iteration 13 started ======\nGC before operation: completed in 129.592 ms, heap usage 290.546 MB -> 179.243 MB.\n====== db-shootout (database) [default], iteration 13 completed (6989.489 ms) ======\n====== db-shootout (database) [default], iteration 14 started ======\nGC before operation: completed in 136.413 ms, heap usage 256.392 MB -> 179.022 MB.\n====== db-shootout (database) [default], iteration 14 completed (6647.630 ms) ======\nCreating graph database...\nLoading resources...\nPopulating database...\nfinagle-http on :39975 spawning 2 client and default number of server workers.\n====== finagle-http (web) [default], iteration 0 started ======\nGC before operation: completed in 98.510 ms, heap usage 612.157 MB -> 111.470 MB.\n====== finagle-http (web) [default], iteration 0 completed (17579.182 ms) ======\n====== finagle-http (web) [default], iteration 1 started ======\nGC before operation: completed in 132.580 ms, heap usage 293.599 MB -> 114.255 MB.\n====== finagle-http (web) [default], iteration 1 completed (7093.193 ms) ======\n====== finagle-http (web) [default], iteration 2 started ======\nGC before operation: completed in 139.872 ms, heap usage 142.229 MB -> 114.940 MB.\n====== finagle-http (web) [default], iteration 2 completed (3467.412 ms) ======\n====== finagle-http (web) [default], iteration 3 started ======\nGC before operation: completed in 102.621 ms, heap usage 139.149 MB -> 115.008 MB.\n====== finagle-http (web) [default], iteration 3 completed (2891.463 ms) ======\n====== finagle-http (web) [default], iteration 4 started ======\nGC before operation: completed in 101.518 ms, heap usage 138.053 MB -> 115.745 MB.\n====== finagle-http (web) [default], iteration 4 completed (3105.065 ms) ======\n====== finagle-http (web) [default], iteration 5 started ======\nGC before operation: completed in 107.976 ms, heap usage 136.110 MB -> 115.075 MB.\n====== finagle-http (web) [default], iteration 5 completed (2695.150 ms) ======\n====== finagle-http (web) [default], iteration 6 started ======\nGC before operation: completed in 112.486 ms, heap usage 136.249 MB -> 115.049 MB.\n====== finagle-http (web) [default], iteration 6 completed (2704.392 ms) ======\n====== finagle-http (web) [default], iteration 7 started ======\nGC before operation: completed in 114.377 ms, heap usage 135.245 MB -> 115.020 MB.\n====== finagle-http (web) [default], iteration 7 completed (2948.935 ms) ======\n====== finagle-http (web) [default], iteration 8 started ======\nGC before operation: completed in 122.053 ms, heap usage 135.666 MB -> 115.051 MB.\n====== finagle-http (web) [default], iteration 8 completed (2778.196 ms) ======\n====== finagle-http (web) [default], iteration 9 started ======\nGC before operation: completed in 109.678 ms, heap usage 136.088 MB -> 115.031 MB.\n====== finagle-http (web) [default], iteration 9 completed (2747.983 ms) ======\n====== finagle-http (web) [default], iteration 10 started ======\nGC before operation: completed in 99.536 ms, heap usage 135.498 MB -> 115.057 MB.\n====== finagle-http (web) [default], iteration 10 completed (2777.183 ms) ======\n====== finagle-http (web) [default], iteration 11 started ======\nGC before operation: completed in 100.476 ms, heap usage 134.090 MB -> 115.060 MB.\n====== finagle-http (web) [default], iteration 11 completed (2950.363 ms) ======\n====== finagle-http (web) [default], iteration 12 started ======\nGC before operation: completed in 101.952 ms, heap usage 134.523 MB -> 115.062 MB.\n====== finagle-http (web) [default], iteration 12 completed (2759.978 ms) ======\n====== finagle-http (web) [default], iteration 13 started ======\nGC before operation: completed in 109.865 ms, heap usage 135.138 MB -> 115.064 MB.\n====== finagle-http (web) [default], iteration 13 completed (2831.653 ms) ======\n====== finagle-http (web) [default], iteration 14 started ======\nGC before operation: completed in 105.948 ms, heap usage 134.532 MB -> 115.044 MB.\n====== finagle-http (web) [default], iteration 14 completed (2711.280 ms) ======\n====== reactors (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 105.850 ms, heap usage 151.704 MB -> 116.190 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 0 completed (17020.896 ms) ======\n====== reactors (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 104.599 ms, heap usage 181.251 MB -> 113.711 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 1 completed (13892.575 ms) ======\n====== reactors (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 95.102 ms, heap usage 174.198 MB -> 113.758 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 2 completed (12554.742 ms) ======\n====== reactors (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 116.893 ms, heap usage 619.954 MB -> 113.748 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 3 completed (13425.368 ms) ======\n====== reactors (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 116.460 ms, heap usage 633.733 MB -> 113.696 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 4 completed (12579.614 ms) ======\n====== reactors (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 101.795 ms, heap usage 678.695 MB -> 113.699 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 5 completed (13161.693 ms) ======\n====== reactors (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 172.615 ms, heap usage 622.470 MB -> 113.699 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 6 completed (12878.519 ms) ======\n====== reactors (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 112.228 ms, heap usage 718.171 MB -> 113.700 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 7 completed (12975.597 ms) ======\n====== reactors (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 98.762 ms, heap usage 716.077 MB -> 113.700 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 8 completed (12770.728 ms) ======\n====== reactors (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 102.126 ms, heap usage 748.105 MB -> 113.710 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 9 completed (13076.609 ms) ======\n====== reactors (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 98.649 ms, heap usage 687.606 MB -> 113.700 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 10 completed (13003.432 ms) ======\n====== reactors (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 101.379 ms, heap usage 732.195 MB -> 113.700 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 11 completed (14004.051 ms) ======\n====== reactors (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 105.159 ms, heap usage 627.924 MB -> 113.700 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 12 completed (13270.736 ms) ======\n====== reactors (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 108.063 ms, heap usage 752.521 MB -> 113.700 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 13 completed (13719.150 ms) ======\n====== reactors (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 122.216 ms, heap usage 634.683 MB -> 113.714 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 14 completed (13878.366 ms) ======\nNOTE: 'dec-tree' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== dec-tree (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 164.697 ms, heap usage 737.360 MB -> 126.493 MB.\n====== dec-tree (apache-spark) [default], iteration 0 completed (10211.732 ms) ======\n====== dec-tree (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 163.548 ms, heap usage 286.590 MB -> 158.107 MB.\n====== dec-tree (apache-spark) [default], iteration 1 completed (2450.505 ms) ======\n====== dec-tree (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 136.565 ms, heap usage 345.940 MB -> 158.492 MB.\n====== dec-tree (apache-spark) [default], iteration 2 completed (2009.743 ms) ======\n====== dec-tree (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 138.685 ms, heap usage 279.501 MB -> 158.716 MB.\n====== dec-tree (apache-spark) [default], iteration 3 completed (1989.605 ms) ======\n====== dec-tree (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 146.026 ms, heap usage 489.120 MB -> 158.915 MB.\n====== dec-tree (apache-spark) [default], iteration 4 completed (1714.918 ms) ======\n====== dec-tree (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 127.943 ms, heap usage 488.970 MB -> 159.140 MB.\n====== dec-tree (apache-spark) [default], iteration 5 completed (1705.237 ms) ======\n====== dec-tree (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 130.962 ms, heap usage 190.728 MB -> 158.870 MB.\n====== dec-tree (apache-spark) [default], iteration 6 completed (1675.410 ms) ======\n====== dec-tree (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 128.752 ms, heap usage 464.234 MB -> 159.494 MB.\n====== dec-tree (apache-spark) [default], iteration 7 completed (1687.319 ms) ======\n====== dec-tree (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 131.642 ms, heap usage 193.742 MB -> 159.062 MB.\n====== dec-tree (apache-spark) [default], iteration 8 completed (1553.852 ms) ======\n====== dec-tree (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 146.296 ms, heap usage 480.448 MB -> 168.014 MB.\n====== dec-tree (apache-spark) [default], iteration 9 completed (1516.748 ms) ======\n====== dec-tree (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 144.013 ms, heap usage 452.343 MB -> 159.895 MB.\n====== dec-tree (apache-spark) [default], iteration 10 completed (1582.871 ms) ======\n====== dec-tree (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 134.653 ms, heap usage 443.551 MB -> 160.089 MB.\n====== dec-tree (apache-spark) [default], iteration 11 completed (1470.741 ms) ======\n====== dec-tree (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 195.778 ms, heap usage 440.791 MB -> 160.224 MB.\n====== dec-tree (apache-spark) [default], iteration 12 completed (1455.447 ms) ======\n====== dec-tree (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 153.178 ms, heap usage 513.991 MB -> 160.372 MB.\n====== dec-tree (apache-spark) [default], iteration 13 completed (1444.480 ms) ======\n====== dec-tree (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 140.368 ms, heap usage 445.814 MB -> 160.435 MB.\n====== dec-tree (apache-spark) [default], iteration 14 completed (1470.615 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 0 started ======\nGC before operation: completed in 151.372 ms, heap usage 172.187 MB -> 143.483 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 534\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 53\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 9\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 7\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 10\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 8\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 16\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 4\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 11\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 22\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 4\tmaxttc = 534\tfailed = 0\ttotal = 4\nSHORT_TRAVERSAL:  successful = 6\tmaxttc = 16\tfailed = 0\ttotal = 6\nSHORT_TRAVERSAL_RO:  successful = 10\tmaxttc = 9\tfailed = 0\ttotal = 10\nOPERATION:  successful = 8\tmaxttc = 22\tfailed = 0\ttotal = 8\nOPERATION_RO:  successful = 12\tmaxttc = 11\tfailed = 0\ttotal = 12\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 59.88 op/s (59.88 op/s including failed)\nElapsed time: 0.67 s\n====== scala-stm-bench7 (scala) [default], iteration 0 completed (2511.480 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 1 started ======\nGC before operation: completed in 135.828 ms, heap usage 523.490 MB -> 142.053 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 470\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 13\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 8\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 14\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 9\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 8\tmaxttc = 534\tfailed = 0\ttotal = 8\nSHORT_TRAVERSAL:  successful = 12\tmaxttc = 16\tfailed = 0\ttotal = 12\nSHORT_TRAVERSAL_RO:  successful = 20\tmaxttc = 9\tfailed = 0\ttotal = 20\nOPERATION:  successful = 16\tmaxttc = 22\tfailed = 0\ttotal = 16\nOPERATION_RO:  successful = 24\tmaxttc = 14\tfailed = 0\ttotal = 24\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 155.64 op/s (155.64 op/s including failed)\nElapsed time: 0.51 s\n====== scala-stm-bench7 (scala) [default], iteration 1 completed (1783.062 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 2 started ======\nGC before operation: completed in 240.384 ms, heap usage 489.877 MB -> 142.054 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 517\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 11\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 8\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 12\tmaxttc = 534\tfailed = 0\ttotal = 12\nSHORT_TRAVERSAL:  successful = 18\tmaxttc = 16\tfailed = 0\ttotal = 18\nSHORT_TRAVERSAL_RO:  successful = 30\tmaxttc = 9\tfailed = 0\ttotal = 30\nOPERATION:  successful = 24\tmaxttc = 22\tfailed = 0\ttotal = 24\nOPERATION_RO:  successful = 36\tmaxttc = 14\tfailed = 0\ttotal = 36\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 220.59 op/s (220.59 op/s including failed)\nElapsed time: 0.54 s\n====== scala-stm-bench7 (scala) [default], iteration 2 completed (1408.246 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 3 started ======\nGC before operation: completed in 136.697 ms, heap usage 506.905 MB -> 142.050 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 496\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 7\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 4\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 16\tmaxttc = 534\tfailed = 0\ttotal = 16\nSHORT_TRAVERSAL:  successful = 24\tmaxttc = 16\tfailed = 0\ttotal = 24\nSHORT_TRAVERSAL_RO:  successful = 40\tmaxttc = 9\tfailed = 0\ttotal = 40\nOPERATION:  successful = 32\tmaxttc = 22\tfailed = 0\ttotal = 32\nOPERATION_RO:  successful = 48\tmaxttc = 14\tfailed = 0\ttotal = 48\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 310.08 op/s (310.08 op/s including failed)\nElapsed time: 0.52 s\n====== scala-stm-bench7 (scala) [default], iteration 3 completed (1342.530 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 4 started ======\nGC before operation: completed in 147.926 ms, heap usage 393.121 MB -> 142.060 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 384\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 7\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 4\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 20\tmaxttc = 534\tfailed = 0\ttotal = 20\nSHORT_TRAVERSAL:  successful = 30\tmaxttc = 16\tfailed = 0\ttotal = 30\nSHORT_TRAVERSAL_RO:  successful = 50\tmaxttc = 9\tfailed = 0\ttotal = 50\nOPERATION:  successful = 40\tmaxttc = 22\tfailed = 0\ttotal = 40\nOPERATION_RO:  successful = 60\tmaxttc = 14\tfailed = 0\ttotal = 60\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 506.33 op/s (506.33 op/s including failed)\nElapsed time: 0.40 s\n====== scala-stm-bench7 (scala) [default], iteration 4 completed (1272.510 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 5 started ======\nGC before operation: completed in 185.238 ms, heap usage 380.599 MB -> 142.044 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 518\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 11\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 6\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 24\tmaxttc = 534\tfailed = 0\ttotal = 24\nSHORT_TRAVERSAL:  successful = 36\tmaxttc = 16\tfailed = 0\ttotal = 36\nSHORT_TRAVERSAL_RO:  successful = 60\tmaxttc = 9\tfailed = 0\ttotal = 60\nOPERATION:  successful = 48\tmaxttc = 22\tfailed = 0\ttotal = 48\nOPERATION_RO:  successful = 72\tmaxttc = 14\tfailed = 0\ttotal = 72\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 441.99 op/s (441.99 op/s including failed)\nElapsed time: 0.54 s\n====== scala-stm-bench7 (scala) [default], iteration 5 completed (1480.501 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 6 started ======\nGC before operation: completed in 153.068 ms, heap usage 507.102 MB -> 142.056 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 463\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 11\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 8\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 8\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 28\tmaxttc = 534\tfailed = 0\ttotal = 28\nSHORT_TRAVERSAL:  successful = 42\tmaxttc = 16\tfailed = 0\ttotal = 42\nSHORT_TRAVERSAL_RO:  successful = 70\tmaxttc = 9\tfailed = 0\ttotal = 70\nOPERATION:  successful = 56\tmaxttc = 22\tfailed = 0\ttotal = 56\nOPERATION_RO:  successful = 84\tmaxttc = 14\tfailed = 0\ttotal = 84\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 577.32 op/s (577.32 op/s including failed)\nElapsed time: 0.49 s\n====== scala-stm-bench7 (scala) [default], iteration 6 completed (1372.866 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 7 started ======\nGC before operation: completed in 147.549 ms, heap usage 507.608 MB -> 142.061 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 483\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 9\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 32\tmaxttc = 534\tfailed = 0\ttotal = 32\nSHORT_TRAVERSAL:  successful = 48\tmaxttc = 16\tfailed = 0\ttotal = 48\nSHORT_TRAVERSAL_RO:  successful = 80\tmaxttc = 9\tfailed = 0\ttotal = 80\nOPERATION:  successful = 64\tmaxttc = 22\tfailed = 0\ttotal = 64\nOPERATION_RO:  successful = 96\tmaxttc = 14\tfailed = 0\ttotal = 96\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 642.57 op/s (642.57 op/s including failed)\nElapsed time: 0.50 s\n====== scala-stm-bench7 (scala) [default], iteration 7 completed (1368.893 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 8 started ======\nGC before operation: completed in 156.075 ms, heap usage 505.601 MB -> 142.044 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 492\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 10\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 4\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 36\tmaxttc = 534\tfailed = 0\ttotal = 36\nSHORT_TRAVERSAL:  successful = 54\tmaxttc = 16\tfailed = 0\ttotal = 54\nSHORT_TRAVERSAL_RO:  successful = 90\tmaxttc = 9\tfailed = 0\ttotal = 90\nOPERATION:  successful = 72\tmaxttc = 22\tfailed = 0\ttotal = 72\nOPERATION_RO:  successful = 108\tmaxttc = 14\tfailed = 0\ttotal = 108\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 705.88 op/s (705.88 op/s including failed)\nElapsed time: 0.51 s\n====== scala-stm-bench7 (scala) [default], iteration 8 completed (1469.754 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 9 started ======\nGC before operation: completed in 137.134 ms, heap usage 507.110 MB -> 142.056 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 474\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 10\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 4\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 40\tmaxttc = 534\tfailed = 0\ttotal = 40\nSHORT_TRAVERSAL:  successful = 60\tmaxttc = 16\tfailed = 0\ttotal = 60\nSHORT_TRAVERSAL_RO:  successful = 100\tmaxttc = 9\tfailed = 0\ttotal = 100\nOPERATION:  successful = 80\tmaxttc = 22\tfailed = 0\ttotal = 80\nOPERATION_RO:  successful = 120\tmaxttc = 14\tfailed = 0\ttotal = 120\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 818.00 op/s (818.00 op/s including failed)\nElapsed time: 0.49 s\n====== scala-stm-bench7 (scala) [default], iteration 9 completed (1497.723 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 10 started ======\nGC before operation: completed in 389.866 ms, heap usage 507.497 MB -> 295.408 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 340\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 11\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 44\tmaxttc = 534\tfailed = 0\ttotal = 44\nSHORT_TRAVERSAL:  successful = 66\tmaxttc = 16\tfailed = 0\ttotal = 66\nSHORT_TRAVERSAL_RO:  successful = 110\tmaxttc = 9\tfailed = 0\ttotal = 110\nOPERATION:  successful = 88\tmaxttc = 22\tfailed = 0\ttotal = 88\nOPERATION_RO:  successful = 132\tmaxttc = 14\tfailed = 0\ttotal = 132\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1229.05 op/s (1229.05 op/s including failed)\nElapsed time: 0.36 s\n====== scala-stm-bench7 (scala) [default], iteration 10 completed (1120.384 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 11 started ======\nGC before operation: completed in 140.313 ms, heap usage 400.744 MB -> 142.052 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 600\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 12\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 48\tmaxttc = 600\tfailed = 0\ttotal = 48\nSHORT_TRAVERSAL:  successful = 72\tmaxttc = 16\tfailed = 0\ttotal = 72\nSHORT_TRAVERSAL_RO:  successful = 120\tmaxttc = 9\tfailed = 0\ttotal = 120\nOPERATION:  successful = 96\tmaxttc = 22\tfailed = 0\ttotal = 96\nOPERATION_RO:  successful = 144\tmaxttc = 14\tfailed = 0\ttotal = 144\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 770.47 op/s (770.47 op/s including failed)\nElapsed time: 0.62 s\n====== scala-stm-bench7 (scala) [default], iteration 11 completed (1498.094 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 12 started ======\nGC before operation: completed in 158.043 ms, heap usage 507.099 MB -> 142.057 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 429\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 6\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 52\tmaxttc = 600\tfailed = 0\ttotal = 52\nSHORT_TRAVERSAL:  successful = 78\tmaxttc = 16\tfailed = 0\ttotal = 78\nSHORT_TRAVERSAL_RO:  successful = 130\tmaxttc = 9\tfailed = 0\ttotal = 130\nOPERATION:  successful = 104\tmaxttc = 22\tfailed = 0\ttotal = 104\nOPERATION_RO:  successful = 156\tmaxttc = 14\tfailed = 0\ttotal = 156\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1184.51 op/s (1184.51 op/s including failed)\nElapsed time: 0.44 s\n====== scala-stm-bench7 (scala) [default], iteration 12 completed (1301.468 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 13 started ======\nGC before operation: completed in 157.214 ms, heap usage 430.109 MB -> 142.044 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 441\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 8\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 7\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 56\tmaxttc = 600\tfailed = 0\ttotal = 56\nSHORT_TRAVERSAL:  successful = 84\tmaxttc = 16\tfailed = 0\ttotal = 84\nSHORT_TRAVERSAL_RO:  successful = 140\tmaxttc = 9\tfailed = 0\ttotal = 140\nOPERATION:  successful = 112\tmaxttc = 22\tfailed = 0\ttotal = 112\nOPERATION_RO:  successful = 168\tmaxttc = 14\tfailed = 0\ttotal = 168\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1244.44 op/s (1244.44 op/s including failed)\nElapsed time: 0.45 s\n====== scala-stm-bench7 (scala) [default], iteration 13 completed (1351.470 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 14 started ======\nGC before operation: completed in 141.475 ms, heap usage 507.530 MB -> 142.049 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 482\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 10\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 60\tmaxttc = 600\tfailed = 0\ttotal = 60\nSHORT_TRAVERSAL:  successful = 90\tmaxttc = 16\tfailed = 0\ttotal = 90\nSHORT_TRAVERSAL_RO:  successful = 150\tmaxttc = 9\tfailed = 0\ttotal = 150\nOPERATION:  successful = 120\tmaxttc = 22\tfailed = 0\ttotal = 120\nOPERATION_RO:  successful = 180\tmaxttc = 14\tfailed = 0\ttotal = 180\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1204.82 op/s (1204.82 op/s including failed)\nElapsed time: 0.50 s\n====== scala-stm-bench7 (scala) [default], iteration 14 completed (1439.994 ms) ======\nNOTE: 'naive-bayes' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== naive-bayes (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 157.559 ms, heap usage 173.043 MB -> 152.727 MB.\n====== naive-bayes (apache-spark) [default], iteration 0 completed (40505.768 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 203.021 ms, heap usage 442.679 MB -> 428.812 MB.\n====== naive-bayes (apache-spark) [default], iteration 1 completed (23313.942 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 184.892 ms, heap usage 455.964 MB -> 429.040 MB.\n====== naive-bayes (apache-spark) [default], iteration 2 completed (22137.040 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 207.126 ms, heap usage 447.901 MB -> 429.105 MB.\n====== naive-bayes (apache-spark) [default], iteration 3 completed (22166.338 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 178.331 ms, heap usage 447.914 MB -> 429.201 MB.\n====== naive-bayes (apache-spark) [default], iteration 4 completed (22021.017 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 188.053 ms, heap usage 531.524 MB -> 429.272 MB.\n====== naive-bayes (apache-spark) [default], iteration 5 completed (21499.434 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 198.890 ms, heap usage 499.768 MB -> 429.344 MB.\n====== naive-bayes (apache-spark) [default], iteration 6 completed (21187.520 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 175.395 ms, heap usage 531.319 MB -> 429.410 MB.\n====== naive-bayes (apache-spark) [default], iteration 7 completed (22419.763 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 282.874 ms, heap usage 492.795 MB -> 429.532 MB.\n====== naive-bayes (apache-spark) [default], iteration 8 completed (21701.999 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 167.999 ms, heap usage 455.434 MB -> 427.583 MB.\n====== naive-bayes (apache-spark) [default], iteration 9 completed (20956.195 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 211.706 ms, heap usage 813.593 MB -> 421.269 MB.\n====== naive-bayes (apache-spark) [default], iteration 10 completed (21463.384 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 165.327 ms, heap usage 542.556 MB -> 422.040 MB.\n====== naive-bayes (apache-spark) [default], iteration 11 completed (20713.293 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 156.444 ms, heap usage 742.313 MB -> 422.032 MB.\n====== naive-bayes (apache-spark) [default], iteration 12 completed (20682.267 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 143.812 ms, heap usage 741.763 MB -> 422.119 MB.\n====== naive-bayes (apache-spark) [default], iteration 13 completed (21341.442 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 154.760 ms, heap usage 448.917 MB -> 422.205 MB.\n====== naive-bayes (apache-spark) [default], iteration 14 completed (21277.786 ms) ======\nNOTE: 'als' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== als (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 170.517 ms, heap usage 342.184 MB -> 167.715 MB.\n====== als (apache-spark) [default], iteration 0 completed (17245.293 ms) ======\n====== als (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 206.106 ms, heap usage 381.163 MB -> 192.447 MB.\n====== als (apache-spark) [default], iteration 1 completed (8374.551 ms) ======\n====== als (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 203.403 ms, heap usage 692.875 MB -> 193.732 MB.\n====== als (apache-spark) [default], iteration 2 completed (7613.825 ms) ======\n====== als (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 197.033 ms, heap usage 770.490 MB -> 194.322 MB.\n====== als (apache-spark) [default], iteration 3 completed (7498.159 ms) ======\n====== als (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 222.854 ms, heap usage 724.610 MB -> 194.842 MB.\n====== als (apache-spark) [default], iteration 4 completed (7222.046 ms) ======\n====== als (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 199.073 ms, heap usage 630.683 MB -> 195.312 MB.\n====== als (apache-spark) [default], iteration 5 completed (6777.255 ms) ======\n====== als (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 196.178 ms, heap usage 670.045 MB -> 195.920 MB.\n====== als (apache-spark) [default], iteration 6 completed (6716.076 ms) ======\n====== als (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 196.405 ms, heap usage 703.914 MB -> 196.465 MB.\n====== als (apache-spark) [default], iteration 7 completed (6706.499 ms) ======\n====== als (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 200.429 ms, heap usage 690.188 MB -> 197.117 MB.\n====== als (apache-spark) [default], iteration 8 completed (6692.376 ms) ======\n====== als (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 206.096 ms, heap usage 703.429 MB -> 197.402 MB.\n====== als (apache-spark) [default], iteration 9 completed (6829.927 ms) ======\n====== als (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 210.566 ms, heap usage 722.096 MB -> 197.832 MB.\n====== als (apache-spark) [default], iteration 10 completed (6464.726 ms) ======\n====== als (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 207.892 ms, heap usage 691.523 MB -> 197.993 MB.\n====== als (apache-spark) [default], iteration 11 completed (6570.330 ms) ======\n====== als (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 235.043 ms, heap usage 728.923 MB -> 198.219 MB.\n====== als (apache-spark) [default], iteration 12 completed (6550.026 ms) ======\n====== als (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 204.262 ms, heap usage 672.212 MB -> 198.515 MB.\n====== als (apache-spark) [default], iteration 13 completed (6596.781 ms) ======\n====== als (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 202.815 ms, heap usage 743.348 MB -> 198.767 MB.\n====== als (apache-spark) [default], iteration 14 completed (6349.995 ms) ======\n====== par-mnemonics (functional) [default], iteration 0 started ======\nGC before operation: completed in 300.165 ms, heap usage 696.077 MB -> 179.147 MB.\n====== par-mnemonics (functional) [default], iteration 0 completed (4479.313 ms) ======\n====== par-mnemonics (functional) [default], iteration 1 started ======\nGC before operation: completed in 193.254 ms, heap usage 336.437 MB -> 179.107 MB.\n====== par-mnemonics (functional) [default], iteration 1 completed (4119.000 ms) ======\n====== par-mnemonics (functional) [default], iteration 2 started ======\nGC before operation: completed in 192.306 ms, heap usage 405.576 MB -> 179.104 MB.\n====== par-mnemonics (functional) [default], iteration 2 completed (4258.146 ms) ======\n====== par-mnemonics (functional) [default], iteration 3 started ======\nGC before operation: completed in 193.004 ms, heap usage 324.174 MB -> 179.108 MB.\n====== par-mnemonics (functional) [default], iteration 3 completed (4452.797 ms) ======\n====== par-mnemonics (functional) [default], iteration 4 started ======\nGC before operation: completed in 177.712 ms, heap usage 419.693 MB -> 179.105 MB.\n====== par-mnemonics (functional) [default], iteration 4 completed (3933.250 ms) ======\n====== par-mnemonics (functional) [default], iteration 5 started ======\nGC before operation: completed in 186.258 ms, heap usage 324.982 MB -> 179.105 MB.\n====== par-mnemonics (functional) [default], iteration 5 completed (4007.080 ms) ======\n====== par-mnemonics (functional) [default], iteration 6 started ======\nGC before operation: completed in 190.779 ms, heap usage 309.104 MB -> 179.121 MB.\n====== par-mnemonics (functional) [default], iteration 6 completed (3953.148 ms) ======\n====== par-mnemonics (functional) [default], iteration 7 started ======\nGC before operation: completed in 204.409 ms, heap usage 312.674 MB -> 179.116 MB.\n====== par-mnemonics (functional) [default], iteration 7 completed (4068.803 ms) ======\n====== par-mnemonics (functional) [default], iteration 8 started ======\nGC before operation: completed in 187.505 ms, heap usage 315.067 MB -> 179.106 MB.\n====== par-mnemonics (functional) [default], iteration 8 completed (3881.191 ms) ======\n====== par-mnemonics (functional) [default], iteration 9 started ======\nGC before operation: completed in 178.405 ms, heap usage 312.898 MB -> 179.106 MB.\n====== par-mnemonics (functional) [default], iteration 9 completed (4171.076 ms) ======\n====== par-mnemonics (functional) [default], iteration 10 started ======\nGC before operation: completed in 188.686 ms, heap usage 312.174 MB -> 179.106 MB.\n====== par-mnemonics (functional) [default], iteration 10 completed (3953.921 ms) ======\n====== par-mnemonics (functional) [default], iteration 11 started ======\nGC before operation: completed in 191.991 ms, heap usage 319.854 MB -> 179.106 MB.\n====== par-mnemonics (functional) [default], iteration 11 completed (4020.731 ms) ======\n====== par-mnemonics (functional) [default], iteration 12 started ======\nGC before operation: completed in 194.977 ms, heap usage 313.371 MB -> 179.106 MB.\n====== par-mnemonics (functional) [default], iteration 12 completed (4155.199 ms) ======\n====== par-mnemonics (functional) [default], iteration 13 started ======\nGC before operation: completed in 186.738 ms, heap usage 349.674 MB -> 179.103 MB.\n====== par-mnemonics (functional) [default], iteration 13 completed (4420.589 ms) ======\n====== par-mnemonics (functional) [default], iteration 14 started ======\nGC before operation: completed in 189.534 ms, heap usage 309.674 MB -> 179.103 MB.\n====== par-mnemonics (functional) [default], iteration 14 completed (3653.633 ms) ======\n====== scala-kmeans (scala) [default], iteration 0 started ======\nGC before operation: completed in 259.501 ms, heap usage 343.603 MB -> 201.421 MB.\n====== scala-kmeans (scala) [default], iteration 0 completed (339.766 ms) ======\n====== scala-kmeans (scala) [default], iteration 1 started ======\nGC before operation: completed in 202.460 ms, heap usage 256.921 MB -> 201.453 MB.\n====== scala-kmeans (scala) [default], iteration 1 completed (226.462 ms) ======\n====== scala-kmeans (scala) [default], iteration 2 started ======\nGC before operation: completed in 202.113 ms, heap usage 323.453 MB -> 201.453 MB.\n====== scala-kmeans (scala) [default], iteration 2 completed (224.094 ms) ======\n====== scala-kmeans (scala) [default], iteration 3 started ======\nGC before operation: completed in 183.749 ms, heap usage 322.953 MB -> 201.453 MB.\n====== scala-kmeans (scala) [default], iteration 3 completed (222.411 ms) ======\n====== scala-kmeans (scala) [default], iteration 4 started ======\nGC before operation: completed in 202.302 ms, heap usage 322.953 MB -> 201.453 MB.\n====== scala-kmeans (scala) [default], iteration 4 completed (223.270 ms) ======\n====== scala-kmeans (scala) [default], iteration 5 started ======\nGC before operation: completed in 202.640 ms, heap usage 322.953 MB -> 201.455 MB.\n====== scala-kmeans (scala) [default], iteration 5 completed (224.528 ms) ======\n====== scala-kmeans (scala) [default], iteration 6 started ======\nGC before operation: completed in 188.615 ms, heap usage 322.953 MB -> 201.453 MB.\n====== scala-kmeans (scala) [default], iteration 6 completed (231.478 ms) ======\n====== scala-kmeans (scala) [default], iteration 7 started ======\nGC before operation: completed in 206.202 ms, heap usage 322.953 MB -> 201.472 MB.\n====== scala-kmeans (scala) [default], iteration 7 completed (229.890 ms) ======\n====== scala-kmeans (scala) [default], iteration 8 started ======\nGC before operation: completed in 201.694 ms, heap usage 322.954 MB -> 201.454 MB.\n====== scala-kmeans (scala) [default], iteration 8 completed (259.279 ms) ======\n====== scala-kmeans (scala) [default], iteration 9 started ======\nGC before operation: completed in 185.242 ms, heap usage 332.551 MB -> 201.483 MB.\n====== scala-kmeans (scala) [default], iteration 9 completed (235.502 ms) ======\n====== scala-kmeans (scala) [default], iteration 10 started ======\nGC before operation: completed in 205.981 ms, heap usage 323.461 MB -> 201.461 MB.\n====== scala-kmeans (scala) [default], iteration 10 completed (235.422 ms) ======\n====== scala-kmeans (scala) [default], iteration 11 started ======\nGC before operation: completed in 205.946 ms, heap usage 322.961 MB -> 201.489 MB.\n====== scala-kmeans (scala) [default], iteration 11 completed (339.977 ms) ======\n====== scala-kmeans (scala) [default], iteration 12 started ======\nGC before operation: completed in 200.922 ms, heap usage 330.961 MB -> 201.462 MB.\n====== scala-kmeans (scala) [default], iteration 12 completed (222.818 ms) ======\n====== scala-kmeans (scala) [default], iteration 13 started ======\nGC before operation: completed in 192.781 ms, heap usage 322.962 MB -> 201.463 MB.\n====== scala-kmeans (scala) [default], iteration 13 completed (220.477 ms) ======\n====== scala-kmeans (scala) [default], iteration 14 started ======\nGC before operation: completed in 202.779 ms, heap usage 322.963 MB -> 201.463 MB.\n====== scala-kmeans (scala) [default], iteration 14 completed (222.039 ms) ======\n"
    },
    "philosophers": {
        "times": [
            1409.944,
            604.601,
            741.321,
            757.745,
            659.879,
            761.913,
            582.194,
            719.67,
            711.867,
            668.165,
            566.751,
            656.239,
            612.935,
            607.424,
            767.034
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 111.440 ms, heap usage 193.716 MB -> 76.034 MB.\n====== scrabble (functional) [default], iteration 0 completed (1746.818 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 75.425 ms, heap usage 124.295 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 1 completed (822.799 ms) ======\n====== scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 103.806 ms, heap usage 309.363 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 2 completed (876.688 ms) ======\n====== scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 108.057 ms, heap usage 131.528 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 3 completed (772.422 ms) ======\n====== scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 90.330 ms, heap usage 339.197 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 4 completed (664.922 ms) ======\n====== scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 78.633 ms, heap usage 242.581 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 5 completed (767.926 ms) ======\n====== scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 80.529 ms, heap usage 243.067 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 6 completed (771.953 ms) ======\n====== scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 87.821 ms, heap usage 169.966 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 7 completed (713.175 ms) ======\n====== scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 85.627 ms, heap usage 126.363 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 8 completed (705.321 ms) ======\n====== scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 77.713 ms, heap usage 279.273 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 9 completed (595.178 ms) ======\n====== scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 90.853 ms, heap usage 197.665 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 10 completed (653.981 ms) ======\n====== scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 80.787 ms, heap usage 125.936 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 11 completed (671.613 ms) ======\n====== scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 81.092 ms, heap usage 326.788 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 12 completed (614.500 ms) ======\n====== scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 74.421 ms, heap usage 199.244 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 13 completed (687.061 ms) ======\n====== scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 77.486 ms, heap usage 357.036 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 14 completed (698.120 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 39.864 ms, heap usage 626.576 MB -> 29.596 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (20832.995 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 151.296 ms, heap usage 587.802 MB -> 148.935 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (10726.986 ms) ======\n====== page-rank (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 139.528 ms, heap usage 662.229 MB -> 149.044 MB.\n====== page-rank (apache-spark) [default], iteration 2 completed (10497.012 ms) ======\n====== page-rank (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 145.301 ms, heap usage 620.847 MB -> 149.161 MB.\n====== page-rank (apache-spark) [default], iteration 3 completed (10683.078 ms) ======\n====== page-rank (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 146.272 ms, heap usage 595.956 MB -> 149.275 MB.\n====== page-rank (apache-spark) [default], iteration 4 completed (11158.857 ms) ======\n====== page-rank (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 150.477 ms, heap usage 624.956 MB -> 149.389 MB.\n====== page-rank (apache-spark) [default], iteration 5 completed (10816.748 ms) ======\n====== page-rank (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 152.563 ms, heap usage 475.956 MB -> 149.705 MB.\n====== page-rank (apache-spark) [default], iteration 6 completed (10797.777 ms) ======\n====== page-rank (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 153.431 ms, heap usage 575.956 MB -> 149.630 MB.\n====== page-rank (apache-spark) [default], iteration 7 completed (10320.855 ms) ======\n====== page-rank (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 154.161 ms, heap usage 494.956 MB -> 149.734 MB.\n====== page-rank (apache-spark) [default], iteration 8 completed (10797.875 ms) ======\n====== page-rank (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 159.810 ms, heap usage 685.884 MB -> 149.850 MB.\n====== page-rank (apache-spark) [default], iteration 9 completed (10426.551 ms) ======\n====== page-rank (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 138.119 ms, heap usage 483.136 MB -> 149.929 MB.\n====== page-rank (apache-spark) [default], iteration 10 completed (11319.287 ms) ======\n====== page-rank (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 160.571 ms, heap usage 417.218 MB -> 150.048 MB.\n====== page-rank (apache-spark) [default], iteration 11 completed (10773.541 ms) ======\n====== page-rank (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 153.774 ms, heap usage 591.956 MB -> 150.197 MB.\n====== page-rank (apache-spark) [default], iteration 12 completed (10583.141 ms) ======\n====== page-rank (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 151.297 ms, heap usage 385.309 MB -> 150.212 MB.\n====== page-rank (apache-spark) [default], iteration 13 completed (11225.389 ms) ======\n====== page-rank (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 138.750 ms, heap usage 506.956 MB -> 150.287 MB.\n====== page-rank (apache-spark) [default], iteration 14 completed (11253.752 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 60.640 ms, heap usage 661.207 MB -> 32.216 MB.\n====== future-genetic (functional) [default], iteration 0 completed (14742.129 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 51.821 ms, heap usage 114.841 MB -> 33.158 MB.\n====== future-genetic (functional) [default], iteration 1 completed (11014.493 ms) ======\n====== future-genetic (functional) [default], iteration 2 started ======\nGC before operation: completed in 34.821 ms, heap usage 68.320 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 2 completed (10628.352 ms) ======\n====== future-genetic (functional) [default], iteration 3 started ======\nGC before operation: completed in 38.504 ms, heap usage 57.876 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 3 completed (10722.143 ms) ======\n====== future-genetic (functional) [default], iteration 4 started ======\nGC before operation: completed in 39.692 ms, heap usage 145.206 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 4 completed (10840.012 ms) ======\n====== future-genetic (functional) [default], iteration 5 started ======\nGC before operation: completed in 38.411 ms, heap usage 81.011 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 5 completed (10598.435 ms) ======\n====== future-genetic (functional) [default], iteration 6 started ======\nGC before operation: completed in 40.019 ms, heap usage 144.534 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 6 completed (10786.150 ms) ======\n====== future-genetic (functional) [default], iteration 7 started ======\nGC before operation: completed in 48.015 ms, heap usage 171.419 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 7 completed (10652.683 ms) ======\n====== future-genetic (functional) [default], iteration 8 started ======\nGC before operation: completed in 35.498 ms, heap usage 37.426 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 8 completed (10488.698 ms) ======\n====== future-genetic (functional) [default], iteration 9 started ======\nGC before operation: completed in 42.383 ms, heap usage 130.505 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 9 completed (10682.271 ms) ======\n====== future-genetic (functional) [default], iteration 10 started ======\nGC before operation: completed in 48.742 ms, heap usage 134.970 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 10 completed (10549.840 ms) ======\n====== future-genetic (functional) [default], iteration 11 started ======\nGC before operation: completed in 41.808 ms, heap usage 156.009 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 11 completed (10851.547 ms) ======\n====== future-genetic (functional) [default], iteration 12 started ======\nGC before operation: completed in 40.139 ms, heap usage 163.381 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 12 completed (10940.461 ms) ======\n====== future-genetic (functional) [default], iteration 13 started ======\nGC before operation: completed in 35.048 ms, heap usage 80.372 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 13 completed (10876.099 ms) ======\n====== future-genetic (functional) [default], iteration 14 started ======\nGC before operation: completed in 43.468 ms, heap usage 62.997 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 14 completed (10763.606 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 70.620 ms, heap usage 85.721 MB -> 33.974 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 11\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (23373.227 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 371.313 ms, heap usage 780.679 MB -> 161.200 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (17055.803 ms) ======\n====== akka-uct (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 323.521 ms, heap usage 714.804 MB -> 140.346 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 2 completed (16644.579 ms) ======\n====== akka-uct (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 312.697 ms, heap usage 606.138 MB -> 139.703 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 3 completed (16230.901 ms) ======\n====== akka-uct (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 272.343 ms, heap usage 694.413 MB -> 139.888 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 4 completed (16222.783 ms) ======\n====== akka-uct (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 288.309 ms, heap usage 549.430 MB -> 124.976 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 5 completed (16061.576 ms) ======\n====== akka-uct (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 254.080 ms, heap usage 570.484 MB -> 130.699 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 6 completed (15769.690 ms) ======\n====== akka-uct (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 387.396 ms, heap usage 619.770 MB -> 158.750 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 7 completed (15901.168 ms) ======\n====== akka-uct (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 304.489 ms, heap usage 580.964 MB -> 149.879 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 8 completed (16178.151 ms) ======\n====== akka-uct (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 253.043 ms, heap usage 553.450 MB -> 150.939 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 9 completed (15874.839 ms) ======\n====== akka-uct (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 301.130 ms, heap usage 528.928 MB -> 139.937 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 10 completed (15982.587 ms) ======\n====== akka-uct (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 267.305 ms, heap usage 626.465 MB -> 131.010 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 11 completed (16353.495 ms) ======\n====== akka-uct (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 294.293 ms, heap usage 500.855 MB -> 153.125 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 12 completed (15969.903 ms) ======\n====== akka-uct (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 292.350 ms, heap usage 647.259 MB -> 125.388 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 13 completed (15322.843 ms) ======\n====== akka-uct (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 252.391 ms, heap usage 562.070 MB -> 128.190 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 14 completed (16083.172 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 2 (out of 2) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 134.630 ms, heap usage 463.678 MB -> 85.476 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (22878.805 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 103.188 ms, heap usage 272.080 MB -> 100.040 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (14811.341 ms) ======\n====== movie-lens (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 144.144 ms, heap usage 208.849 MB -> 97.194 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 2 completed (13632.892 ms) ======\n====== movie-lens (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 122.890 ms, heap usage 173.120 MB -> 97.842 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 3 completed (12814.257 ms) ======\n====== movie-lens (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 113.279 ms, heap usage 237.308 MB -> 98.141 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 4 completed (12978.413 ms) ======\n====== movie-lens (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 119.099 ms, heap usage 219.670 MB -> 98.103 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 5 completed (14306.460 ms) ======\n====== movie-lens (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 123.459 ms, heap usage 175.077 MB -> 98.404 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 6 completed (12568.443 ms) ======\n====== movie-lens (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 115.564 ms, heap usage 119.760 MB -> 100.031 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 7 completed (11505.398 ms) ======\n====== movie-lens (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 112.918 ms, heap usage 255.198 MB -> 99.024 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 8 completed (11706.594 ms) ======\n====== movie-lens (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 170.418 ms, heap usage 189.372 MB -> 98.513 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 9 completed (11662.958 ms) ======\n====== movie-lens (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 218.616 ms, heap usage 163.601 MB -> 98.629 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 10 completed (11293.424 ms) ======\n====== movie-lens (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 126.280 ms, heap usage 236.690 MB -> 98.603 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 11 completed (11873.509 ms) ======\n====== movie-lens (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 121.729 ms, heap usage 154.433 MB -> 98.657 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 12 completed (12263.435 ms) ======\n====== movie-lens (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 113.550 ms, heap usage 470.143 MB -> 102.266 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 13 completed (12351.951 ms) ======\n====== movie-lens (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 107.375 ms, heap usage 274.093 MB -> 98.738 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 14 completed (12112.256 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 83.428 ms, heap usage 476.231 MB -> 58.268 MB.\n====== scala-doku (scala) [default], iteration 0 completed (2753.475 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 83.813 ms, heap usage 150.542 MB -> 58.243 MB.\n====== scala-doku (scala) [default], iteration 1 completed (2340.567 ms) ======\n====== scala-doku (scala) [default], iteration 2 started ======\nGC before operation: completed in 88.607 ms, heap usage 121.743 MB -> 58.244 MB.\n====== scala-doku (scala) [default], iteration 2 completed (2269.313 ms) ======\n====== scala-doku (scala) [default], iteration 3 started ======\nGC before operation: completed in 79.133 ms, heap usage 118.244 MB -> 58.245 MB.\n====== scala-doku (scala) [default], iteration 3 completed (1898.181 ms) ======\n====== scala-doku (scala) [default], iteration 4 started ======\nGC before operation: completed in 86.643 ms, heap usage 120.745 MB -> 58.245 MB.\n====== scala-doku (scala) [default], iteration 4 completed (1792.430 ms) ======\n====== scala-doku (scala) [default], iteration 5 started ======\nGC before operation: completed in 77.315 ms, heap usage 119.245 MB -> 58.245 MB.\n====== scala-doku (scala) [default], iteration 5 completed (1786.944 ms) ======\n====== scala-doku (scala) [default], iteration 6 started ======\nGC before operation: completed in 89.168 ms, heap usage 120.745 MB -> 58.245 MB.\n====== scala-doku (scala) [default], iteration 6 completed (1866.830 ms) ======\n====== scala-doku (scala) [default], iteration 7 started ======\nGC before operation: completed in 76.164 ms, heap usage 120.245 MB -> 58.246 MB.\n====== scala-doku (scala) [default], iteration 7 completed (1799.903 ms) ======\n====== scala-doku (scala) [default], iteration 8 started ======\nGC before operation: completed in 79.207 ms, heap usage 119.746 MB -> 58.246 MB.\n====== scala-doku (scala) [default], iteration 8 completed (1782.750 ms) ======\n====== scala-doku (scala) [default], iteration 9 started ======\nGC before operation: completed in 86.288 ms, heap usage 120.246 MB -> 58.247 MB.\n====== scala-doku (scala) [default], iteration 9 completed (1778.745 ms) ======\n====== scala-doku (scala) [default], iteration 10 started ======\nGC before operation: completed in 77.760 ms, heap usage 119.747 MB -> 58.247 MB.\n====== scala-doku (scala) [default], iteration 10 completed (1794.655 ms) ======\n====== scala-doku (scala) [default], iteration 11 started ======\nGC before operation: completed in 92.459 ms, heap usage 119.747 MB -> 58.247 MB.\n====== scala-doku (scala) [default], iteration 11 completed (1818.580 ms) ======\n====== scala-doku (scala) [default], iteration 12 started ======\nGC before operation: completed in 77.984 ms, heap usage 120.247 MB -> 58.247 MB.\n====== scala-doku (scala) [default], iteration 12 completed (1848.215 ms) ======\n====== scala-doku (scala) [default], iteration 13 started ======\nGC before operation: completed in 93.441 ms, heap usage 119.747 MB -> 58.247 MB.\n====== scala-doku (scala) [default], iteration 13 completed (1809.411 ms) ======\n====== scala-doku (scala) [default], iteration 14 started ======\nGC before operation: completed in 82.582 ms, heap usage 119.747 MB -> 58.247 MB.\n====== scala-doku (scala) [default], iteration 14 completed (1803.934 ms) ======\nNOTE: 'chi-square' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== chi-square (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 99.379 ms, heap usage 319.426 MB -> 63.405 MB.\n====== chi-square (apache-spark) [default], iteration 0 completed (5198.635 ms) ======\n====== chi-square (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 217.985 ms, heap usage 339.427 MB -> 209.273 MB.\n====== chi-square (apache-spark) [default], iteration 1 completed (1119.485 ms) ======\n====== chi-square (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 175.933 ms, heap usage 299.968 MB -> 209.346 MB.\n====== chi-square (apache-spark) [default], iteration 2 completed (1038.669 ms) ======\n====== chi-square (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 162.484 ms, heap usage 434.584 MB -> 209.395 MB.\n====== chi-square (apache-spark) [default], iteration 3 completed (988.864 ms) ======\n====== chi-square (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 185.658 ms, heap usage 472.608 MB -> 209.448 MB.\n====== chi-square (apache-spark) [default], iteration 4 completed (1021.110 ms) ======\n====== chi-square (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 161.400 ms, heap usage 424.379 MB -> 209.494 MB.\n====== chi-square (apache-spark) [default], iteration 5 completed (1016.339 ms) ======\n====== chi-square (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 165.385 ms, heap usage 377.344 MB -> 209.638 MB.\n====== chi-square (apache-spark) [default], iteration 6 completed (1044.792 ms) ======\n====== chi-square (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 151.433 ms, heap usage 385.817 MB -> 209.712 MB.\n====== chi-square (apache-spark) [default], iteration 7 completed (892.107 ms) ======\n====== chi-square (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 148.497 ms, heap usage 375.358 MB -> 209.695 MB.\n====== chi-square (apache-spark) [default], iteration 8 completed (912.148 ms) ======\n====== chi-square (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 186.559 ms, heap usage 381.260 MB -> 209.735 MB.\n====== chi-square (apache-spark) [default], iteration 9 completed (916.193 ms) ======\n====== chi-square (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 172.071 ms, heap usage 375.984 MB -> 209.776 MB.\n====== chi-square (apache-spark) [default], iteration 10 completed (706.035 ms) ======\n====== chi-square (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 142.619 ms, heap usage 232.457 MB -> 209.816 MB.\n====== chi-square (apache-spark) [default], iteration 11 completed (764.527 ms) ======\n====== chi-square (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 164.121 ms, heap usage 670.340 MB -> 209.852 MB.\n====== chi-square (apache-spark) [default], iteration 12 completed (858.768 ms) ======\n====== chi-square (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 159.826 ms, heap usage 316.763 MB -> 209.890 MB.\n====== chi-square (apache-spark) [default], iteration 13 completed (862.769 ms) ======\n====== chi-square (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 166.687 ms, heap usage 379.775 MB -> 209.921 MB.\n====== chi-square (apache-spark) [default], iteration 14 completed (703.576 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 196.120 ms, heap usage 470.464 MB -> 147.340 MB.\n====== fj-kmeans (concurrency) [default], iteration 0 completed (8529.473 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 133.696 ms, heap usage 331.615 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 1 completed (7479.812 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 134.063 ms, heap usage 318.922 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 2 completed (7610.407 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 133.778 ms, heap usage 222.341 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 3 completed (7571.793 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 139.456 ms, heap usage 217.309 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 4 completed (7516.518 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 133.370 ms, heap usage 382.616 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 5 completed (8339.655 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 140.237 ms, heap usage 354.831 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 6 completed (7633.795 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 137.960 ms, heap usage 448.031 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 7 completed (7335.928 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 127.427 ms, heap usage 221.957 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 8 completed (7359.912 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 137.302 ms, heap usage 368.915 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 9 completed (8379.108 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 139.433 ms, heap usage 184.312 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 10 completed (8029.337 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 138.797 ms, heap usage 171.657 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 11 completed (7673.166 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 132.845 ms, heap usage 170.035 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 12 completed (7460.127 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 137.480 ms, heap usage 320.158 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 13 completed (7646.174 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 127.475 ms, heap usage 186.440 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 14 completed (7391.153 ms) ======\n====== rx-scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 138.851 ms, heap usage 249.054 MB -> 97.875 MB.\n====== rx-scrabble (functional) [default], iteration 0 completed (539.438 ms) ======\n====== rx-scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 97.806 ms, heap usage 250.872 MB -> 98.124 MB.\n====== rx-scrabble (functional) [default], iteration 1 completed (188.955 ms) ======\n====== rx-scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 121.701 ms, heap usage 240.121 MB -> 98.118 MB.\n====== rx-scrabble (functional) [default], iteration 2 completed (158.740 ms) ======\n====== rx-scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 103.202 ms, heap usage 238.618 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 3 completed (147.979 ms) ======\n====== rx-scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 107.730 ms, heap usage 239.113 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 4 completed (162.112 ms) ======\n====== rx-scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 117.578 ms, heap usage 239.463 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 5 completed (128.936 ms) ======\n====== rx-scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 111.309 ms, heap usage 239.390 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 6 completed (116.055 ms) ======\n====== rx-scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 109.603 ms, heap usage 239.557 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 7 completed (109.336 ms) ======\n====== rx-scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 108.494 ms, heap usage 239.260 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 8 completed (124.372 ms) ======\n====== rx-scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 134.578 ms, heap usage 239.449 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 9 completed (133.649 ms) ======\n====== rx-scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 98.374 ms, heap usage 240.453 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 10 completed (197.918 ms) ======\n====== rx-scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 111.349 ms, heap usage 240.463 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 11 completed (117.228 ms) ======\n====== rx-scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 104.555 ms, heap usage 240.413 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 12 completed (112.849 ms) ======\n====== rx-scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 98.436 ms, heap usage 240.514 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 13 completed (105.866 ms) ======\n====== rx-scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 92.783 ms, heap usage 240.977 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 14 completed (105.587 ms) ======\n====== db-shootout (database) [default], iteration 0 started ======\nGC before operation: completed in 104.333 ms, heap usage 179.823 MB -> 100.606 MB.\n====== db-shootout (database) [default], iteration 0 completed (8779.951 ms) ======\n====== db-shootout (database) [default], iteration 1 started ======\nGC before operation: completed in 107.497 ms, heap usage 242.103 MB -> 110.924 MB.\n====== db-shootout (database) [default], iteration 1 completed (9343.782 ms) ======\n====== db-shootout (database) [default], iteration 2 started ======\nGC before operation: completed in 111.405 ms, heap usage 283.357 MB -> 112.478 MB.\n====== db-shootout (database) [default], iteration 2 completed (7499.305 ms) ======\n====== db-shootout (database) [default], iteration 3 started ======\nGC before operation: completed in 94.995 ms, heap usage 543.589 MB -> 114.314 MB.\n====== db-shootout (database) [default], iteration 3 completed (8724.019 ms) ======\n====== db-shootout (database) [default], iteration 4 started ======\nGC before operation: completed in 101.845 ms, heap usage 213.978 MB -> 159.872 MB.\n====== db-shootout (database) [default], iteration 4 completed (7010.765 ms) ======\n====== db-shootout (database) [default], iteration 5 started ======\nGC before operation: completed in 164.949 ms, heap usage 636.845 MB -> 167.668 MB.\n====== db-shootout (database) [default], iteration 5 completed (7721.156 ms) ======\n====== db-shootout (database) [default], iteration 6 started ======\nGC before operation: completed in 130.093 ms, heap usage 384.324 MB -> 167.486 MB.\n====== db-shootout (database) [default], iteration 6 completed (7647.257 ms) ======\n====== db-shootout (database) [default], iteration 7 started ======\nGC before operation: completed in 109.623 ms, heap usage 282.011 MB -> 175.857 MB.\n====== db-shootout (database) [default], iteration 7 completed (7329.669 ms) ======\n====== db-shootout (database) [default], iteration 8 started ======\nGC before operation: completed in 116.420 ms, heap usage 284.042 MB -> 175.655 MB.\n====== db-shootout (database) [default], iteration 8 completed (7329.711 ms) ======\n====== db-shootout (database) [default], iteration 9 started ======\nGC before operation: completed in 171.716 ms, heap usage 342.792 MB -> 175.912 MB.\n====== db-shootout (database) [default], iteration 9 completed (6774.502 ms) ======\n====== db-shootout (database) [default], iteration 10 started ======\nGC before operation: completed in 173.829 ms, heap usage 293.932 MB -> 175.555 MB.\n====== db-shootout (database) [default], iteration 10 completed (6874.618 ms) ======\n====== db-shootout (database) [default], iteration 11 started ======\nGC before operation: completed in 148.492 ms, heap usage 400.220 MB -> 180.072 MB.\n====== db-shootout (database) [default], iteration 11 completed (7713.732 ms) ======\n====== db-shootout (database) [default], iteration 12 started ======\nGC before operation: completed in 117.617 ms, heap usage 194.930 MB -> 178.866 MB.\n====== db-shootout (database) [default], iteration 12 completed (7466.876 ms) ======\n====== db-shootout (database) [default], iteration 13 started ======\nGC before operation: completed in 129.592 ms, heap usage 290.546 MB -> 179.243 MB.\n====== db-shootout (database) [default], iteration 13 completed (6989.489 ms) ======\n====== db-shootout (database) [default], iteration 14 started ======\nGC before operation: completed in 136.413 ms, heap usage 256.392 MB -> 179.022 MB.\n====== db-shootout (database) [default], iteration 14 completed (6647.630 ms) ======\nCreating graph database...\nLoading resources...\nPopulating database...\nfinagle-http on :39975 spawning 2 client and default number of server workers.\n====== finagle-http (web) [default], iteration 0 started ======\nGC before operation: completed in 98.510 ms, heap usage 612.157 MB -> 111.470 MB.\n====== finagle-http (web) [default], iteration 0 completed (17579.182 ms) ======\n====== finagle-http (web) [default], iteration 1 started ======\nGC before operation: completed in 132.580 ms, heap usage 293.599 MB -> 114.255 MB.\n====== finagle-http (web) [default], iteration 1 completed (7093.193 ms) ======\n====== finagle-http (web) [default], iteration 2 started ======\nGC before operation: completed in 139.872 ms, heap usage 142.229 MB -> 114.940 MB.\n====== finagle-http (web) [default], iteration 2 completed (3467.412 ms) ======\n====== finagle-http (web) [default], iteration 3 started ======\nGC before operation: completed in 102.621 ms, heap usage 139.149 MB -> 115.008 MB.\n====== finagle-http (web) [default], iteration 3 completed (2891.463 ms) ======\n====== finagle-http (web) [default], iteration 4 started ======\nGC before operation: completed in 101.518 ms, heap usage 138.053 MB -> 115.745 MB.\n====== finagle-http (web) [default], iteration 4 completed (3105.065 ms) ======\n====== finagle-http (web) [default], iteration 5 started ======\nGC before operation: completed in 107.976 ms, heap usage 136.110 MB -> 115.075 MB.\n====== finagle-http (web) [default], iteration 5 completed (2695.150 ms) ======\n====== finagle-http (web) [default], iteration 6 started ======\nGC before operation: completed in 112.486 ms, heap usage 136.249 MB -> 115.049 MB.\n====== finagle-http (web) [default], iteration 6 completed (2704.392 ms) ======\n====== finagle-http (web) [default], iteration 7 started ======\nGC before operation: completed in 114.377 ms, heap usage 135.245 MB -> 115.020 MB.\n====== finagle-http (web) [default], iteration 7 completed (2948.935 ms) ======\n====== finagle-http (web) [default], iteration 8 started ======\nGC before operation: completed in 122.053 ms, heap usage 135.666 MB -> 115.051 MB.\n====== finagle-http (web) [default], iteration 8 completed (2778.196 ms) ======\n====== finagle-http (web) [default], iteration 9 started ======\nGC before operation: completed in 109.678 ms, heap usage 136.088 MB -> 115.031 MB.\n====== finagle-http (web) [default], iteration 9 completed (2747.983 ms) ======\n====== finagle-http (web) [default], iteration 10 started ======\nGC before operation: completed in 99.536 ms, heap usage 135.498 MB -> 115.057 MB.\n====== finagle-http (web) [default], iteration 10 completed (2777.183 ms) ======\n====== finagle-http (web) [default], iteration 11 started ======\nGC before operation: completed in 100.476 ms, heap usage 134.090 MB -> 115.060 MB.\n====== finagle-http (web) [default], iteration 11 completed (2950.363 ms) ======\n====== finagle-http (web) [default], iteration 12 started ======\nGC before operation: completed in 101.952 ms, heap usage 134.523 MB -> 115.062 MB.\n====== finagle-http (web) [default], iteration 12 completed (2759.978 ms) ======\n====== finagle-http (web) [default], iteration 13 started ======\nGC before operation: completed in 109.865 ms, heap usage 135.138 MB -> 115.064 MB.\n====== finagle-http (web) [default], iteration 13 completed (2831.653 ms) ======\n====== finagle-http (web) [default], iteration 14 started ======\nGC before operation: completed in 105.948 ms, heap usage 134.532 MB -> 115.044 MB.\n====== finagle-http (web) [default], iteration 14 completed (2711.280 ms) ======\n====== reactors (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 105.850 ms, heap usage 151.704 MB -> 116.190 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 0 completed (17020.896 ms) ======\n====== reactors (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 104.599 ms, heap usage 181.251 MB -> 113.711 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 1 completed (13892.575 ms) ======\n====== reactors (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 95.102 ms, heap usage 174.198 MB -> 113.758 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 2 completed (12554.742 ms) ======\n====== reactors (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 116.893 ms, heap usage 619.954 MB -> 113.748 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 3 completed (13425.368 ms) ======\n====== reactors (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 116.460 ms, heap usage 633.733 MB -> 113.696 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 4 completed (12579.614 ms) ======\n====== reactors (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 101.795 ms, heap usage 678.695 MB -> 113.699 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 5 completed (13161.693 ms) ======\n====== reactors (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 172.615 ms, heap usage 622.470 MB -> 113.699 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 6 completed (12878.519 ms) ======\n====== reactors (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 112.228 ms, heap usage 718.171 MB -> 113.700 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 7 completed (12975.597 ms) ======\n====== reactors (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 98.762 ms, heap usage 716.077 MB -> 113.700 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 8 completed (12770.728 ms) ======\n====== reactors (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 102.126 ms, heap usage 748.105 MB -> 113.710 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 9 completed (13076.609 ms) ======\n====== reactors (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 98.649 ms, heap usage 687.606 MB -> 113.700 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 10 completed (13003.432 ms) ======\n====== reactors (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 101.379 ms, heap usage 732.195 MB -> 113.700 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 11 completed (14004.051 ms) ======\n====== reactors (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 105.159 ms, heap usage 627.924 MB -> 113.700 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 12 completed (13270.736 ms) ======\n====== reactors (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 108.063 ms, heap usage 752.521 MB -> 113.700 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 13 completed (13719.150 ms) ======\n====== reactors (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 122.216 ms, heap usage 634.683 MB -> 113.714 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 14 completed (13878.366 ms) ======\nNOTE: 'dec-tree' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== dec-tree (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 164.697 ms, heap usage 737.360 MB -> 126.493 MB.\n====== dec-tree (apache-spark) [default], iteration 0 completed (10211.732 ms) ======\n====== dec-tree (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 163.548 ms, heap usage 286.590 MB -> 158.107 MB.\n====== dec-tree (apache-spark) [default], iteration 1 completed (2450.505 ms) ======\n====== dec-tree (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 136.565 ms, heap usage 345.940 MB -> 158.492 MB.\n====== dec-tree (apache-spark) [default], iteration 2 completed (2009.743 ms) ======\n====== dec-tree (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 138.685 ms, heap usage 279.501 MB -> 158.716 MB.\n====== dec-tree (apache-spark) [default], iteration 3 completed (1989.605 ms) ======\n====== dec-tree (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 146.026 ms, heap usage 489.120 MB -> 158.915 MB.\n====== dec-tree (apache-spark) [default], iteration 4 completed (1714.918 ms) ======\n====== dec-tree (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 127.943 ms, heap usage 488.970 MB -> 159.140 MB.\n====== dec-tree (apache-spark) [default], iteration 5 completed (1705.237 ms) ======\n====== dec-tree (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 130.962 ms, heap usage 190.728 MB -> 158.870 MB.\n====== dec-tree (apache-spark) [default], iteration 6 completed (1675.410 ms) ======\n====== dec-tree (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 128.752 ms, heap usage 464.234 MB -> 159.494 MB.\n====== dec-tree (apache-spark) [default], iteration 7 completed (1687.319 ms) ======\n====== dec-tree (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 131.642 ms, heap usage 193.742 MB -> 159.062 MB.\n====== dec-tree (apache-spark) [default], iteration 8 completed (1553.852 ms) ======\n====== dec-tree (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 146.296 ms, heap usage 480.448 MB -> 168.014 MB.\n====== dec-tree (apache-spark) [default], iteration 9 completed (1516.748 ms) ======\n====== dec-tree (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 144.013 ms, heap usage 452.343 MB -> 159.895 MB.\n====== dec-tree (apache-spark) [default], iteration 10 completed (1582.871 ms) ======\n====== dec-tree (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 134.653 ms, heap usage 443.551 MB -> 160.089 MB.\n====== dec-tree (apache-spark) [default], iteration 11 completed (1470.741 ms) ======\n====== dec-tree (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 195.778 ms, heap usage 440.791 MB -> 160.224 MB.\n====== dec-tree (apache-spark) [default], iteration 12 completed (1455.447 ms) ======\n====== dec-tree (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 153.178 ms, heap usage 513.991 MB -> 160.372 MB.\n====== dec-tree (apache-spark) [default], iteration 13 completed (1444.480 ms) ======\n====== dec-tree (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 140.368 ms, heap usage 445.814 MB -> 160.435 MB.\n====== dec-tree (apache-spark) [default], iteration 14 completed (1470.615 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 0 started ======\nGC before operation: completed in 151.372 ms, heap usage 172.187 MB -> 143.483 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 534\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 53\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 9\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 7\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 10\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 8\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 16\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 4\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 11\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 22\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 4\tmaxttc = 534\tfailed = 0\ttotal = 4\nSHORT_TRAVERSAL:  successful = 6\tmaxttc = 16\tfailed = 0\ttotal = 6\nSHORT_TRAVERSAL_RO:  successful = 10\tmaxttc = 9\tfailed = 0\ttotal = 10\nOPERATION:  successful = 8\tmaxttc = 22\tfailed = 0\ttotal = 8\nOPERATION_RO:  successful = 12\tmaxttc = 11\tfailed = 0\ttotal = 12\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 59.88 op/s (59.88 op/s including failed)\nElapsed time: 0.67 s\n====== scala-stm-bench7 (scala) [default], iteration 0 completed (2511.480 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 1 started ======\nGC before operation: completed in 135.828 ms, heap usage 523.490 MB -> 142.053 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 470\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 13\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 8\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 14\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 9\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 8\tmaxttc = 534\tfailed = 0\ttotal = 8\nSHORT_TRAVERSAL:  successful = 12\tmaxttc = 16\tfailed = 0\ttotal = 12\nSHORT_TRAVERSAL_RO:  successful = 20\tmaxttc = 9\tfailed = 0\ttotal = 20\nOPERATION:  successful = 16\tmaxttc = 22\tfailed = 0\ttotal = 16\nOPERATION_RO:  successful = 24\tmaxttc = 14\tfailed = 0\ttotal = 24\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 155.64 op/s (155.64 op/s including failed)\nElapsed time: 0.51 s\n====== scala-stm-bench7 (scala) [default], iteration 1 completed (1783.062 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 2 started ======\nGC before operation: completed in 240.384 ms, heap usage 489.877 MB -> 142.054 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 517\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 11\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 8\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 12\tmaxttc = 534\tfailed = 0\ttotal = 12\nSHORT_TRAVERSAL:  successful = 18\tmaxttc = 16\tfailed = 0\ttotal = 18\nSHORT_TRAVERSAL_RO:  successful = 30\tmaxttc = 9\tfailed = 0\ttotal = 30\nOPERATION:  successful = 24\tmaxttc = 22\tfailed = 0\ttotal = 24\nOPERATION_RO:  successful = 36\tmaxttc = 14\tfailed = 0\ttotal = 36\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 220.59 op/s (220.59 op/s including failed)\nElapsed time: 0.54 s\n====== scala-stm-bench7 (scala) [default], iteration 2 completed (1408.246 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 3 started ======\nGC before operation: completed in 136.697 ms, heap usage 506.905 MB -> 142.050 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 496\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 7\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 4\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 16\tmaxttc = 534\tfailed = 0\ttotal = 16\nSHORT_TRAVERSAL:  successful = 24\tmaxttc = 16\tfailed = 0\ttotal = 24\nSHORT_TRAVERSAL_RO:  successful = 40\tmaxttc = 9\tfailed = 0\ttotal = 40\nOPERATION:  successful = 32\tmaxttc = 22\tfailed = 0\ttotal = 32\nOPERATION_RO:  successful = 48\tmaxttc = 14\tfailed = 0\ttotal = 48\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 310.08 op/s (310.08 op/s including failed)\nElapsed time: 0.52 s\n====== scala-stm-bench7 (scala) [default], iteration 3 completed (1342.530 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 4 started ======\nGC before operation: completed in 147.926 ms, heap usage 393.121 MB -> 142.060 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 384\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 7\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 4\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 20\tmaxttc = 534\tfailed = 0\ttotal = 20\nSHORT_TRAVERSAL:  successful = 30\tmaxttc = 16\tfailed = 0\ttotal = 30\nSHORT_TRAVERSAL_RO:  successful = 50\tmaxttc = 9\tfailed = 0\ttotal = 50\nOPERATION:  successful = 40\tmaxttc = 22\tfailed = 0\ttotal = 40\nOPERATION_RO:  successful = 60\tmaxttc = 14\tfailed = 0\ttotal = 60\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 506.33 op/s (506.33 op/s including failed)\nElapsed time: 0.40 s\n====== scala-stm-bench7 (scala) [default], iteration 4 completed (1272.510 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 5 started ======\nGC before operation: completed in 185.238 ms, heap usage 380.599 MB -> 142.044 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 518\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 11\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 6\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 24\tmaxttc = 534\tfailed = 0\ttotal = 24\nSHORT_TRAVERSAL:  successful = 36\tmaxttc = 16\tfailed = 0\ttotal = 36\nSHORT_TRAVERSAL_RO:  successful = 60\tmaxttc = 9\tfailed = 0\ttotal = 60\nOPERATION:  successful = 48\tmaxttc = 22\tfailed = 0\ttotal = 48\nOPERATION_RO:  successful = 72\tmaxttc = 14\tfailed = 0\ttotal = 72\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 441.99 op/s (441.99 op/s including failed)\nElapsed time: 0.54 s\n====== scala-stm-bench7 (scala) [default], iteration 5 completed (1480.501 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 6 started ======\nGC before operation: completed in 153.068 ms, heap usage 507.102 MB -> 142.056 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 463\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 11\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 8\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 8\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 28\tmaxttc = 534\tfailed = 0\ttotal = 28\nSHORT_TRAVERSAL:  successful = 42\tmaxttc = 16\tfailed = 0\ttotal = 42\nSHORT_TRAVERSAL_RO:  successful = 70\tmaxttc = 9\tfailed = 0\ttotal = 70\nOPERATION:  successful = 56\tmaxttc = 22\tfailed = 0\ttotal = 56\nOPERATION_RO:  successful = 84\tmaxttc = 14\tfailed = 0\ttotal = 84\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 577.32 op/s (577.32 op/s including failed)\nElapsed time: 0.49 s\n====== scala-stm-bench7 (scala) [default], iteration 6 completed (1372.866 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 7 started ======\nGC before operation: completed in 147.549 ms, heap usage 507.608 MB -> 142.061 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 483\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 9\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 32\tmaxttc = 534\tfailed = 0\ttotal = 32\nSHORT_TRAVERSAL:  successful = 48\tmaxttc = 16\tfailed = 0\ttotal = 48\nSHORT_TRAVERSAL_RO:  successful = 80\tmaxttc = 9\tfailed = 0\ttotal = 80\nOPERATION:  successful = 64\tmaxttc = 22\tfailed = 0\ttotal = 64\nOPERATION_RO:  successful = 96\tmaxttc = 14\tfailed = 0\ttotal = 96\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 642.57 op/s (642.57 op/s including failed)\nElapsed time: 0.50 s\n====== scala-stm-bench7 (scala) [default], iteration 7 completed (1368.893 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 8 started ======\nGC before operation: completed in 156.075 ms, heap usage 505.601 MB -> 142.044 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 492\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 10\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 4\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 36\tmaxttc = 534\tfailed = 0\ttotal = 36\nSHORT_TRAVERSAL:  successful = 54\tmaxttc = 16\tfailed = 0\ttotal = 54\nSHORT_TRAVERSAL_RO:  successful = 90\tmaxttc = 9\tfailed = 0\ttotal = 90\nOPERATION:  successful = 72\tmaxttc = 22\tfailed = 0\ttotal = 72\nOPERATION_RO:  successful = 108\tmaxttc = 14\tfailed = 0\ttotal = 108\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 705.88 op/s (705.88 op/s including failed)\nElapsed time: 0.51 s\n====== scala-stm-bench7 (scala) [default], iteration 8 completed (1469.754 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 9 started ======\nGC before operation: completed in 137.134 ms, heap usage 507.110 MB -> 142.056 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 474\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 10\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 4\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 40\tmaxttc = 534\tfailed = 0\ttotal = 40\nSHORT_TRAVERSAL:  successful = 60\tmaxttc = 16\tfailed = 0\ttotal = 60\nSHORT_TRAVERSAL_RO:  successful = 100\tmaxttc = 9\tfailed = 0\ttotal = 100\nOPERATION:  successful = 80\tmaxttc = 22\tfailed = 0\ttotal = 80\nOPERATION_RO:  successful = 120\tmaxttc = 14\tfailed = 0\ttotal = 120\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 818.00 op/s (818.00 op/s including failed)\nElapsed time: 0.49 s\n====== scala-stm-bench7 (scala) [default], iteration 9 completed (1497.723 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 10 started ======\nGC before operation: completed in 389.866 ms, heap usage 507.497 MB -> 295.408 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 340\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 11\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 44\tmaxttc = 534\tfailed = 0\ttotal = 44\nSHORT_TRAVERSAL:  successful = 66\tmaxttc = 16\tfailed = 0\ttotal = 66\nSHORT_TRAVERSAL_RO:  successful = 110\tmaxttc = 9\tfailed = 0\ttotal = 110\nOPERATION:  successful = 88\tmaxttc = 22\tfailed = 0\ttotal = 88\nOPERATION_RO:  successful = 132\tmaxttc = 14\tfailed = 0\ttotal = 132\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1229.05 op/s (1229.05 op/s including failed)\nElapsed time: 0.36 s\n====== scala-stm-bench7 (scala) [default], iteration 10 completed (1120.384 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 11 started ======\nGC before operation: completed in 140.313 ms, heap usage 400.744 MB -> 142.052 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 600\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 12\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 48\tmaxttc = 600\tfailed = 0\ttotal = 48\nSHORT_TRAVERSAL:  successful = 72\tmaxttc = 16\tfailed = 0\ttotal = 72\nSHORT_TRAVERSAL_RO:  successful = 120\tmaxttc = 9\tfailed = 0\ttotal = 120\nOPERATION:  successful = 96\tmaxttc = 22\tfailed = 0\ttotal = 96\nOPERATION_RO:  successful = 144\tmaxttc = 14\tfailed = 0\ttotal = 144\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 770.47 op/s (770.47 op/s including failed)\nElapsed time: 0.62 s\n====== scala-stm-bench7 (scala) [default], iteration 11 completed (1498.094 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 12 started ======\nGC before operation: completed in 158.043 ms, heap usage 507.099 MB -> 142.057 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 429\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 6\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 52\tmaxttc = 600\tfailed = 0\ttotal = 52\nSHORT_TRAVERSAL:  successful = 78\tmaxttc = 16\tfailed = 0\ttotal = 78\nSHORT_TRAVERSAL_RO:  successful = 130\tmaxttc = 9\tfailed = 0\ttotal = 130\nOPERATION:  successful = 104\tmaxttc = 22\tfailed = 0\ttotal = 104\nOPERATION_RO:  successful = 156\tmaxttc = 14\tfailed = 0\ttotal = 156\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1184.51 op/s (1184.51 op/s including failed)\nElapsed time: 0.44 s\n====== scala-stm-bench7 (scala) [default], iteration 12 completed (1301.468 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 13 started ======\nGC before operation: completed in 157.214 ms, heap usage 430.109 MB -> 142.044 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 441\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 8\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 7\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 56\tmaxttc = 600\tfailed = 0\ttotal = 56\nSHORT_TRAVERSAL:  successful = 84\tmaxttc = 16\tfailed = 0\ttotal = 84\nSHORT_TRAVERSAL_RO:  successful = 140\tmaxttc = 9\tfailed = 0\ttotal = 140\nOPERATION:  successful = 112\tmaxttc = 22\tfailed = 0\ttotal = 112\nOPERATION_RO:  successful = 168\tmaxttc = 14\tfailed = 0\ttotal = 168\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1244.44 op/s (1244.44 op/s including failed)\nElapsed time: 0.45 s\n====== scala-stm-bench7 (scala) [default], iteration 13 completed (1351.470 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 14 started ======\nGC before operation: completed in 141.475 ms, heap usage 507.530 MB -> 142.049 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 482\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 10\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 60\tmaxttc = 600\tfailed = 0\ttotal = 60\nSHORT_TRAVERSAL:  successful = 90\tmaxttc = 16\tfailed = 0\ttotal = 90\nSHORT_TRAVERSAL_RO:  successful = 150\tmaxttc = 9\tfailed = 0\ttotal = 150\nOPERATION:  successful = 120\tmaxttc = 22\tfailed = 0\ttotal = 120\nOPERATION_RO:  successful = 180\tmaxttc = 14\tfailed = 0\ttotal = 180\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1204.82 op/s (1204.82 op/s including failed)\nElapsed time: 0.50 s\n====== scala-stm-bench7 (scala) [default], iteration 14 completed (1439.994 ms) ======\nNOTE: 'naive-bayes' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== naive-bayes (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 157.559 ms, heap usage 173.043 MB -> 152.727 MB.\n====== naive-bayes (apache-spark) [default], iteration 0 completed (40505.768 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 203.021 ms, heap usage 442.679 MB -> 428.812 MB.\n====== naive-bayes (apache-spark) [default], iteration 1 completed (23313.942 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 184.892 ms, heap usage 455.964 MB -> 429.040 MB.\n====== naive-bayes (apache-spark) [default], iteration 2 completed (22137.040 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 207.126 ms, heap usage 447.901 MB -> 429.105 MB.\n====== naive-bayes (apache-spark) [default], iteration 3 completed (22166.338 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 178.331 ms, heap usage 447.914 MB -> 429.201 MB.\n====== naive-bayes (apache-spark) [default], iteration 4 completed (22021.017 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 188.053 ms, heap usage 531.524 MB -> 429.272 MB.\n====== naive-bayes (apache-spark) [default], iteration 5 completed (21499.434 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 198.890 ms, heap usage 499.768 MB -> 429.344 MB.\n====== naive-bayes (apache-spark) [default], iteration 6 completed (21187.520 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 175.395 ms, heap usage 531.319 MB -> 429.410 MB.\n====== naive-bayes (apache-spark) [default], iteration 7 completed (22419.763 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 282.874 ms, heap usage 492.795 MB -> 429.532 MB.\n====== naive-bayes (apache-spark) [default], iteration 8 completed (21701.999 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 167.999 ms, heap usage 455.434 MB -> 427.583 MB.\n====== naive-bayes (apache-spark) [default], iteration 9 completed (20956.195 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 211.706 ms, heap usage 813.593 MB -> 421.269 MB.\n====== naive-bayes (apache-spark) [default], iteration 10 completed (21463.384 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 165.327 ms, heap usage 542.556 MB -> 422.040 MB.\n====== naive-bayes (apache-spark) [default], iteration 11 completed (20713.293 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 156.444 ms, heap usage 742.313 MB -> 422.032 MB.\n====== naive-bayes (apache-spark) [default], iteration 12 completed (20682.267 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 143.812 ms, heap usage 741.763 MB -> 422.119 MB.\n====== naive-bayes (apache-spark) [default], iteration 13 completed (21341.442 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 154.760 ms, heap usage 448.917 MB -> 422.205 MB.\n====== naive-bayes (apache-spark) [default], iteration 14 completed (21277.786 ms) ======\nNOTE: 'als' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== als (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 170.517 ms, heap usage 342.184 MB -> 167.715 MB.\n====== als (apache-spark) [default], iteration 0 completed (17245.293 ms) ======\n====== als (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 206.106 ms, heap usage 381.163 MB -> 192.447 MB.\n====== als (apache-spark) [default], iteration 1 completed (8374.551 ms) ======\n====== als (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 203.403 ms, heap usage 692.875 MB -> 193.732 MB.\n====== als (apache-spark) [default], iteration 2 completed (7613.825 ms) ======\n====== als (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 197.033 ms, heap usage 770.490 MB -> 194.322 MB.\n====== als (apache-spark) [default], iteration 3 completed (7498.159 ms) ======\n====== als (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 222.854 ms, heap usage 724.610 MB -> 194.842 MB.\n====== als (apache-spark) [default], iteration 4 completed (7222.046 ms) ======\n====== als (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 199.073 ms, heap usage 630.683 MB -> 195.312 MB.\n====== als (apache-spark) [default], iteration 5 completed (6777.255 ms) ======\n====== als (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 196.178 ms, heap usage 670.045 MB -> 195.920 MB.\n====== als (apache-spark) [default], iteration 6 completed (6716.076 ms) ======\n====== als (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 196.405 ms, heap usage 703.914 MB -> 196.465 MB.\n====== als (apache-spark) [default], iteration 7 completed (6706.499 ms) ======\n====== als (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 200.429 ms, heap usage 690.188 MB -> 197.117 MB.\n====== als (apache-spark) [default], iteration 8 completed (6692.376 ms) ======\n====== als (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 206.096 ms, heap usage 703.429 MB -> 197.402 MB.\n====== als (apache-spark) [default], iteration 9 completed (6829.927 ms) ======\n====== als (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 210.566 ms, heap usage 722.096 MB -> 197.832 MB.\n====== als (apache-spark) [default], iteration 10 completed (6464.726 ms) ======\n====== als (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 207.892 ms, heap usage 691.523 MB -> 197.993 MB.\n====== als (apache-spark) [default], iteration 11 completed (6570.330 ms) ======\n====== als (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 235.043 ms, heap usage 728.923 MB -> 198.219 MB.\n====== als (apache-spark) [default], iteration 12 completed (6550.026 ms) ======\n====== als (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 204.262 ms, heap usage 672.212 MB -> 198.515 MB.\n====== als (apache-spark) [default], iteration 13 completed (6596.781 ms) ======\n====== als (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 202.815 ms, heap usage 743.348 MB -> 198.767 MB.\n====== als (apache-spark) [default], iteration 14 completed (6349.995 ms) ======\n====== par-mnemonics (functional) [default], iteration 0 started ======\nGC before operation: completed in 300.165 ms, heap usage 696.077 MB -> 179.147 MB.\n====== par-mnemonics (functional) [default], iteration 0 completed (4479.313 ms) ======\n====== par-mnemonics (functional) [default], iteration 1 started ======\nGC before operation: completed in 193.254 ms, heap usage 336.437 MB -> 179.107 MB.\n====== par-mnemonics (functional) [default], iteration 1 completed (4119.000 ms) ======\n====== par-mnemonics (functional) [default], iteration 2 started ======\nGC before operation: completed in 192.306 ms, heap usage 405.576 MB -> 179.104 MB.\n====== par-mnemonics (functional) [default], iteration 2 completed (4258.146 ms) ======\n====== par-mnemonics (functional) [default], iteration 3 started ======\nGC before operation: completed in 193.004 ms, heap usage 324.174 MB -> 179.108 MB.\n====== par-mnemonics (functional) [default], iteration 3 completed (4452.797 ms) ======\n====== par-mnemonics (functional) [default], iteration 4 started ======\nGC before operation: completed in 177.712 ms, heap usage 419.693 MB -> 179.105 MB.\n====== par-mnemonics (functional) [default], iteration 4 completed (3933.250 ms) ======\n====== par-mnemonics (functional) [default], iteration 5 started ======\nGC before operation: completed in 186.258 ms, heap usage 324.982 MB -> 179.105 MB.\n====== par-mnemonics (functional) [default], iteration 5 completed (4007.080 ms) ======\n====== par-mnemonics (functional) [default], iteration 6 started ======\nGC before operation: completed in 190.779 ms, heap usage 309.104 MB -> 179.121 MB.\n====== par-mnemonics (functional) [default], iteration 6 completed (3953.148 ms) ======\n====== par-mnemonics (functional) [default], iteration 7 started ======\nGC before operation: completed in 204.409 ms, heap usage 312.674 MB -> 179.116 MB.\n====== par-mnemonics (functional) [default], iteration 7 completed (4068.803 ms) ======\n====== par-mnemonics (functional) [default], iteration 8 started ======\nGC before operation: completed in 187.505 ms, heap usage 315.067 MB -> 179.106 MB.\n====== par-mnemonics (functional) [default], iteration 8 completed (3881.191 ms) ======\n====== par-mnemonics (functional) [default], iteration 9 started ======\nGC before operation: completed in 178.405 ms, heap usage 312.898 MB -> 179.106 MB.\n====== par-mnemonics (functional) [default], iteration 9 completed (4171.076 ms) ======\n====== par-mnemonics (functional) [default], iteration 10 started ======\nGC before operation: completed in 188.686 ms, heap usage 312.174 MB -> 179.106 MB.\n====== par-mnemonics (functional) [default], iteration 10 completed (3953.921 ms) ======\n====== par-mnemonics (functional) [default], iteration 11 started ======\nGC before operation: completed in 191.991 ms, heap usage 319.854 MB -> 179.106 MB.\n====== par-mnemonics (functional) [default], iteration 11 completed (4020.731 ms) ======\n====== par-mnemonics (functional) [default], iteration 12 started ======\nGC before operation: completed in 194.977 ms, heap usage 313.371 MB -> 179.106 MB.\n====== par-mnemonics (functional) [default], iteration 12 completed (4155.199 ms) ======\n====== par-mnemonics (functional) [default], iteration 13 started ======\nGC before operation: completed in 186.738 ms, heap usage 349.674 MB -> 179.103 MB.\n====== par-mnemonics (functional) [default], iteration 13 completed (4420.589 ms) ======\n====== par-mnemonics (functional) [default], iteration 14 started ======\nGC before operation: completed in 189.534 ms, heap usage 309.674 MB -> 179.103 MB.\n====== par-mnemonics (functional) [default], iteration 14 completed (3653.633 ms) ======\n====== scala-kmeans (scala) [default], iteration 0 started ======\nGC before operation: completed in 259.501 ms, heap usage 343.603 MB -> 201.421 MB.\n====== scala-kmeans (scala) [default], iteration 0 completed (339.766 ms) ======\n====== scala-kmeans (scala) [default], iteration 1 started ======\nGC before operation: completed in 202.460 ms, heap usage 256.921 MB -> 201.453 MB.\n====== scala-kmeans (scala) [default], iteration 1 completed (226.462 ms) ======\n====== scala-kmeans (scala) [default], iteration 2 started ======\nGC before operation: completed in 202.113 ms, heap usage 323.453 MB -> 201.453 MB.\n====== scala-kmeans (scala) [default], iteration 2 completed (224.094 ms) ======\n====== scala-kmeans (scala) [default], iteration 3 started ======\nGC before operation: completed in 183.749 ms, heap usage 322.953 MB -> 201.453 MB.\n====== scala-kmeans (scala) [default], iteration 3 completed (222.411 ms) ======\n====== scala-kmeans (scala) [default], iteration 4 started ======\nGC before operation: completed in 202.302 ms, heap usage 322.953 MB -> 201.453 MB.\n====== scala-kmeans (scala) [default], iteration 4 completed (223.270 ms) ======\n====== scala-kmeans (scala) [default], iteration 5 started ======\nGC before operation: completed in 202.640 ms, heap usage 322.953 MB -> 201.455 MB.\n====== scala-kmeans (scala) [default], iteration 5 completed (224.528 ms) ======\n====== scala-kmeans (scala) [default], iteration 6 started ======\nGC before operation: completed in 188.615 ms, heap usage 322.953 MB -> 201.453 MB.\n====== scala-kmeans (scala) [default], iteration 6 completed (231.478 ms) ======\n====== scala-kmeans (scala) [default], iteration 7 started ======\nGC before operation: completed in 206.202 ms, heap usage 322.953 MB -> 201.472 MB.\n====== scala-kmeans (scala) [default], iteration 7 completed (229.890 ms) ======\n====== scala-kmeans (scala) [default], iteration 8 started ======\nGC before operation: completed in 201.694 ms, heap usage 322.954 MB -> 201.454 MB.\n====== scala-kmeans (scala) [default], iteration 8 completed (259.279 ms) ======\n====== scala-kmeans (scala) [default], iteration 9 started ======\nGC before operation: completed in 185.242 ms, heap usage 332.551 MB -> 201.483 MB.\n====== scala-kmeans (scala) [default], iteration 9 completed (235.502 ms) ======\n====== scala-kmeans (scala) [default], iteration 10 started ======\nGC before operation: completed in 205.981 ms, heap usage 323.461 MB -> 201.461 MB.\n====== scala-kmeans (scala) [default], iteration 10 completed (235.422 ms) ======\n====== scala-kmeans (scala) [default], iteration 11 started ======\nGC before operation: completed in 205.946 ms, heap usage 322.961 MB -> 201.489 MB.\n====== scala-kmeans (scala) [default], iteration 11 completed (339.977 ms) ======\n====== scala-kmeans (scala) [default], iteration 12 started ======\nGC before operation: completed in 200.922 ms, heap usage 330.961 MB -> 201.462 MB.\n====== scala-kmeans (scala) [default], iteration 12 completed (222.818 ms) ======\n====== scala-kmeans (scala) [default], iteration 13 started ======\nGC before operation: completed in 192.781 ms, heap usage 322.962 MB -> 201.463 MB.\n====== scala-kmeans (scala) [default], iteration 13 completed (220.477 ms) ======\n====== scala-kmeans (scala) [default], iteration 14 started ======\nGC before operation: completed in 202.779 ms, heap usage 322.963 MB -> 201.463 MB.\n====== scala-kmeans (scala) [default], iteration 14 completed (222.039 ms) ======\n====== philosophers (scala) [default], iteration 0 started ======\nGC before operation: completed in 241.597 ms, heap usage 324.963 MB -> 180.463 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 0 completed (1409.944 ms) ======\n====== philosophers (scala) [default], iteration 1 started ======\nGC before operation: completed in 243.462 ms, heap usage 184.232 MB -> 180.383 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 1 completed (604.601 ms) ======\n====== philosophers (scala) [default], iteration 2 started ======\nGC before operation: completed in 192.650 ms, heap usage 525.881 MB -> 180.384 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 2 completed (741.321 ms) ======\n====== philosophers (scala) [default], iteration 3 started ======\nGC before operation: completed in 181.298 ms, heap usage 189.882 MB -> 180.385 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 3 completed (757.745 ms) ======\n====== philosophers (scala) [default], iteration 4 started ======\nGC before operation: completed in 201.106 ms, heap usage 194.464 MB -> 180.382 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 4 completed (659.879 ms) ======\n====== philosophers (scala) [default], iteration 5 started ======\nGC before operation: completed in 199.590 ms, heap usage 538.382 MB -> 180.402 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 5 completed (761.913 ms) ======\n====== philosophers (scala) [default], iteration 6 started ======\nGC before operation: completed in 180.230 ms, heap usage 206.336 MB -> 180.407 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 6 completed (582.194 ms) ======\n====== philosophers (scala) [default], iteration 7 started ======\nGC before operation: completed in 181.803 ms, heap usage 539.882 MB -> 180.387 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 7 completed (719.670 ms) ======\n====== philosophers (scala) [default], iteration 8 started ======\nGC before operation: completed in 205.901 ms, heap usage 205.086 MB -> 180.392 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 8 completed (711.867 ms) ======\n====== philosophers (scala) [default], iteration 9 started ======\nGC before operation: completed in 181.841 ms, heap usage 201.039 MB -> 180.385 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 9 completed (668.165 ms) ======\n====== philosophers (scala) [default], iteration 10 started ======\nGC before operation: completed in 199.598 ms, heap usage 194.511 MB -> 180.385 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 10 completed (566.751 ms) ======\n====== philosophers (scala) [default], iteration 11 started ======\nGC before operation: completed in 283.702 ms, heap usage 541.882 MB -> 180.382 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 11 completed (656.239 ms) ======\n====== philosophers (scala) [default], iteration 12 started ======\nGC before operation: completed in 177.024 ms, heap usage 193.987 MB -> 180.397 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 12 completed (612.935 ms) ======\n====== philosophers (scala) [default], iteration 13 started ======\nGC before operation: completed in 187.202 ms, heap usage 182.739 MB -> 180.398 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 13 completed (607.424 ms) ======\n====== philosophers (scala) [default], iteration 14 started ======\nGC before operation: completed in 194.918 ms, heap usage 191.477 MB -> 180.385 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 14 completed (767.034 ms) ======\n"
    },
    "log-regression": {
        "times": [
            10200.692,
            2383.667,
            1814.105,
            1769.557,
            1748.066,
            1730.83,
            1570.874,
            1425.369,
            1372.563,
            1356.486,
            1377.665,
            1441.676,
            1344.311,
            1502.652,
            1510.368
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 111.440 ms, heap usage 193.716 MB -> 76.034 MB.\n====== scrabble (functional) [default], iteration 0 completed (1746.818 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 75.425 ms, heap usage 124.295 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 1 completed (822.799 ms) ======\n====== scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 103.806 ms, heap usage 309.363 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 2 completed (876.688 ms) ======\n====== scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 108.057 ms, heap usage 131.528 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 3 completed (772.422 ms) ======\n====== scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 90.330 ms, heap usage 339.197 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 4 completed (664.922 ms) ======\n====== scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 78.633 ms, heap usage 242.581 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 5 completed (767.926 ms) ======\n====== scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 80.529 ms, heap usage 243.067 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 6 completed (771.953 ms) ======\n====== scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 87.821 ms, heap usage 169.966 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 7 completed (713.175 ms) ======\n====== scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 85.627 ms, heap usage 126.363 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 8 completed (705.321 ms) ======\n====== scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 77.713 ms, heap usage 279.273 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 9 completed (595.178 ms) ======\n====== scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 90.853 ms, heap usage 197.665 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 10 completed (653.981 ms) ======\n====== scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 80.787 ms, heap usage 125.936 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 11 completed (671.613 ms) ======\n====== scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 81.092 ms, heap usage 326.788 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 12 completed (614.500 ms) ======\n====== scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 74.421 ms, heap usage 199.244 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 13 completed (687.061 ms) ======\n====== scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 77.486 ms, heap usage 357.036 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 14 completed (698.120 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 39.864 ms, heap usage 626.576 MB -> 29.596 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (20832.995 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 151.296 ms, heap usage 587.802 MB -> 148.935 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (10726.986 ms) ======\n====== page-rank (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 139.528 ms, heap usage 662.229 MB -> 149.044 MB.\n====== page-rank (apache-spark) [default], iteration 2 completed (10497.012 ms) ======\n====== page-rank (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 145.301 ms, heap usage 620.847 MB -> 149.161 MB.\n====== page-rank (apache-spark) [default], iteration 3 completed (10683.078 ms) ======\n====== page-rank (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 146.272 ms, heap usage 595.956 MB -> 149.275 MB.\n====== page-rank (apache-spark) [default], iteration 4 completed (11158.857 ms) ======\n====== page-rank (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 150.477 ms, heap usage 624.956 MB -> 149.389 MB.\n====== page-rank (apache-spark) [default], iteration 5 completed (10816.748 ms) ======\n====== page-rank (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 152.563 ms, heap usage 475.956 MB -> 149.705 MB.\n====== page-rank (apache-spark) [default], iteration 6 completed (10797.777 ms) ======\n====== page-rank (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 153.431 ms, heap usage 575.956 MB -> 149.630 MB.\n====== page-rank (apache-spark) [default], iteration 7 completed (10320.855 ms) ======\n====== page-rank (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 154.161 ms, heap usage 494.956 MB -> 149.734 MB.\n====== page-rank (apache-spark) [default], iteration 8 completed (10797.875 ms) ======\n====== page-rank (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 159.810 ms, heap usage 685.884 MB -> 149.850 MB.\n====== page-rank (apache-spark) [default], iteration 9 completed (10426.551 ms) ======\n====== page-rank (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 138.119 ms, heap usage 483.136 MB -> 149.929 MB.\n====== page-rank (apache-spark) [default], iteration 10 completed (11319.287 ms) ======\n====== page-rank (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 160.571 ms, heap usage 417.218 MB -> 150.048 MB.\n====== page-rank (apache-spark) [default], iteration 11 completed (10773.541 ms) ======\n====== page-rank (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 153.774 ms, heap usage 591.956 MB -> 150.197 MB.\n====== page-rank (apache-spark) [default], iteration 12 completed (10583.141 ms) ======\n====== page-rank (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 151.297 ms, heap usage 385.309 MB -> 150.212 MB.\n====== page-rank (apache-spark) [default], iteration 13 completed (11225.389 ms) ======\n====== page-rank (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 138.750 ms, heap usage 506.956 MB -> 150.287 MB.\n====== page-rank (apache-spark) [default], iteration 14 completed (11253.752 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 60.640 ms, heap usage 661.207 MB -> 32.216 MB.\n====== future-genetic (functional) [default], iteration 0 completed (14742.129 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 51.821 ms, heap usage 114.841 MB -> 33.158 MB.\n====== future-genetic (functional) [default], iteration 1 completed (11014.493 ms) ======\n====== future-genetic (functional) [default], iteration 2 started ======\nGC before operation: completed in 34.821 ms, heap usage 68.320 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 2 completed (10628.352 ms) ======\n====== future-genetic (functional) [default], iteration 3 started ======\nGC before operation: completed in 38.504 ms, heap usage 57.876 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 3 completed (10722.143 ms) ======\n====== future-genetic (functional) [default], iteration 4 started ======\nGC before operation: completed in 39.692 ms, heap usage 145.206 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 4 completed (10840.012 ms) ======\n====== future-genetic (functional) [default], iteration 5 started ======\nGC before operation: completed in 38.411 ms, heap usage 81.011 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 5 completed (10598.435 ms) ======\n====== future-genetic (functional) [default], iteration 6 started ======\nGC before operation: completed in 40.019 ms, heap usage 144.534 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 6 completed (10786.150 ms) ======\n====== future-genetic (functional) [default], iteration 7 started ======\nGC before operation: completed in 48.015 ms, heap usage 171.419 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 7 completed (10652.683 ms) ======\n====== future-genetic (functional) [default], iteration 8 started ======\nGC before operation: completed in 35.498 ms, heap usage 37.426 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 8 completed (10488.698 ms) ======\n====== future-genetic (functional) [default], iteration 9 started ======\nGC before operation: completed in 42.383 ms, heap usage 130.505 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 9 completed (10682.271 ms) ======\n====== future-genetic (functional) [default], iteration 10 started ======\nGC before operation: completed in 48.742 ms, heap usage 134.970 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 10 completed (10549.840 ms) ======\n====== future-genetic (functional) [default], iteration 11 started ======\nGC before operation: completed in 41.808 ms, heap usage 156.009 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 11 completed (10851.547 ms) ======\n====== future-genetic (functional) [default], iteration 12 started ======\nGC before operation: completed in 40.139 ms, heap usage 163.381 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 12 completed (10940.461 ms) ======\n====== future-genetic (functional) [default], iteration 13 started ======\nGC before operation: completed in 35.048 ms, heap usage 80.372 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 13 completed (10876.099 ms) ======\n====== future-genetic (functional) [default], iteration 14 started ======\nGC before operation: completed in 43.468 ms, heap usage 62.997 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 14 completed (10763.606 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 70.620 ms, heap usage 85.721 MB -> 33.974 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 11\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (23373.227 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 371.313 ms, heap usage 780.679 MB -> 161.200 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (17055.803 ms) ======\n====== akka-uct (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 323.521 ms, heap usage 714.804 MB -> 140.346 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 2 completed (16644.579 ms) ======\n====== akka-uct (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 312.697 ms, heap usage 606.138 MB -> 139.703 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 3 completed (16230.901 ms) ======\n====== akka-uct (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 272.343 ms, heap usage 694.413 MB -> 139.888 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 4 completed (16222.783 ms) ======\n====== akka-uct (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 288.309 ms, heap usage 549.430 MB -> 124.976 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 5 completed (16061.576 ms) ======\n====== akka-uct (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 254.080 ms, heap usage 570.484 MB -> 130.699 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 6 completed (15769.690 ms) ======\n====== akka-uct (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 387.396 ms, heap usage 619.770 MB -> 158.750 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 7 completed (15901.168 ms) ======\n====== akka-uct (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 304.489 ms, heap usage 580.964 MB -> 149.879 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 8 completed (16178.151 ms) ======\n====== akka-uct (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 253.043 ms, heap usage 553.450 MB -> 150.939 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 9 completed (15874.839 ms) ======\n====== akka-uct (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 301.130 ms, heap usage 528.928 MB -> 139.937 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 10 completed (15982.587 ms) ======\n====== akka-uct (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 267.305 ms, heap usage 626.465 MB -> 131.010 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 11 completed (16353.495 ms) ======\n====== akka-uct (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 294.293 ms, heap usage 500.855 MB -> 153.125 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 12 completed (15969.903 ms) ======\n====== akka-uct (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 292.350 ms, heap usage 647.259 MB -> 125.388 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 13 completed (15322.843 ms) ======\n====== akka-uct (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 252.391 ms, heap usage 562.070 MB -> 128.190 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 14 completed (16083.172 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 2 (out of 2) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 134.630 ms, heap usage 463.678 MB -> 85.476 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (22878.805 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 103.188 ms, heap usage 272.080 MB -> 100.040 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (14811.341 ms) ======\n====== movie-lens (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 144.144 ms, heap usage 208.849 MB -> 97.194 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 2 completed (13632.892 ms) ======\n====== movie-lens (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 122.890 ms, heap usage 173.120 MB -> 97.842 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 3 completed (12814.257 ms) ======\n====== movie-lens (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 113.279 ms, heap usage 237.308 MB -> 98.141 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 4 completed (12978.413 ms) ======\n====== movie-lens (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 119.099 ms, heap usage 219.670 MB -> 98.103 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 5 completed (14306.460 ms) ======\n====== movie-lens (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 123.459 ms, heap usage 175.077 MB -> 98.404 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 6 completed (12568.443 ms) ======\n====== movie-lens (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 115.564 ms, heap usage 119.760 MB -> 100.031 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 7 completed (11505.398 ms) ======\n====== movie-lens (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 112.918 ms, heap usage 255.198 MB -> 99.024 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 8 completed (11706.594 ms) ======\n====== movie-lens (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 170.418 ms, heap usage 189.372 MB -> 98.513 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 9 completed (11662.958 ms) ======\n====== movie-lens (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 218.616 ms, heap usage 163.601 MB -> 98.629 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 10 completed (11293.424 ms) ======\n====== movie-lens (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 126.280 ms, heap usage 236.690 MB -> 98.603 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 11 completed (11873.509 ms) ======\n====== movie-lens (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 121.729 ms, heap usage 154.433 MB -> 98.657 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 12 completed (12263.435 ms) ======\n====== movie-lens (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 113.550 ms, heap usage 470.143 MB -> 102.266 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 13 completed (12351.951 ms) ======\n====== movie-lens (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 107.375 ms, heap usage 274.093 MB -> 98.738 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 14 completed (12112.256 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 83.428 ms, heap usage 476.231 MB -> 58.268 MB.\n====== scala-doku (scala) [default], iteration 0 completed (2753.475 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 83.813 ms, heap usage 150.542 MB -> 58.243 MB.\n====== scala-doku (scala) [default], iteration 1 completed (2340.567 ms) ======\n====== scala-doku (scala) [default], iteration 2 started ======\nGC before operation: completed in 88.607 ms, heap usage 121.743 MB -> 58.244 MB.\n====== scala-doku (scala) [default], iteration 2 completed (2269.313 ms) ======\n====== scala-doku (scala) [default], iteration 3 started ======\nGC before operation: completed in 79.133 ms, heap usage 118.244 MB -> 58.245 MB.\n====== scala-doku (scala) [default], iteration 3 completed (1898.181 ms) ======\n====== scala-doku (scala) [default], iteration 4 started ======\nGC before operation: completed in 86.643 ms, heap usage 120.745 MB -> 58.245 MB.\n====== scala-doku (scala) [default], iteration 4 completed (1792.430 ms) ======\n====== scala-doku (scala) [default], iteration 5 started ======\nGC before operation: completed in 77.315 ms, heap usage 119.245 MB -> 58.245 MB.\n====== scala-doku (scala) [default], iteration 5 completed (1786.944 ms) ======\n====== scala-doku (scala) [default], iteration 6 started ======\nGC before operation: completed in 89.168 ms, heap usage 120.745 MB -> 58.245 MB.\n====== scala-doku (scala) [default], iteration 6 completed (1866.830 ms) ======\n====== scala-doku (scala) [default], iteration 7 started ======\nGC before operation: completed in 76.164 ms, heap usage 120.245 MB -> 58.246 MB.\n====== scala-doku (scala) [default], iteration 7 completed (1799.903 ms) ======\n====== scala-doku (scala) [default], iteration 8 started ======\nGC before operation: completed in 79.207 ms, heap usage 119.746 MB -> 58.246 MB.\n====== scala-doku (scala) [default], iteration 8 completed (1782.750 ms) ======\n====== scala-doku (scala) [default], iteration 9 started ======\nGC before operation: completed in 86.288 ms, heap usage 120.246 MB -> 58.247 MB.\n====== scala-doku (scala) [default], iteration 9 completed (1778.745 ms) ======\n====== scala-doku (scala) [default], iteration 10 started ======\nGC before operation: completed in 77.760 ms, heap usage 119.747 MB -> 58.247 MB.\n====== scala-doku (scala) [default], iteration 10 completed (1794.655 ms) ======\n====== scala-doku (scala) [default], iteration 11 started ======\nGC before operation: completed in 92.459 ms, heap usage 119.747 MB -> 58.247 MB.\n====== scala-doku (scala) [default], iteration 11 completed (1818.580 ms) ======\n====== scala-doku (scala) [default], iteration 12 started ======\nGC before operation: completed in 77.984 ms, heap usage 120.247 MB -> 58.247 MB.\n====== scala-doku (scala) [default], iteration 12 completed (1848.215 ms) ======\n====== scala-doku (scala) [default], iteration 13 started ======\nGC before operation: completed in 93.441 ms, heap usage 119.747 MB -> 58.247 MB.\n====== scala-doku (scala) [default], iteration 13 completed (1809.411 ms) ======\n====== scala-doku (scala) [default], iteration 14 started ======\nGC before operation: completed in 82.582 ms, heap usage 119.747 MB -> 58.247 MB.\n====== scala-doku (scala) [default], iteration 14 completed (1803.934 ms) ======\nNOTE: 'chi-square' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== chi-square (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 99.379 ms, heap usage 319.426 MB -> 63.405 MB.\n====== chi-square (apache-spark) [default], iteration 0 completed (5198.635 ms) ======\n====== chi-square (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 217.985 ms, heap usage 339.427 MB -> 209.273 MB.\n====== chi-square (apache-spark) [default], iteration 1 completed (1119.485 ms) ======\n====== chi-square (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 175.933 ms, heap usage 299.968 MB -> 209.346 MB.\n====== chi-square (apache-spark) [default], iteration 2 completed (1038.669 ms) ======\n====== chi-square (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 162.484 ms, heap usage 434.584 MB -> 209.395 MB.\n====== chi-square (apache-spark) [default], iteration 3 completed (988.864 ms) ======\n====== chi-square (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 185.658 ms, heap usage 472.608 MB -> 209.448 MB.\n====== chi-square (apache-spark) [default], iteration 4 completed (1021.110 ms) ======\n====== chi-square (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 161.400 ms, heap usage 424.379 MB -> 209.494 MB.\n====== chi-square (apache-spark) [default], iteration 5 completed (1016.339 ms) ======\n====== chi-square (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 165.385 ms, heap usage 377.344 MB -> 209.638 MB.\n====== chi-square (apache-spark) [default], iteration 6 completed (1044.792 ms) ======\n====== chi-square (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 151.433 ms, heap usage 385.817 MB -> 209.712 MB.\n====== chi-square (apache-spark) [default], iteration 7 completed (892.107 ms) ======\n====== chi-square (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 148.497 ms, heap usage 375.358 MB -> 209.695 MB.\n====== chi-square (apache-spark) [default], iteration 8 completed (912.148 ms) ======\n====== chi-square (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 186.559 ms, heap usage 381.260 MB -> 209.735 MB.\n====== chi-square (apache-spark) [default], iteration 9 completed (916.193 ms) ======\n====== chi-square (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 172.071 ms, heap usage 375.984 MB -> 209.776 MB.\n====== chi-square (apache-spark) [default], iteration 10 completed (706.035 ms) ======\n====== chi-square (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 142.619 ms, heap usage 232.457 MB -> 209.816 MB.\n====== chi-square (apache-spark) [default], iteration 11 completed (764.527 ms) ======\n====== chi-square (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 164.121 ms, heap usage 670.340 MB -> 209.852 MB.\n====== chi-square (apache-spark) [default], iteration 12 completed (858.768 ms) ======\n====== chi-square (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 159.826 ms, heap usage 316.763 MB -> 209.890 MB.\n====== chi-square (apache-spark) [default], iteration 13 completed (862.769 ms) ======\n====== chi-square (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 166.687 ms, heap usage 379.775 MB -> 209.921 MB.\n====== chi-square (apache-spark) [default], iteration 14 completed (703.576 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 196.120 ms, heap usage 470.464 MB -> 147.340 MB.\n====== fj-kmeans (concurrency) [default], iteration 0 completed (8529.473 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 133.696 ms, heap usage 331.615 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 1 completed (7479.812 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 134.063 ms, heap usage 318.922 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 2 completed (7610.407 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 133.778 ms, heap usage 222.341 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 3 completed (7571.793 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 139.456 ms, heap usage 217.309 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 4 completed (7516.518 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 133.370 ms, heap usage 382.616 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 5 completed (8339.655 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 140.237 ms, heap usage 354.831 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 6 completed (7633.795 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 137.960 ms, heap usage 448.031 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 7 completed (7335.928 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 127.427 ms, heap usage 221.957 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 8 completed (7359.912 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 137.302 ms, heap usage 368.915 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 9 completed (8379.108 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 139.433 ms, heap usage 184.312 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 10 completed (8029.337 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 138.797 ms, heap usage 171.657 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 11 completed (7673.166 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 132.845 ms, heap usage 170.035 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 12 completed (7460.127 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 137.480 ms, heap usage 320.158 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 13 completed (7646.174 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 127.475 ms, heap usage 186.440 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 14 completed (7391.153 ms) ======\n====== rx-scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 138.851 ms, heap usage 249.054 MB -> 97.875 MB.\n====== rx-scrabble (functional) [default], iteration 0 completed (539.438 ms) ======\n====== rx-scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 97.806 ms, heap usage 250.872 MB -> 98.124 MB.\n====== rx-scrabble (functional) [default], iteration 1 completed (188.955 ms) ======\n====== rx-scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 121.701 ms, heap usage 240.121 MB -> 98.118 MB.\n====== rx-scrabble (functional) [default], iteration 2 completed (158.740 ms) ======\n====== rx-scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 103.202 ms, heap usage 238.618 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 3 completed (147.979 ms) ======\n====== rx-scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 107.730 ms, heap usage 239.113 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 4 completed (162.112 ms) ======\n====== rx-scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 117.578 ms, heap usage 239.463 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 5 completed (128.936 ms) ======\n====== rx-scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 111.309 ms, heap usage 239.390 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 6 completed (116.055 ms) ======\n====== rx-scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 109.603 ms, heap usage 239.557 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 7 completed (109.336 ms) ======\n====== rx-scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 108.494 ms, heap usage 239.260 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 8 completed (124.372 ms) ======\n====== rx-scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 134.578 ms, heap usage 239.449 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 9 completed (133.649 ms) ======\n====== rx-scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 98.374 ms, heap usage 240.453 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 10 completed (197.918 ms) ======\n====== rx-scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 111.349 ms, heap usage 240.463 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 11 completed (117.228 ms) ======\n====== rx-scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 104.555 ms, heap usage 240.413 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 12 completed (112.849 ms) ======\n====== rx-scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 98.436 ms, heap usage 240.514 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 13 completed (105.866 ms) ======\n====== rx-scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 92.783 ms, heap usage 240.977 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 14 completed (105.587 ms) ======\n====== db-shootout (database) [default], iteration 0 started ======\nGC before operation: completed in 104.333 ms, heap usage 179.823 MB -> 100.606 MB.\n====== db-shootout (database) [default], iteration 0 completed (8779.951 ms) ======\n====== db-shootout (database) [default], iteration 1 started ======\nGC before operation: completed in 107.497 ms, heap usage 242.103 MB -> 110.924 MB.\n====== db-shootout (database) [default], iteration 1 completed (9343.782 ms) ======\n====== db-shootout (database) [default], iteration 2 started ======\nGC before operation: completed in 111.405 ms, heap usage 283.357 MB -> 112.478 MB.\n====== db-shootout (database) [default], iteration 2 completed (7499.305 ms) ======\n====== db-shootout (database) [default], iteration 3 started ======\nGC before operation: completed in 94.995 ms, heap usage 543.589 MB -> 114.314 MB.\n====== db-shootout (database) [default], iteration 3 completed (8724.019 ms) ======\n====== db-shootout (database) [default], iteration 4 started ======\nGC before operation: completed in 101.845 ms, heap usage 213.978 MB -> 159.872 MB.\n====== db-shootout (database) [default], iteration 4 completed (7010.765 ms) ======\n====== db-shootout (database) [default], iteration 5 started ======\nGC before operation: completed in 164.949 ms, heap usage 636.845 MB -> 167.668 MB.\n====== db-shootout (database) [default], iteration 5 completed (7721.156 ms) ======\n====== db-shootout (database) [default], iteration 6 started ======\nGC before operation: completed in 130.093 ms, heap usage 384.324 MB -> 167.486 MB.\n====== db-shootout (database) [default], iteration 6 completed (7647.257 ms) ======\n====== db-shootout (database) [default], iteration 7 started ======\nGC before operation: completed in 109.623 ms, heap usage 282.011 MB -> 175.857 MB.\n====== db-shootout (database) [default], iteration 7 completed (7329.669 ms) ======\n====== db-shootout (database) [default], iteration 8 started ======\nGC before operation: completed in 116.420 ms, heap usage 284.042 MB -> 175.655 MB.\n====== db-shootout (database) [default], iteration 8 completed (7329.711 ms) ======\n====== db-shootout (database) [default], iteration 9 started ======\nGC before operation: completed in 171.716 ms, heap usage 342.792 MB -> 175.912 MB.\n====== db-shootout (database) [default], iteration 9 completed (6774.502 ms) ======\n====== db-shootout (database) [default], iteration 10 started ======\nGC before operation: completed in 173.829 ms, heap usage 293.932 MB -> 175.555 MB.\n====== db-shootout (database) [default], iteration 10 completed (6874.618 ms) ======\n====== db-shootout (database) [default], iteration 11 started ======\nGC before operation: completed in 148.492 ms, heap usage 400.220 MB -> 180.072 MB.\n====== db-shootout (database) [default], iteration 11 completed (7713.732 ms) ======\n====== db-shootout (database) [default], iteration 12 started ======\nGC before operation: completed in 117.617 ms, heap usage 194.930 MB -> 178.866 MB.\n====== db-shootout (database) [default], iteration 12 completed (7466.876 ms) ======\n====== db-shootout (database) [default], iteration 13 started ======\nGC before operation: completed in 129.592 ms, heap usage 290.546 MB -> 179.243 MB.\n====== db-shootout (database) [default], iteration 13 completed (6989.489 ms) ======\n====== db-shootout (database) [default], iteration 14 started ======\nGC before operation: completed in 136.413 ms, heap usage 256.392 MB -> 179.022 MB.\n====== db-shootout (database) [default], iteration 14 completed (6647.630 ms) ======\nCreating graph database...\nLoading resources...\nPopulating database...\nfinagle-http on :39975 spawning 2 client and default number of server workers.\n====== finagle-http (web) [default], iteration 0 started ======\nGC before operation: completed in 98.510 ms, heap usage 612.157 MB -> 111.470 MB.\n====== finagle-http (web) [default], iteration 0 completed (17579.182 ms) ======\n====== finagle-http (web) [default], iteration 1 started ======\nGC before operation: completed in 132.580 ms, heap usage 293.599 MB -> 114.255 MB.\n====== finagle-http (web) [default], iteration 1 completed (7093.193 ms) ======\n====== finagle-http (web) [default], iteration 2 started ======\nGC before operation: completed in 139.872 ms, heap usage 142.229 MB -> 114.940 MB.\n====== finagle-http (web) [default], iteration 2 completed (3467.412 ms) ======\n====== finagle-http (web) [default], iteration 3 started ======\nGC before operation: completed in 102.621 ms, heap usage 139.149 MB -> 115.008 MB.\n====== finagle-http (web) [default], iteration 3 completed (2891.463 ms) ======\n====== finagle-http (web) [default], iteration 4 started ======\nGC before operation: completed in 101.518 ms, heap usage 138.053 MB -> 115.745 MB.\n====== finagle-http (web) [default], iteration 4 completed (3105.065 ms) ======\n====== finagle-http (web) [default], iteration 5 started ======\nGC before operation: completed in 107.976 ms, heap usage 136.110 MB -> 115.075 MB.\n====== finagle-http (web) [default], iteration 5 completed (2695.150 ms) ======\n====== finagle-http (web) [default], iteration 6 started ======\nGC before operation: completed in 112.486 ms, heap usage 136.249 MB -> 115.049 MB.\n====== finagle-http (web) [default], iteration 6 completed (2704.392 ms) ======\n====== finagle-http (web) [default], iteration 7 started ======\nGC before operation: completed in 114.377 ms, heap usage 135.245 MB -> 115.020 MB.\n====== finagle-http (web) [default], iteration 7 completed (2948.935 ms) ======\n====== finagle-http (web) [default], iteration 8 started ======\nGC before operation: completed in 122.053 ms, heap usage 135.666 MB -> 115.051 MB.\n====== finagle-http (web) [default], iteration 8 completed (2778.196 ms) ======\n====== finagle-http (web) [default], iteration 9 started ======\nGC before operation: completed in 109.678 ms, heap usage 136.088 MB -> 115.031 MB.\n====== finagle-http (web) [default], iteration 9 completed (2747.983 ms) ======\n====== finagle-http (web) [default], iteration 10 started ======\nGC before operation: completed in 99.536 ms, heap usage 135.498 MB -> 115.057 MB.\n====== finagle-http (web) [default], iteration 10 completed (2777.183 ms) ======\n====== finagle-http (web) [default], iteration 11 started ======\nGC before operation: completed in 100.476 ms, heap usage 134.090 MB -> 115.060 MB.\n====== finagle-http (web) [default], iteration 11 completed (2950.363 ms) ======\n====== finagle-http (web) [default], iteration 12 started ======\nGC before operation: completed in 101.952 ms, heap usage 134.523 MB -> 115.062 MB.\n====== finagle-http (web) [default], iteration 12 completed (2759.978 ms) ======\n====== finagle-http (web) [default], iteration 13 started ======\nGC before operation: completed in 109.865 ms, heap usage 135.138 MB -> 115.064 MB.\n====== finagle-http (web) [default], iteration 13 completed (2831.653 ms) ======\n====== finagle-http (web) [default], iteration 14 started ======\nGC before operation: completed in 105.948 ms, heap usage 134.532 MB -> 115.044 MB.\n====== finagle-http (web) [default], iteration 14 completed (2711.280 ms) ======\n====== reactors (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 105.850 ms, heap usage 151.704 MB -> 116.190 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 0 completed (17020.896 ms) ======\n====== reactors (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 104.599 ms, heap usage 181.251 MB -> 113.711 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 1 completed (13892.575 ms) ======\n====== reactors (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 95.102 ms, heap usage 174.198 MB -> 113.758 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 2 completed (12554.742 ms) ======\n====== reactors (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 116.893 ms, heap usage 619.954 MB -> 113.748 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 3 completed (13425.368 ms) ======\n====== reactors (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 116.460 ms, heap usage 633.733 MB -> 113.696 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 4 completed (12579.614 ms) ======\n====== reactors (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 101.795 ms, heap usage 678.695 MB -> 113.699 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 5 completed (13161.693 ms) ======\n====== reactors (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 172.615 ms, heap usage 622.470 MB -> 113.699 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 6 completed (12878.519 ms) ======\n====== reactors (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 112.228 ms, heap usage 718.171 MB -> 113.700 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 7 completed (12975.597 ms) ======\n====== reactors (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 98.762 ms, heap usage 716.077 MB -> 113.700 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 8 completed (12770.728 ms) ======\n====== reactors (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 102.126 ms, heap usage 748.105 MB -> 113.710 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 9 completed (13076.609 ms) ======\n====== reactors (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 98.649 ms, heap usage 687.606 MB -> 113.700 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 10 completed (13003.432 ms) ======\n====== reactors (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 101.379 ms, heap usage 732.195 MB -> 113.700 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 11 completed (14004.051 ms) ======\n====== reactors (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 105.159 ms, heap usage 627.924 MB -> 113.700 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 12 completed (13270.736 ms) ======\n====== reactors (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 108.063 ms, heap usage 752.521 MB -> 113.700 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 13 completed (13719.150 ms) ======\n====== reactors (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 122.216 ms, heap usage 634.683 MB -> 113.714 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 14 completed (13878.366 ms) ======\nNOTE: 'dec-tree' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== dec-tree (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 164.697 ms, heap usage 737.360 MB -> 126.493 MB.\n====== dec-tree (apache-spark) [default], iteration 0 completed (10211.732 ms) ======\n====== dec-tree (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 163.548 ms, heap usage 286.590 MB -> 158.107 MB.\n====== dec-tree (apache-spark) [default], iteration 1 completed (2450.505 ms) ======\n====== dec-tree (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 136.565 ms, heap usage 345.940 MB -> 158.492 MB.\n====== dec-tree (apache-spark) [default], iteration 2 completed (2009.743 ms) ======\n====== dec-tree (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 138.685 ms, heap usage 279.501 MB -> 158.716 MB.\n====== dec-tree (apache-spark) [default], iteration 3 completed (1989.605 ms) ======\n====== dec-tree (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 146.026 ms, heap usage 489.120 MB -> 158.915 MB.\n====== dec-tree (apache-spark) [default], iteration 4 completed (1714.918 ms) ======\n====== dec-tree (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 127.943 ms, heap usage 488.970 MB -> 159.140 MB.\n====== dec-tree (apache-spark) [default], iteration 5 completed (1705.237 ms) ======\n====== dec-tree (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 130.962 ms, heap usage 190.728 MB -> 158.870 MB.\n====== dec-tree (apache-spark) [default], iteration 6 completed (1675.410 ms) ======\n====== dec-tree (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 128.752 ms, heap usage 464.234 MB -> 159.494 MB.\n====== dec-tree (apache-spark) [default], iteration 7 completed (1687.319 ms) ======\n====== dec-tree (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 131.642 ms, heap usage 193.742 MB -> 159.062 MB.\n====== dec-tree (apache-spark) [default], iteration 8 completed (1553.852 ms) ======\n====== dec-tree (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 146.296 ms, heap usage 480.448 MB -> 168.014 MB.\n====== dec-tree (apache-spark) [default], iteration 9 completed (1516.748 ms) ======\n====== dec-tree (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 144.013 ms, heap usage 452.343 MB -> 159.895 MB.\n====== dec-tree (apache-spark) [default], iteration 10 completed (1582.871 ms) ======\n====== dec-tree (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 134.653 ms, heap usage 443.551 MB -> 160.089 MB.\n====== dec-tree (apache-spark) [default], iteration 11 completed (1470.741 ms) ======\n====== dec-tree (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 195.778 ms, heap usage 440.791 MB -> 160.224 MB.\n====== dec-tree (apache-spark) [default], iteration 12 completed (1455.447 ms) ======\n====== dec-tree (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 153.178 ms, heap usage 513.991 MB -> 160.372 MB.\n====== dec-tree (apache-spark) [default], iteration 13 completed (1444.480 ms) ======\n====== dec-tree (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 140.368 ms, heap usage 445.814 MB -> 160.435 MB.\n====== dec-tree (apache-spark) [default], iteration 14 completed (1470.615 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 0 started ======\nGC before operation: completed in 151.372 ms, heap usage 172.187 MB -> 143.483 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 534\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 53\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 9\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 7\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 10\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 8\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 16\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 4\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 11\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 22\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 4\tmaxttc = 534\tfailed = 0\ttotal = 4\nSHORT_TRAVERSAL:  successful = 6\tmaxttc = 16\tfailed = 0\ttotal = 6\nSHORT_TRAVERSAL_RO:  successful = 10\tmaxttc = 9\tfailed = 0\ttotal = 10\nOPERATION:  successful = 8\tmaxttc = 22\tfailed = 0\ttotal = 8\nOPERATION_RO:  successful = 12\tmaxttc = 11\tfailed = 0\ttotal = 12\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 59.88 op/s (59.88 op/s including failed)\nElapsed time: 0.67 s\n====== scala-stm-bench7 (scala) [default], iteration 0 completed (2511.480 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 1 started ======\nGC before operation: completed in 135.828 ms, heap usage 523.490 MB -> 142.053 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 470\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 13\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 8\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 14\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 9\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 8\tmaxttc = 534\tfailed = 0\ttotal = 8\nSHORT_TRAVERSAL:  successful = 12\tmaxttc = 16\tfailed = 0\ttotal = 12\nSHORT_TRAVERSAL_RO:  successful = 20\tmaxttc = 9\tfailed = 0\ttotal = 20\nOPERATION:  successful = 16\tmaxttc = 22\tfailed = 0\ttotal = 16\nOPERATION_RO:  successful = 24\tmaxttc = 14\tfailed = 0\ttotal = 24\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 155.64 op/s (155.64 op/s including failed)\nElapsed time: 0.51 s\n====== scala-stm-bench7 (scala) [default], iteration 1 completed (1783.062 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 2 started ======\nGC before operation: completed in 240.384 ms, heap usage 489.877 MB -> 142.054 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 517\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 11\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 8\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 12\tmaxttc = 534\tfailed = 0\ttotal = 12\nSHORT_TRAVERSAL:  successful = 18\tmaxttc = 16\tfailed = 0\ttotal = 18\nSHORT_TRAVERSAL_RO:  successful = 30\tmaxttc = 9\tfailed = 0\ttotal = 30\nOPERATION:  successful = 24\tmaxttc = 22\tfailed = 0\ttotal = 24\nOPERATION_RO:  successful = 36\tmaxttc = 14\tfailed = 0\ttotal = 36\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 220.59 op/s (220.59 op/s including failed)\nElapsed time: 0.54 s\n====== scala-stm-bench7 (scala) [default], iteration 2 completed (1408.246 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 3 started ======\nGC before operation: completed in 136.697 ms, heap usage 506.905 MB -> 142.050 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 496\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 7\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 4\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 16\tmaxttc = 534\tfailed = 0\ttotal = 16\nSHORT_TRAVERSAL:  successful = 24\tmaxttc = 16\tfailed = 0\ttotal = 24\nSHORT_TRAVERSAL_RO:  successful = 40\tmaxttc = 9\tfailed = 0\ttotal = 40\nOPERATION:  successful = 32\tmaxttc = 22\tfailed = 0\ttotal = 32\nOPERATION_RO:  successful = 48\tmaxttc = 14\tfailed = 0\ttotal = 48\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 310.08 op/s (310.08 op/s including failed)\nElapsed time: 0.52 s\n====== scala-stm-bench7 (scala) [default], iteration 3 completed (1342.530 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 4 started ======\nGC before operation: completed in 147.926 ms, heap usage 393.121 MB -> 142.060 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 384\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 7\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 4\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 20\tmaxttc = 534\tfailed = 0\ttotal = 20\nSHORT_TRAVERSAL:  successful = 30\tmaxttc = 16\tfailed = 0\ttotal = 30\nSHORT_TRAVERSAL_RO:  successful = 50\tmaxttc = 9\tfailed = 0\ttotal = 50\nOPERATION:  successful = 40\tmaxttc = 22\tfailed = 0\ttotal = 40\nOPERATION_RO:  successful = 60\tmaxttc = 14\tfailed = 0\ttotal = 60\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 506.33 op/s (506.33 op/s including failed)\nElapsed time: 0.40 s\n====== scala-stm-bench7 (scala) [default], iteration 4 completed (1272.510 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 5 started ======\nGC before operation: completed in 185.238 ms, heap usage 380.599 MB -> 142.044 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 518\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 11\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 6\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 24\tmaxttc = 534\tfailed = 0\ttotal = 24\nSHORT_TRAVERSAL:  successful = 36\tmaxttc = 16\tfailed = 0\ttotal = 36\nSHORT_TRAVERSAL_RO:  successful = 60\tmaxttc = 9\tfailed = 0\ttotal = 60\nOPERATION:  successful = 48\tmaxttc = 22\tfailed = 0\ttotal = 48\nOPERATION_RO:  successful = 72\tmaxttc = 14\tfailed = 0\ttotal = 72\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 441.99 op/s (441.99 op/s including failed)\nElapsed time: 0.54 s\n====== scala-stm-bench7 (scala) [default], iteration 5 completed (1480.501 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 6 started ======\nGC before operation: completed in 153.068 ms, heap usage 507.102 MB -> 142.056 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 463\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 11\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 8\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 8\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 28\tmaxttc = 534\tfailed = 0\ttotal = 28\nSHORT_TRAVERSAL:  successful = 42\tmaxttc = 16\tfailed = 0\ttotal = 42\nSHORT_TRAVERSAL_RO:  successful = 70\tmaxttc = 9\tfailed = 0\ttotal = 70\nOPERATION:  successful = 56\tmaxttc = 22\tfailed = 0\ttotal = 56\nOPERATION_RO:  successful = 84\tmaxttc = 14\tfailed = 0\ttotal = 84\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 577.32 op/s (577.32 op/s including failed)\nElapsed time: 0.49 s\n====== scala-stm-bench7 (scala) [default], iteration 6 completed (1372.866 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 7 started ======\nGC before operation: completed in 147.549 ms, heap usage 507.608 MB -> 142.061 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 483\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 9\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 32\tmaxttc = 534\tfailed = 0\ttotal = 32\nSHORT_TRAVERSAL:  successful = 48\tmaxttc = 16\tfailed = 0\ttotal = 48\nSHORT_TRAVERSAL_RO:  successful = 80\tmaxttc = 9\tfailed = 0\ttotal = 80\nOPERATION:  successful = 64\tmaxttc = 22\tfailed = 0\ttotal = 64\nOPERATION_RO:  successful = 96\tmaxttc = 14\tfailed = 0\ttotal = 96\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 642.57 op/s (642.57 op/s including failed)\nElapsed time: 0.50 s\n====== scala-stm-bench7 (scala) [default], iteration 7 completed (1368.893 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 8 started ======\nGC before operation: completed in 156.075 ms, heap usage 505.601 MB -> 142.044 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 492\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 10\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 4\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 36\tmaxttc = 534\tfailed = 0\ttotal = 36\nSHORT_TRAVERSAL:  successful = 54\tmaxttc = 16\tfailed = 0\ttotal = 54\nSHORT_TRAVERSAL_RO:  successful = 90\tmaxttc = 9\tfailed = 0\ttotal = 90\nOPERATION:  successful = 72\tmaxttc = 22\tfailed = 0\ttotal = 72\nOPERATION_RO:  successful = 108\tmaxttc = 14\tfailed = 0\ttotal = 108\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 705.88 op/s (705.88 op/s including failed)\nElapsed time: 0.51 s\n====== scala-stm-bench7 (scala) [default], iteration 8 completed (1469.754 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 9 started ======\nGC before operation: completed in 137.134 ms, heap usage 507.110 MB -> 142.056 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 474\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 10\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 4\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 40\tmaxttc = 534\tfailed = 0\ttotal = 40\nSHORT_TRAVERSAL:  successful = 60\tmaxttc = 16\tfailed = 0\ttotal = 60\nSHORT_TRAVERSAL_RO:  successful = 100\tmaxttc = 9\tfailed = 0\ttotal = 100\nOPERATION:  successful = 80\tmaxttc = 22\tfailed = 0\ttotal = 80\nOPERATION_RO:  successful = 120\tmaxttc = 14\tfailed = 0\ttotal = 120\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 818.00 op/s (818.00 op/s including failed)\nElapsed time: 0.49 s\n====== scala-stm-bench7 (scala) [default], iteration 9 completed (1497.723 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 10 started ======\nGC before operation: completed in 389.866 ms, heap usage 507.497 MB -> 295.408 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 340\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 11\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 44\tmaxttc = 534\tfailed = 0\ttotal = 44\nSHORT_TRAVERSAL:  successful = 66\tmaxttc = 16\tfailed = 0\ttotal = 66\nSHORT_TRAVERSAL_RO:  successful = 110\tmaxttc = 9\tfailed = 0\ttotal = 110\nOPERATION:  successful = 88\tmaxttc = 22\tfailed = 0\ttotal = 88\nOPERATION_RO:  successful = 132\tmaxttc = 14\tfailed = 0\ttotal = 132\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1229.05 op/s (1229.05 op/s including failed)\nElapsed time: 0.36 s\n====== scala-stm-bench7 (scala) [default], iteration 10 completed (1120.384 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 11 started ======\nGC before operation: completed in 140.313 ms, heap usage 400.744 MB -> 142.052 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 600\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 12\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 48\tmaxttc = 600\tfailed = 0\ttotal = 48\nSHORT_TRAVERSAL:  successful = 72\tmaxttc = 16\tfailed = 0\ttotal = 72\nSHORT_TRAVERSAL_RO:  successful = 120\tmaxttc = 9\tfailed = 0\ttotal = 120\nOPERATION:  successful = 96\tmaxttc = 22\tfailed = 0\ttotal = 96\nOPERATION_RO:  successful = 144\tmaxttc = 14\tfailed = 0\ttotal = 144\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 770.47 op/s (770.47 op/s including failed)\nElapsed time: 0.62 s\n====== scala-stm-bench7 (scala) [default], iteration 11 completed (1498.094 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 12 started ======\nGC before operation: completed in 158.043 ms, heap usage 507.099 MB -> 142.057 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 429\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 6\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 52\tmaxttc = 600\tfailed = 0\ttotal = 52\nSHORT_TRAVERSAL:  successful = 78\tmaxttc = 16\tfailed = 0\ttotal = 78\nSHORT_TRAVERSAL_RO:  successful = 130\tmaxttc = 9\tfailed = 0\ttotal = 130\nOPERATION:  successful = 104\tmaxttc = 22\tfailed = 0\ttotal = 104\nOPERATION_RO:  successful = 156\tmaxttc = 14\tfailed = 0\ttotal = 156\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1184.51 op/s (1184.51 op/s including failed)\nElapsed time: 0.44 s\n====== scala-stm-bench7 (scala) [default], iteration 12 completed (1301.468 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 13 started ======\nGC before operation: completed in 157.214 ms, heap usage 430.109 MB -> 142.044 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 441\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 8\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 7\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 56\tmaxttc = 600\tfailed = 0\ttotal = 56\nSHORT_TRAVERSAL:  successful = 84\tmaxttc = 16\tfailed = 0\ttotal = 84\nSHORT_TRAVERSAL_RO:  successful = 140\tmaxttc = 9\tfailed = 0\ttotal = 140\nOPERATION:  successful = 112\tmaxttc = 22\tfailed = 0\ttotal = 112\nOPERATION_RO:  successful = 168\tmaxttc = 14\tfailed = 0\ttotal = 168\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1244.44 op/s (1244.44 op/s including failed)\nElapsed time: 0.45 s\n====== scala-stm-bench7 (scala) [default], iteration 13 completed (1351.470 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 14 started ======\nGC before operation: completed in 141.475 ms, heap usage 507.530 MB -> 142.049 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 482\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 10\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 60\tmaxttc = 600\tfailed = 0\ttotal = 60\nSHORT_TRAVERSAL:  successful = 90\tmaxttc = 16\tfailed = 0\ttotal = 90\nSHORT_TRAVERSAL_RO:  successful = 150\tmaxttc = 9\tfailed = 0\ttotal = 150\nOPERATION:  successful = 120\tmaxttc = 22\tfailed = 0\ttotal = 120\nOPERATION_RO:  successful = 180\tmaxttc = 14\tfailed = 0\ttotal = 180\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1204.82 op/s (1204.82 op/s including failed)\nElapsed time: 0.50 s\n====== scala-stm-bench7 (scala) [default], iteration 14 completed (1439.994 ms) ======\nNOTE: 'naive-bayes' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== naive-bayes (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 157.559 ms, heap usage 173.043 MB -> 152.727 MB.\n====== naive-bayes (apache-spark) [default], iteration 0 completed (40505.768 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 203.021 ms, heap usage 442.679 MB -> 428.812 MB.\n====== naive-bayes (apache-spark) [default], iteration 1 completed (23313.942 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 184.892 ms, heap usage 455.964 MB -> 429.040 MB.\n====== naive-bayes (apache-spark) [default], iteration 2 completed (22137.040 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 207.126 ms, heap usage 447.901 MB -> 429.105 MB.\n====== naive-bayes (apache-spark) [default], iteration 3 completed (22166.338 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 178.331 ms, heap usage 447.914 MB -> 429.201 MB.\n====== naive-bayes (apache-spark) [default], iteration 4 completed (22021.017 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 188.053 ms, heap usage 531.524 MB -> 429.272 MB.\n====== naive-bayes (apache-spark) [default], iteration 5 completed (21499.434 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 198.890 ms, heap usage 499.768 MB -> 429.344 MB.\n====== naive-bayes (apache-spark) [default], iteration 6 completed (21187.520 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 175.395 ms, heap usage 531.319 MB -> 429.410 MB.\n====== naive-bayes (apache-spark) [default], iteration 7 completed (22419.763 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 282.874 ms, heap usage 492.795 MB -> 429.532 MB.\n====== naive-bayes (apache-spark) [default], iteration 8 completed (21701.999 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 167.999 ms, heap usage 455.434 MB -> 427.583 MB.\n====== naive-bayes (apache-spark) [default], iteration 9 completed (20956.195 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 211.706 ms, heap usage 813.593 MB -> 421.269 MB.\n====== naive-bayes (apache-spark) [default], iteration 10 completed (21463.384 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 165.327 ms, heap usage 542.556 MB -> 422.040 MB.\n====== naive-bayes (apache-spark) [default], iteration 11 completed (20713.293 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 156.444 ms, heap usage 742.313 MB -> 422.032 MB.\n====== naive-bayes (apache-spark) [default], iteration 12 completed (20682.267 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 143.812 ms, heap usage 741.763 MB -> 422.119 MB.\n====== naive-bayes (apache-spark) [default], iteration 13 completed (21341.442 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 154.760 ms, heap usage 448.917 MB -> 422.205 MB.\n====== naive-bayes (apache-spark) [default], iteration 14 completed (21277.786 ms) ======\nNOTE: 'als' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== als (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 170.517 ms, heap usage 342.184 MB -> 167.715 MB.\n====== als (apache-spark) [default], iteration 0 completed (17245.293 ms) ======\n====== als (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 206.106 ms, heap usage 381.163 MB -> 192.447 MB.\n====== als (apache-spark) [default], iteration 1 completed (8374.551 ms) ======\n====== als (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 203.403 ms, heap usage 692.875 MB -> 193.732 MB.\n====== als (apache-spark) [default], iteration 2 completed (7613.825 ms) ======\n====== als (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 197.033 ms, heap usage 770.490 MB -> 194.322 MB.\n====== als (apache-spark) [default], iteration 3 completed (7498.159 ms) ======\n====== als (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 222.854 ms, heap usage 724.610 MB -> 194.842 MB.\n====== als (apache-spark) [default], iteration 4 completed (7222.046 ms) ======\n====== als (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 199.073 ms, heap usage 630.683 MB -> 195.312 MB.\n====== als (apache-spark) [default], iteration 5 completed (6777.255 ms) ======\n====== als (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 196.178 ms, heap usage 670.045 MB -> 195.920 MB.\n====== als (apache-spark) [default], iteration 6 completed (6716.076 ms) ======\n====== als (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 196.405 ms, heap usage 703.914 MB -> 196.465 MB.\n====== als (apache-spark) [default], iteration 7 completed (6706.499 ms) ======\n====== als (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 200.429 ms, heap usage 690.188 MB -> 197.117 MB.\n====== als (apache-spark) [default], iteration 8 completed (6692.376 ms) ======\n====== als (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 206.096 ms, heap usage 703.429 MB -> 197.402 MB.\n====== als (apache-spark) [default], iteration 9 completed (6829.927 ms) ======\n====== als (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 210.566 ms, heap usage 722.096 MB -> 197.832 MB.\n====== als (apache-spark) [default], iteration 10 completed (6464.726 ms) ======\n====== als (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 207.892 ms, heap usage 691.523 MB -> 197.993 MB.\n====== als (apache-spark) [default], iteration 11 completed (6570.330 ms) ======\n====== als (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 235.043 ms, heap usage 728.923 MB -> 198.219 MB.\n====== als (apache-spark) [default], iteration 12 completed (6550.026 ms) ======\n====== als (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 204.262 ms, heap usage 672.212 MB -> 198.515 MB.\n====== als (apache-spark) [default], iteration 13 completed (6596.781 ms) ======\n====== als (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 202.815 ms, heap usage 743.348 MB -> 198.767 MB.\n====== als (apache-spark) [default], iteration 14 completed (6349.995 ms) ======\n====== par-mnemonics (functional) [default], iteration 0 started ======\nGC before operation: completed in 300.165 ms, heap usage 696.077 MB -> 179.147 MB.\n====== par-mnemonics (functional) [default], iteration 0 completed (4479.313 ms) ======\n====== par-mnemonics (functional) [default], iteration 1 started ======\nGC before operation: completed in 193.254 ms, heap usage 336.437 MB -> 179.107 MB.\n====== par-mnemonics (functional) [default], iteration 1 completed (4119.000 ms) ======\n====== par-mnemonics (functional) [default], iteration 2 started ======\nGC before operation: completed in 192.306 ms, heap usage 405.576 MB -> 179.104 MB.\n====== par-mnemonics (functional) [default], iteration 2 completed (4258.146 ms) ======\n====== par-mnemonics (functional) [default], iteration 3 started ======\nGC before operation: completed in 193.004 ms, heap usage 324.174 MB -> 179.108 MB.\n====== par-mnemonics (functional) [default], iteration 3 completed (4452.797 ms) ======\n====== par-mnemonics (functional) [default], iteration 4 started ======\nGC before operation: completed in 177.712 ms, heap usage 419.693 MB -> 179.105 MB.\n====== par-mnemonics (functional) [default], iteration 4 completed (3933.250 ms) ======\n====== par-mnemonics (functional) [default], iteration 5 started ======\nGC before operation: completed in 186.258 ms, heap usage 324.982 MB -> 179.105 MB.\n====== par-mnemonics (functional) [default], iteration 5 completed (4007.080 ms) ======\n====== par-mnemonics (functional) [default], iteration 6 started ======\nGC before operation: completed in 190.779 ms, heap usage 309.104 MB -> 179.121 MB.\n====== par-mnemonics (functional) [default], iteration 6 completed (3953.148 ms) ======\n====== par-mnemonics (functional) [default], iteration 7 started ======\nGC before operation: completed in 204.409 ms, heap usage 312.674 MB -> 179.116 MB.\n====== par-mnemonics (functional) [default], iteration 7 completed (4068.803 ms) ======\n====== par-mnemonics (functional) [default], iteration 8 started ======\nGC before operation: completed in 187.505 ms, heap usage 315.067 MB -> 179.106 MB.\n====== par-mnemonics (functional) [default], iteration 8 completed (3881.191 ms) ======\n====== par-mnemonics (functional) [default], iteration 9 started ======\nGC before operation: completed in 178.405 ms, heap usage 312.898 MB -> 179.106 MB.\n====== par-mnemonics (functional) [default], iteration 9 completed (4171.076 ms) ======\n====== par-mnemonics (functional) [default], iteration 10 started ======\nGC before operation: completed in 188.686 ms, heap usage 312.174 MB -> 179.106 MB.\n====== par-mnemonics (functional) [default], iteration 10 completed (3953.921 ms) ======\n====== par-mnemonics (functional) [default], iteration 11 started ======\nGC before operation: completed in 191.991 ms, heap usage 319.854 MB -> 179.106 MB.\n====== par-mnemonics (functional) [default], iteration 11 completed (4020.731 ms) ======\n====== par-mnemonics (functional) [default], iteration 12 started ======\nGC before operation: completed in 194.977 ms, heap usage 313.371 MB -> 179.106 MB.\n====== par-mnemonics (functional) [default], iteration 12 completed (4155.199 ms) ======\n====== par-mnemonics (functional) [default], iteration 13 started ======\nGC before operation: completed in 186.738 ms, heap usage 349.674 MB -> 179.103 MB.\n====== par-mnemonics (functional) [default], iteration 13 completed (4420.589 ms) ======\n====== par-mnemonics (functional) [default], iteration 14 started ======\nGC before operation: completed in 189.534 ms, heap usage 309.674 MB -> 179.103 MB.\n====== par-mnemonics (functional) [default], iteration 14 completed (3653.633 ms) ======\n====== scala-kmeans (scala) [default], iteration 0 started ======\nGC before operation: completed in 259.501 ms, heap usage 343.603 MB -> 201.421 MB.\n====== scala-kmeans (scala) [default], iteration 0 completed (339.766 ms) ======\n====== scala-kmeans (scala) [default], iteration 1 started ======\nGC before operation: completed in 202.460 ms, heap usage 256.921 MB -> 201.453 MB.\n====== scala-kmeans (scala) [default], iteration 1 completed (226.462 ms) ======\n====== scala-kmeans (scala) [default], iteration 2 started ======\nGC before operation: completed in 202.113 ms, heap usage 323.453 MB -> 201.453 MB.\n====== scala-kmeans (scala) [default], iteration 2 completed (224.094 ms) ======\n====== scala-kmeans (scala) [default], iteration 3 started ======\nGC before operation: completed in 183.749 ms, heap usage 322.953 MB -> 201.453 MB.\n====== scala-kmeans (scala) [default], iteration 3 completed (222.411 ms) ======\n====== scala-kmeans (scala) [default], iteration 4 started ======\nGC before operation: completed in 202.302 ms, heap usage 322.953 MB -> 201.453 MB.\n====== scala-kmeans (scala) [default], iteration 4 completed (223.270 ms) ======\n====== scala-kmeans (scala) [default], iteration 5 started ======\nGC before operation: completed in 202.640 ms, heap usage 322.953 MB -> 201.455 MB.\n====== scala-kmeans (scala) [default], iteration 5 completed (224.528 ms) ======\n====== scala-kmeans (scala) [default], iteration 6 started ======\nGC before operation: completed in 188.615 ms, heap usage 322.953 MB -> 201.453 MB.\n====== scala-kmeans (scala) [default], iteration 6 completed (231.478 ms) ======\n====== scala-kmeans (scala) [default], iteration 7 started ======\nGC before operation: completed in 206.202 ms, heap usage 322.953 MB -> 201.472 MB.\n====== scala-kmeans (scala) [default], iteration 7 completed (229.890 ms) ======\n====== scala-kmeans (scala) [default], iteration 8 started ======\nGC before operation: completed in 201.694 ms, heap usage 322.954 MB -> 201.454 MB.\n====== scala-kmeans (scala) [default], iteration 8 completed (259.279 ms) ======\n====== scala-kmeans (scala) [default], iteration 9 started ======\nGC before operation: completed in 185.242 ms, heap usage 332.551 MB -> 201.483 MB.\n====== scala-kmeans (scala) [default], iteration 9 completed (235.502 ms) ======\n====== scala-kmeans (scala) [default], iteration 10 started ======\nGC before operation: completed in 205.981 ms, heap usage 323.461 MB -> 201.461 MB.\n====== scala-kmeans (scala) [default], iteration 10 completed (235.422 ms) ======\n====== scala-kmeans (scala) [default], iteration 11 started ======\nGC before operation: completed in 205.946 ms, heap usage 322.961 MB -> 201.489 MB.\n====== scala-kmeans (scala) [default], iteration 11 completed (339.977 ms) ======\n====== scala-kmeans (scala) [default], iteration 12 started ======\nGC before operation: completed in 200.922 ms, heap usage 330.961 MB -> 201.462 MB.\n====== scala-kmeans (scala) [default], iteration 12 completed (222.818 ms) ======\n====== scala-kmeans (scala) [default], iteration 13 started ======\nGC before operation: completed in 192.781 ms, heap usage 322.962 MB -> 201.463 MB.\n====== scala-kmeans (scala) [default], iteration 13 completed (220.477 ms) ======\n====== scala-kmeans (scala) [default], iteration 14 started ======\nGC before operation: completed in 202.779 ms, heap usage 322.963 MB -> 201.463 MB.\n====== scala-kmeans (scala) [default], iteration 14 completed (222.039 ms) ======\n====== philosophers (scala) [default], iteration 0 started ======\nGC before operation: completed in 241.597 ms, heap usage 324.963 MB -> 180.463 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 0 completed (1409.944 ms) ======\n====== philosophers (scala) [default], iteration 1 started ======\nGC before operation: completed in 243.462 ms, heap usage 184.232 MB -> 180.383 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 1 completed (604.601 ms) ======\n====== philosophers (scala) [default], iteration 2 started ======\nGC before operation: completed in 192.650 ms, heap usage 525.881 MB -> 180.384 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 2 completed (741.321 ms) ======\n====== philosophers (scala) [default], iteration 3 started ======\nGC before operation: completed in 181.298 ms, heap usage 189.882 MB -> 180.385 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 3 completed (757.745 ms) ======\n====== philosophers (scala) [default], iteration 4 started ======\nGC before operation: completed in 201.106 ms, heap usage 194.464 MB -> 180.382 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 4 completed (659.879 ms) ======\n====== philosophers (scala) [default], iteration 5 started ======\nGC before operation: completed in 199.590 ms, heap usage 538.382 MB -> 180.402 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 5 completed (761.913 ms) ======\n====== philosophers (scala) [default], iteration 6 started ======\nGC before operation: completed in 180.230 ms, heap usage 206.336 MB -> 180.407 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 6 completed (582.194 ms) ======\n====== philosophers (scala) [default], iteration 7 started ======\nGC before operation: completed in 181.803 ms, heap usage 539.882 MB -> 180.387 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 7 completed (719.670 ms) ======\n====== philosophers (scala) [default], iteration 8 started ======\nGC before operation: completed in 205.901 ms, heap usage 205.086 MB -> 180.392 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 8 completed (711.867 ms) ======\n====== philosophers (scala) [default], iteration 9 started ======\nGC before operation: completed in 181.841 ms, heap usage 201.039 MB -> 180.385 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 9 completed (668.165 ms) ======\n====== philosophers (scala) [default], iteration 10 started ======\nGC before operation: completed in 199.598 ms, heap usage 194.511 MB -> 180.385 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 10 completed (566.751 ms) ======\n====== philosophers (scala) [default], iteration 11 started ======\nGC before operation: completed in 283.702 ms, heap usage 541.882 MB -> 180.382 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 11 completed (656.239 ms) ======\n====== philosophers (scala) [default], iteration 12 started ======\nGC before operation: completed in 177.024 ms, heap usage 193.987 MB -> 180.397 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 12 completed (612.935 ms) ======\n====== philosophers (scala) [default], iteration 13 started ======\nGC before operation: completed in 187.202 ms, heap usage 182.739 MB -> 180.398 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 13 completed (607.424 ms) ======\n====== philosophers (scala) [default], iteration 14 started ======\nGC before operation: completed in 194.918 ms, heap usage 191.477 MB -> 180.385 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 14 completed (767.034 ms) ======\nNOTE: 'log-regression' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== log-regression (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 200.091 ms, heap usage 269.882 MB -> 192.522 MB.\n====== log-regression (apache-spark) [default], iteration 0 completed (10200.692 ms) ======\n====== log-regression (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 265.987 ms, heap usage 685.270 MB -> 272.962 MB.\n====== log-regression (apache-spark) [default], iteration 1 completed (2383.667 ms) ======\n====== log-regression (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 191.716 ms, heap usage 723.618 MB -> 273.054 MB.\n====== log-regression (apache-spark) [default], iteration 2 completed (1814.105 ms) ======\n====== log-regression (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 214.202 ms, heap usage 803.623 MB -> 273.940 MB.\n====== log-regression (apache-spark) [default], iteration 3 completed (1769.557 ms) ======\n====== log-regression (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 295.871 ms, heap usage 736.077 MB -> 273.784 MB.\n====== log-regression (apache-spark) [default], iteration 4 completed (1748.066 ms) ======\n====== log-regression (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 252.860 ms, heap usage 796.034 MB -> 274.567 MB.\n====== log-regression (apache-spark) [default], iteration 5 completed (1730.830 ms) ======\n====== log-regression (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 193.306 ms, heap usage 772.790 MB -> 274.731 MB.\n====== log-regression (apache-spark) [default], iteration 6 completed (1570.874 ms) ======\n====== log-regression (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 196.220 ms, heap usage 745.435 MB -> 274.773 MB.\n====== log-regression (apache-spark) [default], iteration 7 completed (1425.369 ms) ======\n====== log-regression (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 213.785 ms, heap usage 790.879 MB -> 275.216 MB.\n====== log-regression (apache-spark) [default], iteration 8 completed (1372.563 ms) ======\n====== log-regression (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 203.644 ms, heap usage 775.698 MB -> 275.341 MB.\n====== log-regression (apache-spark) [default], iteration 9 completed (1356.486 ms) ======\n====== log-regression (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 208.058 ms, heap usage 789.384 MB -> 275.613 MB.\n====== log-regression (apache-spark) [default], iteration 10 completed (1377.665 ms) ======\n====== log-regression (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 215.160 ms, heap usage 769.988 MB -> 275.721 MB.\n====== log-regression (apache-spark) [default], iteration 11 completed (1441.676 ms) ======\n====== log-regression (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 207.060 ms, heap usage 779.839 MB -> 275.885 MB.\n====== log-regression (apache-spark) [default], iteration 12 completed (1344.311 ms) ======\n====== log-regression (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 210.402 ms, heap usage 768.518 MB -> 276.105 MB.\n====== log-regression (apache-spark) [default], iteration 13 completed (1502.652 ms) ======\n====== log-regression (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 202.788 ms, heap usage 765.290 MB -> 276.190 MB.\n====== log-regression (apache-spark) [default], iteration 14 completed (1510.368 ms) ======\n"
    },
    "gauss-mix": {
        "times": [
            32765.783,
            28169.443,
            26149.767,
            26250.307,
            24299.63,
            23670.122,
            19763.832,
            20519.23,
            19780.493,
            18838.189,
            25146.781,
            18846.665,
            22796.26,
            23208.565,
            19702.003
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 111.440 ms, heap usage 193.716 MB -> 76.034 MB.\n====== scrabble (functional) [default], iteration 0 completed (1746.818 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 75.425 ms, heap usage 124.295 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 1 completed (822.799 ms) ======\n====== scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 103.806 ms, heap usage 309.363 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 2 completed (876.688 ms) ======\n====== scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 108.057 ms, heap usage 131.528 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 3 completed (772.422 ms) ======\n====== scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 90.330 ms, heap usage 339.197 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 4 completed (664.922 ms) ======\n====== scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 78.633 ms, heap usage 242.581 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 5 completed (767.926 ms) ======\n====== scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 80.529 ms, heap usage 243.067 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 6 completed (771.953 ms) ======\n====== scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 87.821 ms, heap usage 169.966 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 7 completed (713.175 ms) ======\n====== scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 85.627 ms, heap usage 126.363 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 8 completed (705.321 ms) ======\n====== scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 77.713 ms, heap usage 279.273 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 9 completed (595.178 ms) ======\n====== scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 90.853 ms, heap usage 197.665 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 10 completed (653.981 ms) ======\n====== scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 80.787 ms, heap usage 125.936 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 11 completed (671.613 ms) ======\n====== scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 81.092 ms, heap usage 326.788 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 12 completed (614.500 ms) ======\n====== scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 74.421 ms, heap usage 199.244 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 13 completed (687.061 ms) ======\n====== scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 77.486 ms, heap usage 357.036 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 14 completed (698.120 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 39.864 ms, heap usage 626.576 MB -> 29.596 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (20832.995 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 151.296 ms, heap usage 587.802 MB -> 148.935 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (10726.986 ms) ======\n====== page-rank (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 139.528 ms, heap usage 662.229 MB -> 149.044 MB.\n====== page-rank (apache-spark) [default], iteration 2 completed (10497.012 ms) ======\n====== page-rank (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 145.301 ms, heap usage 620.847 MB -> 149.161 MB.\n====== page-rank (apache-spark) [default], iteration 3 completed (10683.078 ms) ======\n====== page-rank (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 146.272 ms, heap usage 595.956 MB -> 149.275 MB.\n====== page-rank (apache-spark) [default], iteration 4 completed (11158.857 ms) ======\n====== page-rank (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 150.477 ms, heap usage 624.956 MB -> 149.389 MB.\n====== page-rank (apache-spark) [default], iteration 5 completed (10816.748 ms) ======\n====== page-rank (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 152.563 ms, heap usage 475.956 MB -> 149.705 MB.\n====== page-rank (apache-spark) [default], iteration 6 completed (10797.777 ms) ======\n====== page-rank (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 153.431 ms, heap usage 575.956 MB -> 149.630 MB.\n====== page-rank (apache-spark) [default], iteration 7 completed (10320.855 ms) ======\n====== page-rank (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 154.161 ms, heap usage 494.956 MB -> 149.734 MB.\n====== page-rank (apache-spark) [default], iteration 8 completed (10797.875 ms) ======\n====== page-rank (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 159.810 ms, heap usage 685.884 MB -> 149.850 MB.\n====== page-rank (apache-spark) [default], iteration 9 completed (10426.551 ms) ======\n====== page-rank (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 138.119 ms, heap usage 483.136 MB -> 149.929 MB.\n====== page-rank (apache-spark) [default], iteration 10 completed (11319.287 ms) ======\n====== page-rank (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 160.571 ms, heap usage 417.218 MB -> 150.048 MB.\n====== page-rank (apache-spark) [default], iteration 11 completed (10773.541 ms) ======\n====== page-rank (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 153.774 ms, heap usage 591.956 MB -> 150.197 MB.\n====== page-rank (apache-spark) [default], iteration 12 completed (10583.141 ms) ======\n====== page-rank (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 151.297 ms, heap usage 385.309 MB -> 150.212 MB.\n====== page-rank (apache-spark) [default], iteration 13 completed (11225.389 ms) ======\n====== page-rank (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 138.750 ms, heap usage 506.956 MB -> 150.287 MB.\n====== page-rank (apache-spark) [default], iteration 14 completed (11253.752 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 60.640 ms, heap usage 661.207 MB -> 32.216 MB.\n====== future-genetic (functional) [default], iteration 0 completed (14742.129 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 51.821 ms, heap usage 114.841 MB -> 33.158 MB.\n====== future-genetic (functional) [default], iteration 1 completed (11014.493 ms) ======\n====== future-genetic (functional) [default], iteration 2 started ======\nGC before operation: completed in 34.821 ms, heap usage 68.320 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 2 completed (10628.352 ms) ======\n====== future-genetic (functional) [default], iteration 3 started ======\nGC before operation: completed in 38.504 ms, heap usage 57.876 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 3 completed (10722.143 ms) ======\n====== future-genetic (functional) [default], iteration 4 started ======\nGC before operation: completed in 39.692 ms, heap usage 145.206 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 4 completed (10840.012 ms) ======\n====== future-genetic (functional) [default], iteration 5 started ======\nGC before operation: completed in 38.411 ms, heap usage 81.011 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 5 completed (10598.435 ms) ======\n====== future-genetic (functional) [default], iteration 6 started ======\nGC before operation: completed in 40.019 ms, heap usage 144.534 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 6 completed (10786.150 ms) ======\n====== future-genetic (functional) [default], iteration 7 started ======\nGC before operation: completed in 48.015 ms, heap usage 171.419 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 7 completed (10652.683 ms) ======\n====== future-genetic (functional) [default], iteration 8 started ======\nGC before operation: completed in 35.498 ms, heap usage 37.426 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 8 completed (10488.698 ms) ======\n====== future-genetic (functional) [default], iteration 9 started ======\nGC before operation: completed in 42.383 ms, heap usage 130.505 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 9 completed (10682.271 ms) ======\n====== future-genetic (functional) [default], iteration 10 started ======\nGC before operation: completed in 48.742 ms, heap usage 134.970 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 10 completed (10549.840 ms) ======\n====== future-genetic (functional) [default], iteration 11 started ======\nGC before operation: completed in 41.808 ms, heap usage 156.009 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 11 completed (10851.547 ms) ======\n====== future-genetic (functional) [default], iteration 12 started ======\nGC before operation: completed in 40.139 ms, heap usage 163.381 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 12 completed (10940.461 ms) ======\n====== future-genetic (functional) [default], iteration 13 started ======\nGC before operation: completed in 35.048 ms, heap usage 80.372 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 13 completed (10876.099 ms) ======\n====== future-genetic (functional) [default], iteration 14 started ======\nGC before operation: completed in 43.468 ms, heap usage 62.997 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 14 completed (10763.606 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 70.620 ms, heap usage 85.721 MB -> 33.974 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 11\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (23373.227 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 371.313 ms, heap usage 780.679 MB -> 161.200 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (17055.803 ms) ======\n====== akka-uct (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 323.521 ms, heap usage 714.804 MB -> 140.346 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 2 completed (16644.579 ms) ======\n====== akka-uct (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 312.697 ms, heap usage 606.138 MB -> 139.703 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 3 completed (16230.901 ms) ======\n====== akka-uct (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 272.343 ms, heap usage 694.413 MB -> 139.888 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 4 completed (16222.783 ms) ======\n====== akka-uct (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 288.309 ms, heap usage 549.430 MB -> 124.976 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 5 completed (16061.576 ms) ======\n====== akka-uct (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 254.080 ms, heap usage 570.484 MB -> 130.699 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 6 completed (15769.690 ms) ======\n====== akka-uct (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 387.396 ms, heap usage 619.770 MB -> 158.750 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 7 completed (15901.168 ms) ======\n====== akka-uct (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 304.489 ms, heap usage 580.964 MB -> 149.879 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 8 completed (16178.151 ms) ======\n====== akka-uct (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 253.043 ms, heap usage 553.450 MB -> 150.939 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 9 completed (15874.839 ms) ======\n====== akka-uct (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 301.130 ms, heap usage 528.928 MB -> 139.937 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 10 completed (15982.587 ms) ======\n====== akka-uct (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 267.305 ms, heap usage 626.465 MB -> 131.010 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 11 completed (16353.495 ms) ======\n====== akka-uct (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 294.293 ms, heap usage 500.855 MB -> 153.125 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 12 completed (15969.903 ms) ======\n====== akka-uct (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 292.350 ms, heap usage 647.259 MB -> 125.388 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 13 completed (15322.843 ms) ======\n====== akka-uct (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 252.391 ms, heap usage 562.070 MB -> 128.190 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 14 completed (16083.172 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 2 (out of 2) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 134.630 ms, heap usage 463.678 MB -> 85.476 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (22878.805 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 103.188 ms, heap usage 272.080 MB -> 100.040 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (14811.341 ms) ======\n====== movie-lens (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 144.144 ms, heap usage 208.849 MB -> 97.194 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 2 completed (13632.892 ms) ======\n====== movie-lens (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 122.890 ms, heap usage 173.120 MB -> 97.842 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 3 completed (12814.257 ms) ======\n====== movie-lens (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 113.279 ms, heap usage 237.308 MB -> 98.141 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 4 completed (12978.413 ms) ======\n====== movie-lens (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 119.099 ms, heap usage 219.670 MB -> 98.103 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 5 completed (14306.460 ms) ======\n====== movie-lens (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 123.459 ms, heap usage 175.077 MB -> 98.404 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 6 completed (12568.443 ms) ======\n====== movie-lens (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 115.564 ms, heap usage 119.760 MB -> 100.031 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 7 completed (11505.398 ms) ======\n====== movie-lens (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 112.918 ms, heap usage 255.198 MB -> 99.024 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 8 completed (11706.594 ms) ======\n====== movie-lens (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 170.418 ms, heap usage 189.372 MB -> 98.513 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 9 completed (11662.958 ms) ======\n====== movie-lens (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 218.616 ms, heap usage 163.601 MB -> 98.629 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 10 completed (11293.424 ms) ======\n====== movie-lens (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 126.280 ms, heap usage 236.690 MB -> 98.603 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 11 completed (11873.509 ms) ======\n====== movie-lens (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 121.729 ms, heap usage 154.433 MB -> 98.657 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 12 completed (12263.435 ms) ======\n====== movie-lens (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 113.550 ms, heap usage 470.143 MB -> 102.266 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 13 completed (12351.951 ms) ======\n====== movie-lens (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 107.375 ms, heap usage 274.093 MB -> 98.738 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 14 completed (12112.256 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 83.428 ms, heap usage 476.231 MB -> 58.268 MB.\n====== scala-doku (scala) [default], iteration 0 completed (2753.475 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 83.813 ms, heap usage 150.542 MB -> 58.243 MB.\n====== scala-doku (scala) [default], iteration 1 completed (2340.567 ms) ======\n====== scala-doku (scala) [default], iteration 2 started ======\nGC before operation: completed in 88.607 ms, heap usage 121.743 MB -> 58.244 MB.\n====== scala-doku (scala) [default], iteration 2 completed (2269.313 ms) ======\n====== scala-doku (scala) [default], iteration 3 started ======\nGC before operation: completed in 79.133 ms, heap usage 118.244 MB -> 58.245 MB.\n====== scala-doku (scala) [default], iteration 3 completed (1898.181 ms) ======\n====== scala-doku (scala) [default], iteration 4 started ======\nGC before operation: completed in 86.643 ms, heap usage 120.745 MB -> 58.245 MB.\n====== scala-doku (scala) [default], iteration 4 completed (1792.430 ms) ======\n====== scala-doku (scala) [default], iteration 5 started ======\nGC before operation: completed in 77.315 ms, heap usage 119.245 MB -> 58.245 MB.\n====== scala-doku (scala) [default], iteration 5 completed (1786.944 ms) ======\n====== scala-doku (scala) [default], iteration 6 started ======\nGC before operation: completed in 89.168 ms, heap usage 120.745 MB -> 58.245 MB.\n====== scala-doku (scala) [default], iteration 6 completed (1866.830 ms) ======\n====== scala-doku (scala) [default], iteration 7 started ======\nGC before operation: completed in 76.164 ms, heap usage 120.245 MB -> 58.246 MB.\n====== scala-doku (scala) [default], iteration 7 completed (1799.903 ms) ======\n====== scala-doku (scala) [default], iteration 8 started ======\nGC before operation: completed in 79.207 ms, heap usage 119.746 MB -> 58.246 MB.\n====== scala-doku (scala) [default], iteration 8 completed (1782.750 ms) ======\n====== scala-doku (scala) [default], iteration 9 started ======\nGC before operation: completed in 86.288 ms, heap usage 120.246 MB -> 58.247 MB.\n====== scala-doku (scala) [default], iteration 9 completed (1778.745 ms) ======\n====== scala-doku (scala) [default], iteration 10 started ======\nGC before operation: completed in 77.760 ms, heap usage 119.747 MB -> 58.247 MB.\n====== scala-doku (scala) [default], iteration 10 completed (1794.655 ms) ======\n====== scala-doku (scala) [default], iteration 11 started ======\nGC before operation: completed in 92.459 ms, heap usage 119.747 MB -> 58.247 MB.\n====== scala-doku (scala) [default], iteration 11 completed (1818.580 ms) ======\n====== scala-doku (scala) [default], iteration 12 started ======\nGC before operation: completed in 77.984 ms, heap usage 120.247 MB -> 58.247 MB.\n====== scala-doku (scala) [default], iteration 12 completed (1848.215 ms) ======\n====== scala-doku (scala) [default], iteration 13 started ======\nGC before operation: completed in 93.441 ms, heap usage 119.747 MB -> 58.247 MB.\n====== scala-doku (scala) [default], iteration 13 completed (1809.411 ms) ======\n====== scala-doku (scala) [default], iteration 14 started ======\nGC before operation: completed in 82.582 ms, heap usage 119.747 MB -> 58.247 MB.\n====== scala-doku (scala) [default], iteration 14 completed (1803.934 ms) ======\nNOTE: 'chi-square' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== chi-square (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 99.379 ms, heap usage 319.426 MB -> 63.405 MB.\n====== chi-square (apache-spark) [default], iteration 0 completed (5198.635 ms) ======\n====== chi-square (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 217.985 ms, heap usage 339.427 MB -> 209.273 MB.\n====== chi-square (apache-spark) [default], iteration 1 completed (1119.485 ms) ======\n====== chi-square (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 175.933 ms, heap usage 299.968 MB -> 209.346 MB.\n====== chi-square (apache-spark) [default], iteration 2 completed (1038.669 ms) ======\n====== chi-square (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 162.484 ms, heap usage 434.584 MB -> 209.395 MB.\n====== chi-square (apache-spark) [default], iteration 3 completed (988.864 ms) ======\n====== chi-square (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 185.658 ms, heap usage 472.608 MB -> 209.448 MB.\n====== chi-square (apache-spark) [default], iteration 4 completed (1021.110 ms) ======\n====== chi-square (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 161.400 ms, heap usage 424.379 MB -> 209.494 MB.\n====== chi-square (apache-spark) [default], iteration 5 completed (1016.339 ms) ======\n====== chi-square (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 165.385 ms, heap usage 377.344 MB -> 209.638 MB.\n====== chi-square (apache-spark) [default], iteration 6 completed (1044.792 ms) ======\n====== chi-square (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 151.433 ms, heap usage 385.817 MB -> 209.712 MB.\n====== chi-square (apache-spark) [default], iteration 7 completed (892.107 ms) ======\n====== chi-square (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 148.497 ms, heap usage 375.358 MB -> 209.695 MB.\n====== chi-square (apache-spark) [default], iteration 8 completed (912.148 ms) ======\n====== chi-square (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 186.559 ms, heap usage 381.260 MB -> 209.735 MB.\n====== chi-square (apache-spark) [default], iteration 9 completed (916.193 ms) ======\n====== chi-square (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 172.071 ms, heap usage 375.984 MB -> 209.776 MB.\n====== chi-square (apache-spark) [default], iteration 10 completed (706.035 ms) ======\n====== chi-square (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 142.619 ms, heap usage 232.457 MB -> 209.816 MB.\n====== chi-square (apache-spark) [default], iteration 11 completed (764.527 ms) ======\n====== chi-square (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 164.121 ms, heap usage 670.340 MB -> 209.852 MB.\n====== chi-square (apache-spark) [default], iteration 12 completed (858.768 ms) ======\n====== chi-square (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 159.826 ms, heap usage 316.763 MB -> 209.890 MB.\n====== chi-square (apache-spark) [default], iteration 13 completed (862.769 ms) ======\n====== chi-square (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 166.687 ms, heap usage 379.775 MB -> 209.921 MB.\n====== chi-square (apache-spark) [default], iteration 14 completed (703.576 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 196.120 ms, heap usage 470.464 MB -> 147.340 MB.\n====== fj-kmeans (concurrency) [default], iteration 0 completed (8529.473 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 133.696 ms, heap usage 331.615 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 1 completed (7479.812 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 134.063 ms, heap usage 318.922 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 2 completed (7610.407 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 133.778 ms, heap usage 222.341 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 3 completed (7571.793 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 139.456 ms, heap usage 217.309 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 4 completed (7516.518 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 133.370 ms, heap usage 382.616 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 5 completed (8339.655 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 140.237 ms, heap usage 354.831 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 6 completed (7633.795 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 137.960 ms, heap usage 448.031 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 7 completed (7335.928 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 127.427 ms, heap usage 221.957 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 8 completed (7359.912 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 137.302 ms, heap usage 368.915 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 9 completed (8379.108 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 139.433 ms, heap usage 184.312 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 10 completed (8029.337 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 138.797 ms, heap usage 171.657 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 11 completed (7673.166 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 132.845 ms, heap usage 170.035 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 12 completed (7460.127 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 137.480 ms, heap usage 320.158 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 13 completed (7646.174 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 127.475 ms, heap usage 186.440 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 14 completed (7391.153 ms) ======\n====== rx-scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 138.851 ms, heap usage 249.054 MB -> 97.875 MB.\n====== rx-scrabble (functional) [default], iteration 0 completed (539.438 ms) ======\n====== rx-scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 97.806 ms, heap usage 250.872 MB -> 98.124 MB.\n====== rx-scrabble (functional) [default], iteration 1 completed (188.955 ms) ======\n====== rx-scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 121.701 ms, heap usage 240.121 MB -> 98.118 MB.\n====== rx-scrabble (functional) [default], iteration 2 completed (158.740 ms) ======\n====== rx-scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 103.202 ms, heap usage 238.618 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 3 completed (147.979 ms) ======\n====== rx-scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 107.730 ms, heap usage 239.113 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 4 completed (162.112 ms) ======\n====== rx-scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 117.578 ms, heap usage 239.463 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 5 completed (128.936 ms) ======\n====== rx-scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 111.309 ms, heap usage 239.390 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 6 completed (116.055 ms) ======\n====== rx-scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 109.603 ms, heap usage 239.557 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 7 completed (109.336 ms) ======\n====== rx-scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 108.494 ms, heap usage 239.260 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 8 completed (124.372 ms) ======\n====== rx-scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 134.578 ms, heap usage 239.449 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 9 completed (133.649 ms) ======\n====== rx-scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 98.374 ms, heap usage 240.453 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 10 completed (197.918 ms) ======\n====== rx-scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 111.349 ms, heap usage 240.463 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 11 completed (117.228 ms) ======\n====== rx-scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 104.555 ms, heap usage 240.413 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 12 completed (112.849 ms) ======\n====== rx-scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 98.436 ms, heap usage 240.514 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 13 completed (105.866 ms) ======\n====== rx-scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 92.783 ms, heap usage 240.977 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 14 completed (105.587 ms) ======\n====== db-shootout (database) [default], iteration 0 started ======\nGC before operation: completed in 104.333 ms, heap usage 179.823 MB -> 100.606 MB.\n====== db-shootout (database) [default], iteration 0 completed (8779.951 ms) ======\n====== db-shootout (database) [default], iteration 1 started ======\nGC before operation: completed in 107.497 ms, heap usage 242.103 MB -> 110.924 MB.\n====== db-shootout (database) [default], iteration 1 completed (9343.782 ms) ======\n====== db-shootout (database) [default], iteration 2 started ======\nGC before operation: completed in 111.405 ms, heap usage 283.357 MB -> 112.478 MB.\n====== db-shootout (database) [default], iteration 2 completed (7499.305 ms) ======\n====== db-shootout (database) [default], iteration 3 started ======\nGC before operation: completed in 94.995 ms, heap usage 543.589 MB -> 114.314 MB.\n====== db-shootout (database) [default], iteration 3 completed (8724.019 ms) ======\n====== db-shootout (database) [default], iteration 4 started ======\nGC before operation: completed in 101.845 ms, heap usage 213.978 MB -> 159.872 MB.\n====== db-shootout (database) [default], iteration 4 completed (7010.765 ms) ======\n====== db-shootout (database) [default], iteration 5 started ======\nGC before operation: completed in 164.949 ms, heap usage 636.845 MB -> 167.668 MB.\n====== db-shootout (database) [default], iteration 5 completed (7721.156 ms) ======\n====== db-shootout (database) [default], iteration 6 started ======\nGC before operation: completed in 130.093 ms, heap usage 384.324 MB -> 167.486 MB.\n====== db-shootout (database) [default], iteration 6 completed (7647.257 ms) ======\n====== db-shootout (database) [default], iteration 7 started ======\nGC before operation: completed in 109.623 ms, heap usage 282.011 MB -> 175.857 MB.\n====== db-shootout (database) [default], iteration 7 completed (7329.669 ms) ======\n====== db-shootout (database) [default], iteration 8 started ======\nGC before operation: completed in 116.420 ms, heap usage 284.042 MB -> 175.655 MB.\n====== db-shootout (database) [default], iteration 8 completed (7329.711 ms) ======\n====== db-shootout (database) [default], iteration 9 started ======\nGC before operation: completed in 171.716 ms, heap usage 342.792 MB -> 175.912 MB.\n====== db-shootout (database) [default], iteration 9 completed (6774.502 ms) ======\n====== db-shootout (database) [default], iteration 10 started ======\nGC before operation: completed in 173.829 ms, heap usage 293.932 MB -> 175.555 MB.\n====== db-shootout (database) [default], iteration 10 completed (6874.618 ms) ======\n====== db-shootout (database) [default], iteration 11 started ======\nGC before operation: completed in 148.492 ms, heap usage 400.220 MB -> 180.072 MB.\n====== db-shootout (database) [default], iteration 11 completed (7713.732 ms) ======\n====== db-shootout (database) [default], iteration 12 started ======\nGC before operation: completed in 117.617 ms, heap usage 194.930 MB -> 178.866 MB.\n====== db-shootout (database) [default], iteration 12 completed (7466.876 ms) ======\n====== db-shootout (database) [default], iteration 13 started ======\nGC before operation: completed in 129.592 ms, heap usage 290.546 MB -> 179.243 MB.\n====== db-shootout (database) [default], iteration 13 completed (6989.489 ms) ======\n====== db-shootout (database) [default], iteration 14 started ======\nGC before operation: completed in 136.413 ms, heap usage 256.392 MB -> 179.022 MB.\n====== db-shootout (database) [default], iteration 14 completed (6647.630 ms) ======\nCreating graph database...\nLoading resources...\nPopulating database...\nfinagle-http on :39975 spawning 2 client and default number of server workers.\n====== finagle-http (web) [default], iteration 0 started ======\nGC before operation: completed in 98.510 ms, heap usage 612.157 MB -> 111.470 MB.\n====== finagle-http (web) [default], iteration 0 completed (17579.182 ms) ======\n====== finagle-http (web) [default], iteration 1 started ======\nGC before operation: completed in 132.580 ms, heap usage 293.599 MB -> 114.255 MB.\n====== finagle-http (web) [default], iteration 1 completed (7093.193 ms) ======\n====== finagle-http (web) [default], iteration 2 started ======\nGC before operation: completed in 139.872 ms, heap usage 142.229 MB -> 114.940 MB.\n====== finagle-http (web) [default], iteration 2 completed (3467.412 ms) ======\n====== finagle-http (web) [default], iteration 3 started ======\nGC before operation: completed in 102.621 ms, heap usage 139.149 MB -> 115.008 MB.\n====== finagle-http (web) [default], iteration 3 completed (2891.463 ms) ======\n====== finagle-http (web) [default], iteration 4 started ======\nGC before operation: completed in 101.518 ms, heap usage 138.053 MB -> 115.745 MB.\n====== finagle-http (web) [default], iteration 4 completed (3105.065 ms) ======\n====== finagle-http (web) [default], iteration 5 started ======\nGC before operation: completed in 107.976 ms, heap usage 136.110 MB -> 115.075 MB.\n====== finagle-http (web) [default], iteration 5 completed (2695.150 ms) ======\n====== finagle-http (web) [default], iteration 6 started ======\nGC before operation: completed in 112.486 ms, heap usage 136.249 MB -> 115.049 MB.\n====== finagle-http (web) [default], iteration 6 completed (2704.392 ms) ======\n====== finagle-http (web) [default], iteration 7 started ======\nGC before operation: completed in 114.377 ms, heap usage 135.245 MB -> 115.020 MB.\n====== finagle-http (web) [default], iteration 7 completed (2948.935 ms) ======\n====== finagle-http (web) [default], iteration 8 started ======\nGC before operation: completed in 122.053 ms, heap usage 135.666 MB -> 115.051 MB.\n====== finagle-http (web) [default], iteration 8 completed (2778.196 ms) ======\n====== finagle-http (web) [default], iteration 9 started ======\nGC before operation: completed in 109.678 ms, heap usage 136.088 MB -> 115.031 MB.\n====== finagle-http (web) [default], iteration 9 completed (2747.983 ms) ======\n====== finagle-http (web) [default], iteration 10 started ======\nGC before operation: completed in 99.536 ms, heap usage 135.498 MB -> 115.057 MB.\n====== finagle-http (web) [default], iteration 10 completed (2777.183 ms) ======\n====== finagle-http (web) [default], iteration 11 started ======\nGC before operation: completed in 100.476 ms, heap usage 134.090 MB -> 115.060 MB.\n====== finagle-http (web) [default], iteration 11 completed (2950.363 ms) ======\n====== finagle-http (web) [default], iteration 12 started ======\nGC before operation: completed in 101.952 ms, heap usage 134.523 MB -> 115.062 MB.\n====== finagle-http (web) [default], iteration 12 completed (2759.978 ms) ======\n====== finagle-http (web) [default], iteration 13 started ======\nGC before operation: completed in 109.865 ms, heap usage 135.138 MB -> 115.064 MB.\n====== finagle-http (web) [default], iteration 13 completed (2831.653 ms) ======\n====== finagle-http (web) [default], iteration 14 started ======\nGC before operation: completed in 105.948 ms, heap usage 134.532 MB -> 115.044 MB.\n====== finagle-http (web) [default], iteration 14 completed (2711.280 ms) ======\n====== reactors (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 105.850 ms, heap usage 151.704 MB -> 116.190 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 0 completed (17020.896 ms) ======\n====== reactors (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 104.599 ms, heap usage 181.251 MB -> 113.711 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 1 completed (13892.575 ms) ======\n====== reactors (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 95.102 ms, heap usage 174.198 MB -> 113.758 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 2 completed (12554.742 ms) ======\n====== reactors (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 116.893 ms, heap usage 619.954 MB -> 113.748 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 3 completed (13425.368 ms) ======\n====== reactors (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 116.460 ms, heap usage 633.733 MB -> 113.696 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 4 completed (12579.614 ms) ======\n====== reactors (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 101.795 ms, heap usage 678.695 MB -> 113.699 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 5 completed (13161.693 ms) ======\n====== reactors (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 172.615 ms, heap usage 622.470 MB -> 113.699 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 6 completed (12878.519 ms) ======\n====== reactors (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 112.228 ms, heap usage 718.171 MB -> 113.700 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 7 completed (12975.597 ms) ======\n====== reactors (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 98.762 ms, heap usage 716.077 MB -> 113.700 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 8 completed (12770.728 ms) ======\n====== reactors (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 102.126 ms, heap usage 748.105 MB -> 113.710 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 9 completed (13076.609 ms) ======\n====== reactors (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 98.649 ms, heap usage 687.606 MB -> 113.700 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 10 completed (13003.432 ms) ======\n====== reactors (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 101.379 ms, heap usage 732.195 MB -> 113.700 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 11 completed (14004.051 ms) ======\n====== reactors (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 105.159 ms, heap usage 627.924 MB -> 113.700 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 12 completed (13270.736 ms) ======\n====== reactors (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 108.063 ms, heap usage 752.521 MB -> 113.700 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 13 completed (13719.150 ms) ======\n====== reactors (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 122.216 ms, heap usage 634.683 MB -> 113.714 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 14 completed (13878.366 ms) ======\nNOTE: 'dec-tree' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== dec-tree (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 164.697 ms, heap usage 737.360 MB -> 126.493 MB.\n====== dec-tree (apache-spark) [default], iteration 0 completed (10211.732 ms) ======\n====== dec-tree (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 163.548 ms, heap usage 286.590 MB -> 158.107 MB.\n====== dec-tree (apache-spark) [default], iteration 1 completed (2450.505 ms) ======\n====== dec-tree (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 136.565 ms, heap usage 345.940 MB -> 158.492 MB.\n====== dec-tree (apache-spark) [default], iteration 2 completed (2009.743 ms) ======\n====== dec-tree (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 138.685 ms, heap usage 279.501 MB -> 158.716 MB.\n====== dec-tree (apache-spark) [default], iteration 3 completed (1989.605 ms) ======\n====== dec-tree (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 146.026 ms, heap usage 489.120 MB -> 158.915 MB.\n====== dec-tree (apache-spark) [default], iteration 4 completed (1714.918 ms) ======\n====== dec-tree (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 127.943 ms, heap usage 488.970 MB -> 159.140 MB.\n====== dec-tree (apache-spark) [default], iteration 5 completed (1705.237 ms) ======\n====== dec-tree (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 130.962 ms, heap usage 190.728 MB -> 158.870 MB.\n====== dec-tree (apache-spark) [default], iteration 6 completed (1675.410 ms) ======\n====== dec-tree (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 128.752 ms, heap usage 464.234 MB -> 159.494 MB.\n====== dec-tree (apache-spark) [default], iteration 7 completed (1687.319 ms) ======\n====== dec-tree (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 131.642 ms, heap usage 193.742 MB -> 159.062 MB.\n====== dec-tree (apache-spark) [default], iteration 8 completed (1553.852 ms) ======\n====== dec-tree (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 146.296 ms, heap usage 480.448 MB -> 168.014 MB.\n====== dec-tree (apache-spark) [default], iteration 9 completed (1516.748 ms) ======\n====== dec-tree (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 144.013 ms, heap usage 452.343 MB -> 159.895 MB.\n====== dec-tree (apache-spark) [default], iteration 10 completed (1582.871 ms) ======\n====== dec-tree (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 134.653 ms, heap usage 443.551 MB -> 160.089 MB.\n====== dec-tree (apache-spark) [default], iteration 11 completed (1470.741 ms) ======\n====== dec-tree (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 195.778 ms, heap usage 440.791 MB -> 160.224 MB.\n====== dec-tree (apache-spark) [default], iteration 12 completed (1455.447 ms) ======\n====== dec-tree (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 153.178 ms, heap usage 513.991 MB -> 160.372 MB.\n====== dec-tree (apache-spark) [default], iteration 13 completed (1444.480 ms) ======\n====== dec-tree (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 140.368 ms, heap usage 445.814 MB -> 160.435 MB.\n====== dec-tree (apache-spark) [default], iteration 14 completed (1470.615 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 0 started ======\nGC before operation: completed in 151.372 ms, heap usage 172.187 MB -> 143.483 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 534\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 53\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 9\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 7\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 10\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 8\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 16\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 4\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 11\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 22\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 4\tmaxttc = 534\tfailed = 0\ttotal = 4\nSHORT_TRAVERSAL:  successful = 6\tmaxttc = 16\tfailed = 0\ttotal = 6\nSHORT_TRAVERSAL_RO:  successful = 10\tmaxttc = 9\tfailed = 0\ttotal = 10\nOPERATION:  successful = 8\tmaxttc = 22\tfailed = 0\ttotal = 8\nOPERATION_RO:  successful = 12\tmaxttc = 11\tfailed = 0\ttotal = 12\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 59.88 op/s (59.88 op/s including failed)\nElapsed time: 0.67 s\n====== scala-stm-bench7 (scala) [default], iteration 0 completed (2511.480 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 1 started ======\nGC before operation: completed in 135.828 ms, heap usage 523.490 MB -> 142.053 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 470\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 13\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 8\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 14\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 9\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 8\tmaxttc = 534\tfailed = 0\ttotal = 8\nSHORT_TRAVERSAL:  successful = 12\tmaxttc = 16\tfailed = 0\ttotal = 12\nSHORT_TRAVERSAL_RO:  successful = 20\tmaxttc = 9\tfailed = 0\ttotal = 20\nOPERATION:  successful = 16\tmaxttc = 22\tfailed = 0\ttotal = 16\nOPERATION_RO:  successful = 24\tmaxttc = 14\tfailed = 0\ttotal = 24\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 155.64 op/s (155.64 op/s including failed)\nElapsed time: 0.51 s\n====== scala-stm-bench7 (scala) [default], iteration 1 completed (1783.062 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 2 started ======\nGC before operation: completed in 240.384 ms, heap usage 489.877 MB -> 142.054 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 517\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 11\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 8\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 12\tmaxttc = 534\tfailed = 0\ttotal = 12\nSHORT_TRAVERSAL:  successful = 18\tmaxttc = 16\tfailed = 0\ttotal = 18\nSHORT_TRAVERSAL_RO:  successful = 30\tmaxttc = 9\tfailed = 0\ttotal = 30\nOPERATION:  successful = 24\tmaxttc = 22\tfailed = 0\ttotal = 24\nOPERATION_RO:  successful = 36\tmaxttc = 14\tfailed = 0\ttotal = 36\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 220.59 op/s (220.59 op/s including failed)\nElapsed time: 0.54 s\n====== scala-stm-bench7 (scala) [default], iteration 2 completed (1408.246 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 3 started ======\nGC before operation: completed in 136.697 ms, heap usage 506.905 MB -> 142.050 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 496\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 7\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 4\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 16\tmaxttc = 534\tfailed = 0\ttotal = 16\nSHORT_TRAVERSAL:  successful = 24\tmaxttc = 16\tfailed = 0\ttotal = 24\nSHORT_TRAVERSAL_RO:  successful = 40\tmaxttc = 9\tfailed = 0\ttotal = 40\nOPERATION:  successful = 32\tmaxttc = 22\tfailed = 0\ttotal = 32\nOPERATION_RO:  successful = 48\tmaxttc = 14\tfailed = 0\ttotal = 48\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 310.08 op/s (310.08 op/s including failed)\nElapsed time: 0.52 s\n====== scala-stm-bench7 (scala) [default], iteration 3 completed (1342.530 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 4 started ======\nGC before operation: completed in 147.926 ms, heap usage 393.121 MB -> 142.060 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 384\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 7\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 4\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 20\tmaxttc = 534\tfailed = 0\ttotal = 20\nSHORT_TRAVERSAL:  successful = 30\tmaxttc = 16\tfailed = 0\ttotal = 30\nSHORT_TRAVERSAL_RO:  successful = 50\tmaxttc = 9\tfailed = 0\ttotal = 50\nOPERATION:  successful = 40\tmaxttc = 22\tfailed = 0\ttotal = 40\nOPERATION_RO:  successful = 60\tmaxttc = 14\tfailed = 0\ttotal = 60\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 506.33 op/s (506.33 op/s including failed)\nElapsed time: 0.40 s\n====== scala-stm-bench7 (scala) [default], iteration 4 completed (1272.510 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 5 started ======\nGC before operation: completed in 185.238 ms, heap usage 380.599 MB -> 142.044 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 518\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 11\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 6\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 24\tmaxttc = 534\tfailed = 0\ttotal = 24\nSHORT_TRAVERSAL:  successful = 36\tmaxttc = 16\tfailed = 0\ttotal = 36\nSHORT_TRAVERSAL_RO:  successful = 60\tmaxttc = 9\tfailed = 0\ttotal = 60\nOPERATION:  successful = 48\tmaxttc = 22\tfailed = 0\ttotal = 48\nOPERATION_RO:  successful = 72\tmaxttc = 14\tfailed = 0\ttotal = 72\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 441.99 op/s (441.99 op/s including failed)\nElapsed time: 0.54 s\n====== scala-stm-bench7 (scala) [default], iteration 5 completed (1480.501 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 6 started ======\nGC before operation: completed in 153.068 ms, heap usage 507.102 MB -> 142.056 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 463\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 11\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 8\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 8\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 28\tmaxttc = 534\tfailed = 0\ttotal = 28\nSHORT_TRAVERSAL:  successful = 42\tmaxttc = 16\tfailed = 0\ttotal = 42\nSHORT_TRAVERSAL_RO:  successful = 70\tmaxttc = 9\tfailed = 0\ttotal = 70\nOPERATION:  successful = 56\tmaxttc = 22\tfailed = 0\ttotal = 56\nOPERATION_RO:  successful = 84\tmaxttc = 14\tfailed = 0\ttotal = 84\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 577.32 op/s (577.32 op/s including failed)\nElapsed time: 0.49 s\n====== scala-stm-bench7 (scala) [default], iteration 6 completed (1372.866 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 7 started ======\nGC before operation: completed in 147.549 ms, heap usage 507.608 MB -> 142.061 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 483\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 9\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 32\tmaxttc = 534\tfailed = 0\ttotal = 32\nSHORT_TRAVERSAL:  successful = 48\tmaxttc = 16\tfailed = 0\ttotal = 48\nSHORT_TRAVERSAL_RO:  successful = 80\tmaxttc = 9\tfailed = 0\ttotal = 80\nOPERATION:  successful = 64\tmaxttc = 22\tfailed = 0\ttotal = 64\nOPERATION_RO:  successful = 96\tmaxttc = 14\tfailed = 0\ttotal = 96\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 642.57 op/s (642.57 op/s including failed)\nElapsed time: 0.50 s\n====== scala-stm-bench7 (scala) [default], iteration 7 completed (1368.893 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 8 started ======\nGC before operation: completed in 156.075 ms, heap usage 505.601 MB -> 142.044 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 492\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 10\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 4\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 36\tmaxttc = 534\tfailed = 0\ttotal = 36\nSHORT_TRAVERSAL:  successful = 54\tmaxttc = 16\tfailed = 0\ttotal = 54\nSHORT_TRAVERSAL_RO:  successful = 90\tmaxttc = 9\tfailed = 0\ttotal = 90\nOPERATION:  successful = 72\tmaxttc = 22\tfailed = 0\ttotal = 72\nOPERATION_RO:  successful = 108\tmaxttc = 14\tfailed = 0\ttotal = 108\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 705.88 op/s (705.88 op/s including failed)\nElapsed time: 0.51 s\n====== scala-stm-bench7 (scala) [default], iteration 8 completed (1469.754 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 9 started ======\nGC before operation: completed in 137.134 ms, heap usage 507.110 MB -> 142.056 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 474\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 10\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 4\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 40\tmaxttc = 534\tfailed = 0\ttotal = 40\nSHORT_TRAVERSAL:  successful = 60\tmaxttc = 16\tfailed = 0\ttotal = 60\nSHORT_TRAVERSAL_RO:  successful = 100\tmaxttc = 9\tfailed = 0\ttotal = 100\nOPERATION:  successful = 80\tmaxttc = 22\tfailed = 0\ttotal = 80\nOPERATION_RO:  successful = 120\tmaxttc = 14\tfailed = 0\ttotal = 120\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 818.00 op/s (818.00 op/s including failed)\nElapsed time: 0.49 s\n====== scala-stm-bench7 (scala) [default], iteration 9 completed (1497.723 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 10 started ======\nGC before operation: completed in 389.866 ms, heap usage 507.497 MB -> 295.408 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 340\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 11\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 44\tmaxttc = 534\tfailed = 0\ttotal = 44\nSHORT_TRAVERSAL:  successful = 66\tmaxttc = 16\tfailed = 0\ttotal = 66\nSHORT_TRAVERSAL_RO:  successful = 110\tmaxttc = 9\tfailed = 0\ttotal = 110\nOPERATION:  successful = 88\tmaxttc = 22\tfailed = 0\ttotal = 88\nOPERATION_RO:  successful = 132\tmaxttc = 14\tfailed = 0\ttotal = 132\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1229.05 op/s (1229.05 op/s including failed)\nElapsed time: 0.36 s\n====== scala-stm-bench7 (scala) [default], iteration 10 completed (1120.384 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 11 started ======\nGC before operation: completed in 140.313 ms, heap usage 400.744 MB -> 142.052 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 600\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 12\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 48\tmaxttc = 600\tfailed = 0\ttotal = 48\nSHORT_TRAVERSAL:  successful = 72\tmaxttc = 16\tfailed = 0\ttotal = 72\nSHORT_TRAVERSAL_RO:  successful = 120\tmaxttc = 9\tfailed = 0\ttotal = 120\nOPERATION:  successful = 96\tmaxttc = 22\tfailed = 0\ttotal = 96\nOPERATION_RO:  successful = 144\tmaxttc = 14\tfailed = 0\ttotal = 144\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 770.47 op/s (770.47 op/s including failed)\nElapsed time: 0.62 s\n====== scala-stm-bench7 (scala) [default], iteration 11 completed (1498.094 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 12 started ======\nGC before operation: completed in 158.043 ms, heap usage 507.099 MB -> 142.057 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 429\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 6\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 52\tmaxttc = 600\tfailed = 0\ttotal = 52\nSHORT_TRAVERSAL:  successful = 78\tmaxttc = 16\tfailed = 0\ttotal = 78\nSHORT_TRAVERSAL_RO:  successful = 130\tmaxttc = 9\tfailed = 0\ttotal = 130\nOPERATION:  successful = 104\tmaxttc = 22\tfailed = 0\ttotal = 104\nOPERATION_RO:  successful = 156\tmaxttc = 14\tfailed = 0\ttotal = 156\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1184.51 op/s (1184.51 op/s including failed)\nElapsed time: 0.44 s\n====== scala-stm-bench7 (scala) [default], iteration 12 completed (1301.468 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 13 started ======\nGC before operation: completed in 157.214 ms, heap usage 430.109 MB -> 142.044 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 441\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 8\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 7\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 56\tmaxttc = 600\tfailed = 0\ttotal = 56\nSHORT_TRAVERSAL:  successful = 84\tmaxttc = 16\tfailed = 0\ttotal = 84\nSHORT_TRAVERSAL_RO:  successful = 140\tmaxttc = 9\tfailed = 0\ttotal = 140\nOPERATION:  successful = 112\tmaxttc = 22\tfailed = 0\ttotal = 112\nOPERATION_RO:  successful = 168\tmaxttc = 14\tfailed = 0\ttotal = 168\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1244.44 op/s (1244.44 op/s including failed)\nElapsed time: 0.45 s\n====== scala-stm-bench7 (scala) [default], iteration 13 completed (1351.470 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 14 started ======\nGC before operation: completed in 141.475 ms, heap usage 507.530 MB -> 142.049 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 482\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 10\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 60\tmaxttc = 600\tfailed = 0\ttotal = 60\nSHORT_TRAVERSAL:  successful = 90\tmaxttc = 16\tfailed = 0\ttotal = 90\nSHORT_TRAVERSAL_RO:  successful = 150\tmaxttc = 9\tfailed = 0\ttotal = 150\nOPERATION:  successful = 120\tmaxttc = 22\tfailed = 0\ttotal = 120\nOPERATION_RO:  successful = 180\tmaxttc = 14\tfailed = 0\ttotal = 180\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1204.82 op/s (1204.82 op/s including failed)\nElapsed time: 0.50 s\n====== scala-stm-bench7 (scala) [default], iteration 14 completed (1439.994 ms) ======\nNOTE: 'naive-bayes' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== naive-bayes (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 157.559 ms, heap usage 173.043 MB -> 152.727 MB.\n====== naive-bayes (apache-spark) [default], iteration 0 completed (40505.768 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 203.021 ms, heap usage 442.679 MB -> 428.812 MB.\n====== naive-bayes (apache-spark) [default], iteration 1 completed (23313.942 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 184.892 ms, heap usage 455.964 MB -> 429.040 MB.\n====== naive-bayes (apache-spark) [default], iteration 2 completed (22137.040 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 207.126 ms, heap usage 447.901 MB -> 429.105 MB.\n====== naive-bayes (apache-spark) [default], iteration 3 completed (22166.338 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 178.331 ms, heap usage 447.914 MB -> 429.201 MB.\n====== naive-bayes (apache-spark) [default], iteration 4 completed (22021.017 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 188.053 ms, heap usage 531.524 MB -> 429.272 MB.\n====== naive-bayes (apache-spark) [default], iteration 5 completed (21499.434 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 198.890 ms, heap usage 499.768 MB -> 429.344 MB.\n====== naive-bayes (apache-spark) [default], iteration 6 completed (21187.520 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 175.395 ms, heap usage 531.319 MB -> 429.410 MB.\n====== naive-bayes (apache-spark) [default], iteration 7 completed (22419.763 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 282.874 ms, heap usage 492.795 MB -> 429.532 MB.\n====== naive-bayes (apache-spark) [default], iteration 8 completed (21701.999 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 167.999 ms, heap usage 455.434 MB -> 427.583 MB.\n====== naive-bayes (apache-spark) [default], iteration 9 completed (20956.195 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 211.706 ms, heap usage 813.593 MB -> 421.269 MB.\n====== naive-bayes (apache-spark) [default], iteration 10 completed (21463.384 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 165.327 ms, heap usage 542.556 MB -> 422.040 MB.\n====== naive-bayes (apache-spark) [default], iteration 11 completed (20713.293 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 156.444 ms, heap usage 742.313 MB -> 422.032 MB.\n====== naive-bayes (apache-spark) [default], iteration 12 completed (20682.267 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 143.812 ms, heap usage 741.763 MB -> 422.119 MB.\n====== naive-bayes (apache-spark) [default], iteration 13 completed (21341.442 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 154.760 ms, heap usage 448.917 MB -> 422.205 MB.\n====== naive-bayes (apache-spark) [default], iteration 14 completed (21277.786 ms) ======\nNOTE: 'als' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== als (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 170.517 ms, heap usage 342.184 MB -> 167.715 MB.\n====== als (apache-spark) [default], iteration 0 completed (17245.293 ms) ======\n====== als (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 206.106 ms, heap usage 381.163 MB -> 192.447 MB.\n====== als (apache-spark) [default], iteration 1 completed (8374.551 ms) ======\n====== als (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 203.403 ms, heap usage 692.875 MB -> 193.732 MB.\n====== als (apache-spark) [default], iteration 2 completed (7613.825 ms) ======\n====== als (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 197.033 ms, heap usage 770.490 MB -> 194.322 MB.\n====== als (apache-spark) [default], iteration 3 completed (7498.159 ms) ======\n====== als (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 222.854 ms, heap usage 724.610 MB -> 194.842 MB.\n====== als (apache-spark) [default], iteration 4 completed (7222.046 ms) ======\n====== als (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 199.073 ms, heap usage 630.683 MB -> 195.312 MB.\n====== als (apache-spark) [default], iteration 5 completed (6777.255 ms) ======\n====== als (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 196.178 ms, heap usage 670.045 MB -> 195.920 MB.\n====== als (apache-spark) [default], iteration 6 completed (6716.076 ms) ======\n====== als (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 196.405 ms, heap usage 703.914 MB -> 196.465 MB.\n====== als (apache-spark) [default], iteration 7 completed (6706.499 ms) ======\n====== als (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 200.429 ms, heap usage 690.188 MB -> 197.117 MB.\n====== als (apache-spark) [default], iteration 8 completed (6692.376 ms) ======\n====== als (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 206.096 ms, heap usage 703.429 MB -> 197.402 MB.\n====== als (apache-spark) [default], iteration 9 completed (6829.927 ms) ======\n====== als (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 210.566 ms, heap usage 722.096 MB -> 197.832 MB.\n====== als (apache-spark) [default], iteration 10 completed (6464.726 ms) ======\n====== als (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 207.892 ms, heap usage 691.523 MB -> 197.993 MB.\n====== als (apache-spark) [default], iteration 11 completed (6570.330 ms) ======\n====== als (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 235.043 ms, heap usage 728.923 MB -> 198.219 MB.\n====== als (apache-spark) [default], iteration 12 completed (6550.026 ms) ======\n====== als (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 204.262 ms, heap usage 672.212 MB -> 198.515 MB.\n====== als (apache-spark) [default], iteration 13 completed (6596.781 ms) ======\n====== als (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 202.815 ms, heap usage 743.348 MB -> 198.767 MB.\n====== als (apache-spark) [default], iteration 14 completed (6349.995 ms) ======\n====== par-mnemonics (functional) [default], iteration 0 started ======\nGC before operation: completed in 300.165 ms, heap usage 696.077 MB -> 179.147 MB.\n====== par-mnemonics (functional) [default], iteration 0 completed (4479.313 ms) ======\n====== par-mnemonics (functional) [default], iteration 1 started ======\nGC before operation: completed in 193.254 ms, heap usage 336.437 MB -> 179.107 MB.\n====== par-mnemonics (functional) [default], iteration 1 completed (4119.000 ms) ======\n====== par-mnemonics (functional) [default], iteration 2 started ======\nGC before operation: completed in 192.306 ms, heap usage 405.576 MB -> 179.104 MB.\n====== par-mnemonics (functional) [default], iteration 2 completed (4258.146 ms) ======\n====== par-mnemonics (functional) [default], iteration 3 started ======\nGC before operation: completed in 193.004 ms, heap usage 324.174 MB -> 179.108 MB.\n====== par-mnemonics (functional) [default], iteration 3 completed (4452.797 ms) ======\n====== par-mnemonics (functional) [default], iteration 4 started ======\nGC before operation: completed in 177.712 ms, heap usage 419.693 MB -> 179.105 MB.\n====== par-mnemonics (functional) [default], iteration 4 completed (3933.250 ms) ======\n====== par-mnemonics (functional) [default], iteration 5 started ======\nGC before operation: completed in 186.258 ms, heap usage 324.982 MB -> 179.105 MB.\n====== par-mnemonics (functional) [default], iteration 5 completed (4007.080 ms) ======\n====== par-mnemonics (functional) [default], iteration 6 started ======\nGC before operation: completed in 190.779 ms, heap usage 309.104 MB -> 179.121 MB.\n====== par-mnemonics (functional) [default], iteration 6 completed (3953.148 ms) ======\n====== par-mnemonics (functional) [default], iteration 7 started ======\nGC before operation: completed in 204.409 ms, heap usage 312.674 MB -> 179.116 MB.\n====== par-mnemonics (functional) [default], iteration 7 completed (4068.803 ms) ======\n====== par-mnemonics (functional) [default], iteration 8 started ======\nGC before operation: completed in 187.505 ms, heap usage 315.067 MB -> 179.106 MB.\n====== par-mnemonics (functional) [default], iteration 8 completed (3881.191 ms) ======\n====== par-mnemonics (functional) [default], iteration 9 started ======\nGC before operation: completed in 178.405 ms, heap usage 312.898 MB -> 179.106 MB.\n====== par-mnemonics (functional) [default], iteration 9 completed (4171.076 ms) ======\n====== par-mnemonics (functional) [default], iteration 10 started ======\nGC before operation: completed in 188.686 ms, heap usage 312.174 MB -> 179.106 MB.\n====== par-mnemonics (functional) [default], iteration 10 completed (3953.921 ms) ======\n====== par-mnemonics (functional) [default], iteration 11 started ======\nGC before operation: completed in 191.991 ms, heap usage 319.854 MB -> 179.106 MB.\n====== par-mnemonics (functional) [default], iteration 11 completed (4020.731 ms) ======\n====== par-mnemonics (functional) [default], iteration 12 started ======\nGC before operation: completed in 194.977 ms, heap usage 313.371 MB -> 179.106 MB.\n====== par-mnemonics (functional) [default], iteration 12 completed (4155.199 ms) ======\n====== par-mnemonics (functional) [default], iteration 13 started ======\nGC before operation: completed in 186.738 ms, heap usage 349.674 MB -> 179.103 MB.\n====== par-mnemonics (functional) [default], iteration 13 completed (4420.589 ms) ======\n====== par-mnemonics (functional) [default], iteration 14 started ======\nGC before operation: completed in 189.534 ms, heap usage 309.674 MB -> 179.103 MB.\n====== par-mnemonics (functional) [default], iteration 14 completed (3653.633 ms) ======\n====== scala-kmeans (scala) [default], iteration 0 started ======\nGC before operation: completed in 259.501 ms, heap usage 343.603 MB -> 201.421 MB.\n====== scala-kmeans (scala) [default], iteration 0 completed (339.766 ms) ======\n====== scala-kmeans (scala) [default], iteration 1 started ======\nGC before operation: completed in 202.460 ms, heap usage 256.921 MB -> 201.453 MB.\n====== scala-kmeans (scala) [default], iteration 1 completed (226.462 ms) ======\n====== scala-kmeans (scala) [default], iteration 2 started ======\nGC before operation: completed in 202.113 ms, heap usage 323.453 MB -> 201.453 MB.\n====== scala-kmeans (scala) [default], iteration 2 completed (224.094 ms) ======\n====== scala-kmeans (scala) [default], iteration 3 started ======\nGC before operation: completed in 183.749 ms, heap usage 322.953 MB -> 201.453 MB.\n====== scala-kmeans (scala) [default], iteration 3 completed (222.411 ms) ======\n====== scala-kmeans (scala) [default], iteration 4 started ======\nGC before operation: completed in 202.302 ms, heap usage 322.953 MB -> 201.453 MB.\n====== scala-kmeans (scala) [default], iteration 4 completed (223.270 ms) ======\n====== scala-kmeans (scala) [default], iteration 5 started ======\nGC before operation: completed in 202.640 ms, heap usage 322.953 MB -> 201.455 MB.\n====== scala-kmeans (scala) [default], iteration 5 completed (224.528 ms) ======\n====== scala-kmeans (scala) [default], iteration 6 started ======\nGC before operation: completed in 188.615 ms, heap usage 322.953 MB -> 201.453 MB.\n====== scala-kmeans (scala) [default], iteration 6 completed (231.478 ms) ======\n====== scala-kmeans (scala) [default], iteration 7 started ======\nGC before operation: completed in 206.202 ms, heap usage 322.953 MB -> 201.472 MB.\n====== scala-kmeans (scala) [default], iteration 7 completed (229.890 ms) ======\n====== scala-kmeans (scala) [default], iteration 8 started ======\nGC before operation: completed in 201.694 ms, heap usage 322.954 MB -> 201.454 MB.\n====== scala-kmeans (scala) [default], iteration 8 completed (259.279 ms) ======\n====== scala-kmeans (scala) [default], iteration 9 started ======\nGC before operation: completed in 185.242 ms, heap usage 332.551 MB -> 201.483 MB.\n====== scala-kmeans (scala) [default], iteration 9 completed (235.502 ms) ======\n====== scala-kmeans (scala) [default], iteration 10 started ======\nGC before operation: completed in 205.981 ms, heap usage 323.461 MB -> 201.461 MB.\n====== scala-kmeans (scala) [default], iteration 10 completed (235.422 ms) ======\n====== scala-kmeans (scala) [default], iteration 11 started ======\nGC before operation: completed in 205.946 ms, heap usage 322.961 MB -> 201.489 MB.\n====== scala-kmeans (scala) [default], iteration 11 completed (339.977 ms) ======\n====== scala-kmeans (scala) [default], iteration 12 started ======\nGC before operation: completed in 200.922 ms, heap usage 330.961 MB -> 201.462 MB.\n====== scala-kmeans (scala) [default], iteration 12 completed (222.818 ms) ======\n====== scala-kmeans (scala) [default], iteration 13 started ======\nGC before operation: completed in 192.781 ms, heap usage 322.962 MB -> 201.463 MB.\n====== scala-kmeans (scala) [default], iteration 13 completed (220.477 ms) ======\n====== scala-kmeans (scala) [default], iteration 14 started ======\nGC before operation: completed in 202.779 ms, heap usage 322.963 MB -> 201.463 MB.\n====== scala-kmeans (scala) [default], iteration 14 completed (222.039 ms) ======\n====== philosophers (scala) [default], iteration 0 started ======\nGC before operation: completed in 241.597 ms, heap usage 324.963 MB -> 180.463 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 0 completed (1409.944 ms) ======\n====== philosophers (scala) [default], iteration 1 started ======\nGC before operation: completed in 243.462 ms, heap usage 184.232 MB -> 180.383 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 1 completed (604.601 ms) ======\n====== philosophers (scala) [default], iteration 2 started ======\nGC before operation: completed in 192.650 ms, heap usage 525.881 MB -> 180.384 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 2 completed (741.321 ms) ======\n====== philosophers (scala) [default], iteration 3 started ======\nGC before operation: completed in 181.298 ms, heap usage 189.882 MB -> 180.385 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 3 completed (757.745 ms) ======\n====== philosophers (scala) [default], iteration 4 started ======\nGC before operation: completed in 201.106 ms, heap usage 194.464 MB -> 180.382 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 4 completed (659.879 ms) ======\n====== philosophers (scala) [default], iteration 5 started ======\nGC before operation: completed in 199.590 ms, heap usage 538.382 MB -> 180.402 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 5 completed (761.913 ms) ======\n====== philosophers (scala) [default], iteration 6 started ======\nGC before operation: completed in 180.230 ms, heap usage 206.336 MB -> 180.407 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 6 completed (582.194 ms) ======\n====== philosophers (scala) [default], iteration 7 started ======\nGC before operation: completed in 181.803 ms, heap usage 539.882 MB -> 180.387 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 7 completed (719.670 ms) ======\n====== philosophers (scala) [default], iteration 8 started ======\nGC before operation: completed in 205.901 ms, heap usage 205.086 MB -> 180.392 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 8 completed (711.867 ms) ======\n====== philosophers (scala) [default], iteration 9 started ======\nGC before operation: completed in 181.841 ms, heap usage 201.039 MB -> 180.385 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 9 completed (668.165 ms) ======\n====== philosophers (scala) [default], iteration 10 started ======\nGC before operation: completed in 199.598 ms, heap usage 194.511 MB -> 180.385 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 10 completed (566.751 ms) ======\n====== philosophers (scala) [default], iteration 11 started ======\nGC before operation: completed in 283.702 ms, heap usage 541.882 MB -> 180.382 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 11 completed (656.239 ms) ======\n====== philosophers (scala) [default], iteration 12 started ======\nGC before operation: completed in 177.024 ms, heap usage 193.987 MB -> 180.397 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 12 completed (612.935 ms) ======\n====== philosophers (scala) [default], iteration 13 started ======\nGC before operation: completed in 187.202 ms, heap usage 182.739 MB -> 180.398 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 13 completed (607.424 ms) ======\n====== philosophers (scala) [default], iteration 14 started ======\nGC before operation: completed in 194.918 ms, heap usage 191.477 MB -> 180.385 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 14 completed (767.034 ms) ======\nNOTE: 'log-regression' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== log-regression (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 200.091 ms, heap usage 269.882 MB -> 192.522 MB.\n====== log-regression (apache-spark) [default], iteration 0 completed (10200.692 ms) ======\n====== log-regression (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 265.987 ms, heap usage 685.270 MB -> 272.962 MB.\n====== log-regression (apache-spark) [default], iteration 1 completed (2383.667 ms) ======\n====== log-regression (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 191.716 ms, heap usage 723.618 MB -> 273.054 MB.\n====== log-regression (apache-spark) [default], iteration 2 completed (1814.105 ms) ======\n====== log-regression (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 214.202 ms, heap usage 803.623 MB -> 273.940 MB.\n====== log-regression (apache-spark) [default], iteration 3 completed (1769.557 ms) ======\n====== log-regression (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 295.871 ms, heap usage 736.077 MB -> 273.784 MB.\n====== log-regression (apache-spark) [default], iteration 4 completed (1748.066 ms) ======\n====== log-regression (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 252.860 ms, heap usage 796.034 MB -> 274.567 MB.\n====== log-regression (apache-spark) [default], iteration 5 completed (1730.830 ms) ======\n====== log-regression (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 193.306 ms, heap usage 772.790 MB -> 274.731 MB.\n====== log-regression (apache-spark) [default], iteration 6 completed (1570.874 ms) ======\n====== log-regression (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 196.220 ms, heap usage 745.435 MB -> 274.773 MB.\n====== log-regression (apache-spark) [default], iteration 7 completed (1425.369 ms) ======\n====== log-regression (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 213.785 ms, heap usage 790.879 MB -> 275.216 MB.\n====== log-regression (apache-spark) [default], iteration 8 completed (1372.563 ms) ======\n====== log-regression (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 203.644 ms, heap usage 775.698 MB -> 275.341 MB.\n====== log-regression (apache-spark) [default], iteration 9 completed (1356.486 ms) ======\n====== log-regression (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 208.058 ms, heap usage 789.384 MB -> 275.613 MB.\n====== log-regression (apache-spark) [default], iteration 10 completed (1377.665 ms) ======\n====== log-regression (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 215.160 ms, heap usage 769.988 MB -> 275.721 MB.\n====== log-regression (apache-spark) [default], iteration 11 completed (1441.676 ms) ======\n====== log-regression (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 207.060 ms, heap usage 779.839 MB -> 275.885 MB.\n====== log-regression (apache-spark) [default], iteration 12 completed (1344.311 ms) ======\n====== log-regression (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 210.402 ms, heap usage 768.518 MB -> 276.105 MB.\n====== log-regression (apache-spark) [default], iteration 13 completed (1502.652 ms) ======\n====== log-regression (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 202.788 ms, heap usage 765.290 MB -> 276.190 MB.\n====== log-regression (apache-spark) [default], iteration 14 completed (1510.368 ms) ======\nNOTE: 'gauss-mix' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== gauss-mix (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 221.071 ms, heap usage 621.403 MB -> 212.611 MB.\nAccuracy (validation) = 0.97667 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99333 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.91556 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99444 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 0 completed (32765.783 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 226.149 ms, heap usage 448.175 MB -> 218.989 MB.\nAccuracy (validation) = 0.97667 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99333 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.91556 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99444 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 1 completed (28169.443 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 233.916 ms, heap usage 284.299 MB -> 220.290 MB.\nAccuracy (validation) = 0.97667 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99333 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.91556 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99444 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 2 completed (26149.767 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 236.760 ms, heap usage 516.075 MB -> 221.871 MB.\nAccuracy (validation) = 0.97667 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99333 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.91556 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99444 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 3 completed (26250.307 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 230.692 ms, heap usage 313.653 MB -> 222.589 MB.\nAccuracy (validation) = 0.97667 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99333 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.91556 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99444 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 4 completed (24299.630 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 239.420 ms, heap usage 604.554 MB -> 222.932 MB.\nAccuracy (validation) = 0.97667 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99333 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.91556 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99444 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 5 completed (23670.122 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 229.737 ms, heap usage 527.090 MB -> 222.918 MB.\nAccuracy (validation) = 0.97667 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99333 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.91556 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99444 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 6 completed (19763.832 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 236.395 ms, heap usage 270.964 MB -> 222.478 MB.\nAccuracy (validation) = 0.97667 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99333 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.91556 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99444 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 7 completed (20519.230 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 235.480 ms, heap usage 392.699 MB -> 223.046 MB.\nAccuracy (validation) = 0.97667 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99333 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.91556 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99444 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 8 completed (19780.493 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 228.126 ms, heap usage 389.397 MB -> 222.753 MB.\nAccuracy (validation) = 0.97667 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99333 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.91556 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99444 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 9 completed (18838.189 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 232.057 ms, heap usage 268.377 MB -> 222.483 MB.\nAccuracy (validation) = 0.97667 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99333 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.91556 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99444 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 10 completed (25146.781 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 233.811 ms, heap usage 385.081 MB -> 222.924 MB.\nAccuracy (validation) = 0.97667 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99333 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.91556 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99444 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 11 completed (18846.665 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 233.190 ms, heap usage 268.234 MB -> 222.584 MB.\nAccuracy (validation) = 0.97667 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99333 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.91556 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99444 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 12 completed (22796.260 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 236.535 ms, heap usage 508.599 MB -> 222.697 MB.\nAccuracy (validation) = 0.97667 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99333 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.91556 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99444 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 13 completed (23208.565 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 240.926 ms, heap usage 257.352 MB -> 222.936 MB.\nAccuracy (validation) = 0.97667 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99333 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.91556 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99444 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 14 completed (19702.003 ms) ======\n"
    },
    "mnemonics": {
        "times": [
            4912.06,
            4853.674,
            4807.34,
            4704.409,
            4781.43,
            4843.976,
            4627.921,
            4931.177,
            4695.904,
            4799.33,
            4837.347,
            4418.383,
            4509.635,
            4488.064,
            4923.621
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 111.440 ms, heap usage 193.716 MB -> 76.034 MB.\n====== scrabble (functional) [default], iteration 0 completed (1746.818 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 75.425 ms, heap usage 124.295 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 1 completed (822.799 ms) ======\n====== scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 103.806 ms, heap usage 309.363 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 2 completed (876.688 ms) ======\n====== scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 108.057 ms, heap usage 131.528 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 3 completed (772.422 ms) ======\n====== scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 90.330 ms, heap usage 339.197 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 4 completed (664.922 ms) ======\n====== scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 78.633 ms, heap usage 242.581 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 5 completed (767.926 ms) ======\n====== scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 80.529 ms, heap usage 243.067 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 6 completed (771.953 ms) ======\n====== scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 87.821 ms, heap usage 169.966 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 7 completed (713.175 ms) ======\n====== scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 85.627 ms, heap usage 126.363 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 8 completed (705.321 ms) ======\n====== scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 77.713 ms, heap usage 279.273 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 9 completed (595.178 ms) ======\n====== scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 90.853 ms, heap usage 197.665 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 10 completed (653.981 ms) ======\n====== scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 80.787 ms, heap usage 125.936 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 11 completed (671.613 ms) ======\n====== scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 81.092 ms, heap usage 326.788 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 12 completed (614.500 ms) ======\n====== scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 74.421 ms, heap usage 199.244 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 13 completed (687.061 ms) ======\n====== scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 77.486 ms, heap usage 357.036 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 14 completed (698.120 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 39.864 ms, heap usage 626.576 MB -> 29.596 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (20832.995 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 151.296 ms, heap usage 587.802 MB -> 148.935 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (10726.986 ms) ======\n====== page-rank (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 139.528 ms, heap usage 662.229 MB -> 149.044 MB.\n====== page-rank (apache-spark) [default], iteration 2 completed (10497.012 ms) ======\n====== page-rank (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 145.301 ms, heap usage 620.847 MB -> 149.161 MB.\n====== page-rank (apache-spark) [default], iteration 3 completed (10683.078 ms) ======\n====== page-rank (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 146.272 ms, heap usage 595.956 MB -> 149.275 MB.\n====== page-rank (apache-spark) [default], iteration 4 completed (11158.857 ms) ======\n====== page-rank (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 150.477 ms, heap usage 624.956 MB -> 149.389 MB.\n====== page-rank (apache-spark) [default], iteration 5 completed (10816.748 ms) ======\n====== page-rank (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 152.563 ms, heap usage 475.956 MB -> 149.705 MB.\n====== page-rank (apache-spark) [default], iteration 6 completed (10797.777 ms) ======\n====== page-rank (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 153.431 ms, heap usage 575.956 MB -> 149.630 MB.\n====== page-rank (apache-spark) [default], iteration 7 completed (10320.855 ms) ======\n====== page-rank (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 154.161 ms, heap usage 494.956 MB -> 149.734 MB.\n====== page-rank (apache-spark) [default], iteration 8 completed (10797.875 ms) ======\n====== page-rank (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 159.810 ms, heap usage 685.884 MB -> 149.850 MB.\n====== page-rank (apache-spark) [default], iteration 9 completed (10426.551 ms) ======\n====== page-rank (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 138.119 ms, heap usage 483.136 MB -> 149.929 MB.\n====== page-rank (apache-spark) [default], iteration 10 completed (11319.287 ms) ======\n====== page-rank (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 160.571 ms, heap usage 417.218 MB -> 150.048 MB.\n====== page-rank (apache-spark) [default], iteration 11 completed (10773.541 ms) ======\n====== page-rank (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 153.774 ms, heap usage 591.956 MB -> 150.197 MB.\n====== page-rank (apache-spark) [default], iteration 12 completed (10583.141 ms) ======\n====== page-rank (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 151.297 ms, heap usage 385.309 MB -> 150.212 MB.\n====== page-rank (apache-spark) [default], iteration 13 completed (11225.389 ms) ======\n====== page-rank (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 138.750 ms, heap usage 506.956 MB -> 150.287 MB.\n====== page-rank (apache-spark) [default], iteration 14 completed (11253.752 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 60.640 ms, heap usage 661.207 MB -> 32.216 MB.\n====== future-genetic (functional) [default], iteration 0 completed (14742.129 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 51.821 ms, heap usage 114.841 MB -> 33.158 MB.\n====== future-genetic (functional) [default], iteration 1 completed (11014.493 ms) ======\n====== future-genetic (functional) [default], iteration 2 started ======\nGC before operation: completed in 34.821 ms, heap usage 68.320 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 2 completed (10628.352 ms) ======\n====== future-genetic (functional) [default], iteration 3 started ======\nGC before operation: completed in 38.504 ms, heap usage 57.876 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 3 completed (10722.143 ms) ======\n====== future-genetic (functional) [default], iteration 4 started ======\nGC before operation: completed in 39.692 ms, heap usage 145.206 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 4 completed (10840.012 ms) ======\n====== future-genetic (functional) [default], iteration 5 started ======\nGC before operation: completed in 38.411 ms, heap usage 81.011 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 5 completed (10598.435 ms) ======\n====== future-genetic (functional) [default], iteration 6 started ======\nGC before operation: completed in 40.019 ms, heap usage 144.534 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 6 completed (10786.150 ms) ======\n====== future-genetic (functional) [default], iteration 7 started ======\nGC before operation: completed in 48.015 ms, heap usage 171.419 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 7 completed (10652.683 ms) ======\n====== future-genetic (functional) [default], iteration 8 started ======\nGC before operation: completed in 35.498 ms, heap usage 37.426 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 8 completed (10488.698 ms) ======\n====== future-genetic (functional) [default], iteration 9 started ======\nGC before operation: completed in 42.383 ms, heap usage 130.505 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 9 completed (10682.271 ms) ======\n====== future-genetic (functional) [default], iteration 10 started ======\nGC before operation: completed in 48.742 ms, heap usage 134.970 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 10 completed (10549.840 ms) ======\n====== future-genetic (functional) [default], iteration 11 started ======\nGC before operation: completed in 41.808 ms, heap usage 156.009 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 11 completed (10851.547 ms) ======\n====== future-genetic (functional) [default], iteration 12 started ======\nGC before operation: completed in 40.139 ms, heap usage 163.381 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 12 completed (10940.461 ms) ======\n====== future-genetic (functional) [default], iteration 13 started ======\nGC before operation: completed in 35.048 ms, heap usage 80.372 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 13 completed (10876.099 ms) ======\n====== future-genetic (functional) [default], iteration 14 started ======\nGC before operation: completed in 43.468 ms, heap usage 62.997 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 14 completed (10763.606 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 70.620 ms, heap usage 85.721 MB -> 33.974 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 11\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (23373.227 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 371.313 ms, heap usage 780.679 MB -> 161.200 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (17055.803 ms) ======\n====== akka-uct (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 323.521 ms, heap usage 714.804 MB -> 140.346 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 2 completed (16644.579 ms) ======\n====== akka-uct (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 312.697 ms, heap usage 606.138 MB -> 139.703 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 3 completed (16230.901 ms) ======\n====== akka-uct (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 272.343 ms, heap usage 694.413 MB -> 139.888 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 4 completed (16222.783 ms) ======\n====== akka-uct (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 288.309 ms, heap usage 549.430 MB -> 124.976 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 5 completed (16061.576 ms) ======\n====== akka-uct (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 254.080 ms, heap usage 570.484 MB -> 130.699 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 6 completed (15769.690 ms) ======\n====== akka-uct (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 387.396 ms, heap usage 619.770 MB -> 158.750 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 7 completed (15901.168 ms) ======\n====== akka-uct (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 304.489 ms, heap usage 580.964 MB -> 149.879 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 8 completed (16178.151 ms) ======\n====== akka-uct (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 253.043 ms, heap usage 553.450 MB -> 150.939 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 9 completed (15874.839 ms) ======\n====== akka-uct (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 301.130 ms, heap usage 528.928 MB -> 139.937 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 10 completed (15982.587 ms) ======\n====== akka-uct (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 267.305 ms, heap usage 626.465 MB -> 131.010 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 11 completed (16353.495 ms) ======\n====== akka-uct (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 294.293 ms, heap usage 500.855 MB -> 153.125 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 12 completed (15969.903 ms) ======\n====== akka-uct (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 292.350 ms, heap usage 647.259 MB -> 125.388 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 13 completed (15322.843 ms) ======\n====== akka-uct (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 252.391 ms, heap usage 562.070 MB -> 128.190 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 14 completed (16083.172 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 2 (out of 2) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 134.630 ms, heap usage 463.678 MB -> 85.476 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (22878.805 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 103.188 ms, heap usage 272.080 MB -> 100.040 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (14811.341 ms) ======\n====== movie-lens (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 144.144 ms, heap usage 208.849 MB -> 97.194 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 2 completed (13632.892 ms) ======\n====== movie-lens (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 122.890 ms, heap usage 173.120 MB -> 97.842 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 3 completed (12814.257 ms) ======\n====== movie-lens (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 113.279 ms, heap usage 237.308 MB -> 98.141 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 4 completed (12978.413 ms) ======\n====== movie-lens (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 119.099 ms, heap usage 219.670 MB -> 98.103 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 5 completed (14306.460 ms) ======\n====== movie-lens (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 123.459 ms, heap usage 175.077 MB -> 98.404 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 6 completed (12568.443 ms) ======\n====== movie-lens (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 115.564 ms, heap usage 119.760 MB -> 100.031 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 7 completed (11505.398 ms) ======\n====== movie-lens (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 112.918 ms, heap usage 255.198 MB -> 99.024 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 8 completed (11706.594 ms) ======\n====== movie-lens (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 170.418 ms, heap usage 189.372 MB -> 98.513 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 9 completed (11662.958 ms) ======\n====== movie-lens (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 218.616 ms, heap usage 163.601 MB -> 98.629 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 10 completed (11293.424 ms) ======\n====== movie-lens (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 126.280 ms, heap usage 236.690 MB -> 98.603 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 11 completed (11873.509 ms) ======\n====== movie-lens (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 121.729 ms, heap usage 154.433 MB -> 98.657 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 12 completed (12263.435 ms) ======\n====== movie-lens (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 113.550 ms, heap usage 470.143 MB -> 102.266 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 13 completed (12351.951 ms) ======\n====== movie-lens (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 107.375 ms, heap usage 274.093 MB -> 98.738 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 14 completed (12112.256 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 83.428 ms, heap usage 476.231 MB -> 58.268 MB.\n====== scala-doku (scala) [default], iteration 0 completed (2753.475 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 83.813 ms, heap usage 150.542 MB -> 58.243 MB.\n====== scala-doku (scala) [default], iteration 1 completed (2340.567 ms) ======\n====== scala-doku (scala) [default], iteration 2 started ======\nGC before operation: completed in 88.607 ms, heap usage 121.743 MB -> 58.244 MB.\n====== scala-doku (scala) [default], iteration 2 completed (2269.313 ms) ======\n====== scala-doku (scala) [default], iteration 3 started ======\nGC before operation: completed in 79.133 ms, heap usage 118.244 MB -> 58.245 MB.\n====== scala-doku (scala) [default], iteration 3 completed (1898.181 ms) ======\n====== scala-doku (scala) [default], iteration 4 started ======\nGC before operation: completed in 86.643 ms, heap usage 120.745 MB -> 58.245 MB.\n====== scala-doku (scala) [default], iteration 4 completed (1792.430 ms) ======\n====== scala-doku (scala) [default], iteration 5 started ======\nGC before operation: completed in 77.315 ms, heap usage 119.245 MB -> 58.245 MB.\n====== scala-doku (scala) [default], iteration 5 completed (1786.944 ms) ======\n====== scala-doku (scala) [default], iteration 6 started ======\nGC before operation: completed in 89.168 ms, heap usage 120.745 MB -> 58.245 MB.\n====== scala-doku (scala) [default], iteration 6 completed (1866.830 ms) ======\n====== scala-doku (scala) [default], iteration 7 started ======\nGC before operation: completed in 76.164 ms, heap usage 120.245 MB -> 58.246 MB.\n====== scala-doku (scala) [default], iteration 7 completed (1799.903 ms) ======\n====== scala-doku (scala) [default], iteration 8 started ======\nGC before operation: completed in 79.207 ms, heap usage 119.746 MB -> 58.246 MB.\n====== scala-doku (scala) [default], iteration 8 completed (1782.750 ms) ======\n====== scala-doku (scala) [default], iteration 9 started ======\nGC before operation: completed in 86.288 ms, heap usage 120.246 MB -> 58.247 MB.\n====== scala-doku (scala) [default], iteration 9 completed (1778.745 ms) ======\n====== scala-doku (scala) [default], iteration 10 started ======\nGC before operation: completed in 77.760 ms, heap usage 119.747 MB -> 58.247 MB.\n====== scala-doku (scala) [default], iteration 10 completed (1794.655 ms) ======\n====== scala-doku (scala) [default], iteration 11 started ======\nGC before operation: completed in 92.459 ms, heap usage 119.747 MB -> 58.247 MB.\n====== scala-doku (scala) [default], iteration 11 completed (1818.580 ms) ======\n====== scala-doku (scala) [default], iteration 12 started ======\nGC before operation: completed in 77.984 ms, heap usage 120.247 MB -> 58.247 MB.\n====== scala-doku (scala) [default], iteration 12 completed (1848.215 ms) ======\n====== scala-doku (scala) [default], iteration 13 started ======\nGC before operation: completed in 93.441 ms, heap usage 119.747 MB -> 58.247 MB.\n====== scala-doku (scala) [default], iteration 13 completed (1809.411 ms) ======\n====== scala-doku (scala) [default], iteration 14 started ======\nGC before operation: completed in 82.582 ms, heap usage 119.747 MB -> 58.247 MB.\n====== scala-doku (scala) [default], iteration 14 completed (1803.934 ms) ======\nNOTE: 'chi-square' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== chi-square (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 99.379 ms, heap usage 319.426 MB -> 63.405 MB.\n====== chi-square (apache-spark) [default], iteration 0 completed (5198.635 ms) ======\n====== chi-square (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 217.985 ms, heap usage 339.427 MB -> 209.273 MB.\n====== chi-square (apache-spark) [default], iteration 1 completed (1119.485 ms) ======\n====== chi-square (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 175.933 ms, heap usage 299.968 MB -> 209.346 MB.\n====== chi-square (apache-spark) [default], iteration 2 completed (1038.669 ms) ======\n====== chi-square (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 162.484 ms, heap usage 434.584 MB -> 209.395 MB.\n====== chi-square (apache-spark) [default], iteration 3 completed (988.864 ms) ======\n====== chi-square (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 185.658 ms, heap usage 472.608 MB -> 209.448 MB.\n====== chi-square (apache-spark) [default], iteration 4 completed (1021.110 ms) ======\n====== chi-square (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 161.400 ms, heap usage 424.379 MB -> 209.494 MB.\n====== chi-square (apache-spark) [default], iteration 5 completed (1016.339 ms) ======\n====== chi-square (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 165.385 ms, heap usage 377.344 MB -> 209.638 MB.\n====== chi-square (apache-spark) [default], iteration 6 completed (1044.792 ms) ======\n====== chi-square (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 151.433 ms, heap usage 385.817 MB -> 209.712 MB.\n====== chi-square (apache-spark) [default], iteration 7 completed (892.107 ms) ======\n====== chi-square (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 148.497 ms, heap usage 375.358 MB -> 209.695 MB.\n====== chi-square (apache-spark) [default], iteration 8 completed (912.148 ms) ======\n====== chi-square (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 186.559 ms, heap usage 381.260 MB -> 209.735 MB.\n====== chi-square (apache-spark) [default], iteration 9 completed (916.193 ms) ======\n====== chi-square (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 172.071 ms, heap usage 375.984 MB -> 209.776 MB.\n====== chi-square (apache-spark) [default], iteration 10 completed (706.035 ms) ======\n====== chi-square (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 142.619 ms, heap usage 232.457 MB -> 209.816 MB.\n====== chi-square (apache-spark) [default], iteration 11 completed (764.527 ms) ======\n====== chi-square (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 164.121 ms, heap usage 670.340 MB -> 209.852 MB.\n====== chi-square (apache-spark) [default], iteration 12 completed (858.768 ms) ======\n====== chi-square (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 159.826 ms, heap usage 316.763 MB -> 209.890 MB.\n====== chi-square (apache-spark) [default], iteration 13 completed (862.769 ms) ======\n====== chi-square (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 166.687 ms, heap usage 379.775 MB -> 209.921 MB.\n====== chi-square (apache-spark) [default], iteration 14 completed (703.576 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 196.120 ms, heap usage 470.464 MB -> 147.340 MB.\n====== fj-kmeans (concurrency) [default], iteration 0 completed (8529.473 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 133.696 ms, heap usage 331.615 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 1 completed (7479.812 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 134.063 ms, heap usage 318.922 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 2 completed (7610.407 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 133.778 ms, heap usage 222.341 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 3 completed (7571.793 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 139.456 ms, heap usage 217.309 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 4 completed (7516.518 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 133.370 ms, heap usage 382.616 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 5 completed (8339.655 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 140.237 ms, heap usage 354.831 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 6 completed (7633.795 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 137.960 ms, heap usage 448.031 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 7 completed (7335.928 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 127.427 ms, heap usage 221.957 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 8 completed (7359.912 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 137.302 ms, heap usage 368.915 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 9 completed (8379.108 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 139.433 ms, heap usage 184.312 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 10 completed (8029.337 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 138.797 ms, heap usage 171.657 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 11 completed (7673.166 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 132.845 ms, heap usage 170.035 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 12 completed (7460.127 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 137.480 ms, heap usage 320.158 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 13 completed (7646.174 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 127.475 ms, heap usage 186.440 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 14 completed (7391.153 ms) ======\n====== rx-scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 138.851 ms, heap usage 249.054 MB -> 97.875 MB.\n====== rx-scrabble (functional) [default], iteration 0 completed (539.438 ms) ======\n====== rx-scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 97.806 ms, heap usage 250.872 MB -> 98.124 MB.\n====== rx-scrabble (functional) [default], iteration 1 completed (188.955 ms) ======\n====== rx-scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 121.701 ms, heap usage 240.121 MB -> 98.118 MB.\n====== rx-scrabble (functional) [default], iteration 2 completed (158.740 ms) ======\n====== rx-scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 103.202 ms, heap usage 238.618 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 3 completed (147.979 ms) ======\n====== rx-scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 107.730 ms, heap usage 239.113 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 4 completed (162.112 ms) ======\n====== rx-scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 117.578 ms, heap usage 239.463 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 5 completed (128.936 ms) ======\n====== rx-scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 111.309 ms, heap usage 239.390 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 6 completed (116.055 ms) ======\n====== rx-scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 109.603 ms, heap usage 239.557 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 7 completed (109.336 ms) ======\n====== rx-scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 108.494 ms, heap usage 239.260 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 8 completed (124.372 ms) ======\n====== rx-scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 134.578 ms, heap usage 239.449 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 9 completed (133.649 ms) ======\n====== rx-scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 98.374 ms, heap usage 240.453 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 10 completed (197.918 ms) ======\n====== rx-scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 111.349 ms, heap usage 240.463 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 11 completed (117.228 ms) ======\n====== rx-scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 104.555 ms, heap usage 240.413 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 12 completed (112.849 ms) ======\n====== rx-scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 98.436 ms, heap usage 240.514 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 13 completed (105.866 ms) ======\n====== rx-scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 92.783 ms, heap usage 240.977 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 14 completed (105.587 ms) ======\n====== db-shootout (database) [default], iteration 0 started ======\nGC before operation: completed in 104.333 ms, heap usage 179.823 MB -> 100.606 MB.\n====== db-shootout (database) [default], iteration 0 completed (8779.951 ms) ======\n====== db-shootout (database) [default], iteration 1 started ======\nGC before operation: completed in 107.497 ms, heap usage 242.103 MB -> 110.924 MB.\n====== db-shootout (database) [default], iteration 1 completed (9343.782 ms) ======\n====== db-shootout (database) [default], iteration 2 started ======\nGC before operation: completed in 111.405 ms, heap usage 283.357 MB -> 112.478 MB.\n====== db-shootout (database) [default], iteration 2 completed (7499.305 ms) ======\n====== db-shootout (database) [default], iteration 3 started ======\nGC before operation: completed in 94.995 ms, heap usage 543.589 MB -> 114.314 MB.\n====== db-shootout (database) [default], iteration 3 completed (8724.019 ms) ======\n====== db-shootout (database) [default], iteration 4 started ======\nGC before operation: completed in 101.845 ms, heap usage 213.978 MB -> 159.872 MB.\n====== db-shootout (database) [default], iteration 4 completed (7010.765 ms) ======\n====== db-shootout (database) [default], iteration 5 started ======\nGC before operation: completed in 164.949 ms, heap usage 636.845 MB -> 167.668 MB.\n====== db-shootout (database) [default], iteration 5 completed (7721.156 ms) ======\n====== db-shootout (database) [default], iteration 6 started ======\nGC before operation: completed in 130.093 ms, heap usage 384.324 MB -> 167.486 MB.\n====== db-shootout (database) [default], iteration 6 completed (7647.257 ms) ======\n====== db-shootout (database) [default], iteration 7 started ======\nGC before operation: completed in 109.623 ms, heap usage 282.011 MB -> 175.857 MB.\n====== db-shootout (database) [default], iteration 7 completed (7329.669 ms) ======\n====== db-shootout (database) [default], iteration 8 started ======\nGC before operation: completed in 116.420 ms, heap usage 284.042 MB -> 175.655 MB.\n====== db-shootout (database) [default], iteration 8 completed (7329.711 ms) ======\n====== db-shootout (database) [default], iteration 9 started ======\nGC before operation: completed in 171.716 ms, heap usage 342.792 MB -> 175.912 MB.\n====== db-shootout (database) [default], iteration 9 completed (6774.502 ms) ======\n====== db-shootout (database) [default], iteration 10 started ======\nGC before operation: completed in 173.829 ms, heap usage 293.932 MB -> 175.555 MB.\n====== db-shootout (database) [default], iteration 10 completed (6874.618 ms) ======\n====== db-shootout (database) [default], iteration 11 started ======\nGC before operation: completed in 148.492 ms, heap usage 400.220 MB -> 180.072 MB.\n====== db-shootout (database) [default], iteration 11 completed (7713.732 ms) ======\n====== db-shootout (database) [default], iteration 12 started ======\nGC before operation: completed in 117.617 ms, heap usage 194.930 MB -> 178.866 MB.\n====== db-shootout (database) [default], iteration 12 completed (7466.876 ms) ======\n====== db-shootout (database) [default], iteration 13 started ======\nGC before operation: completed in 129.592 ms, heap usage 290.546 MB -> 179.243 MB.\n====== db-shootout (database) [default], iteration 13 completed (6989.489 ms) ======\n====== db-shootout (database) [default], iteration 14 started ======\nGC before operation: completed in 136.413 ms, heap usage 256.392 MB -> 179.022 MB.\n====== db-shootout (database) [default], iteration 14 completed (6647.630 ms) ======\nCreating graph database...\nLoading resources...\nPopulating database...\nfinagle-http on :39975 spawning 2 client and default number of server workers.\n====== finagle-http (web) [default], iteration 0 started ======\nGC before operation: completed in 98.510 ms, heap usage 612.157 MB -> 111.470 MB.\n====== finagle-http (web) [default], iteration 0 completed (17579.182 ms) ======\n====== finagle-http (web) [default], iteration 1 started ======\nGC before operation: completed in 132.580 ms, heap usage 293.599 MB -> 114.255 MB.\n====== finagle-http (web) [default], iteration 1 completed (7093.193 ms) ======\n====== finagle-http (web) [default], iteration 2 started ======\nGC before operation: completed in 139.872 ms, heap usage 142.229 MB -> 114.940 MB.\n====== finagle-http (web) [default], iteration 2 completed (3467.412 ms) ======\n====== finagle-http (web) [default], iteration 3 started ======\nGC before operation: completed in 102.621 ms, heap usage 139.149 MB -> 115.008 MB.\n====== finagle-http (web) [default], iteration 3 completed (2891.463 ms) ======\n====== finagle-http (web) [default], iteration 4 started ======\nGC before operation: completed in 101.518 ms, heap usage 138.053 MB -> 115.745 MB.\n====== finagle-http (web) [default], iteration 4 completed (3105.065 ms) ======\n====== finagle-http (web) [default], iteration 5 started ======\nGC before operation: completed in 107.976 ms, heap usage 136.110 MB -> 115.075 MB.\n====== finagle-http (web) [default], iteration 5 completed (2695.150 ms) ======\n====== finagle-http (web) [default], iteration 6 started ======\nGC before operation: completed in 112.486 ms, heap usage 136.249 MB -> 115.049 MB.\n====== finagle-http (web) [default], iteration 6 completed (2704.392 ms) ======\n====== finagle-http (web) [default], iteration 7 started ======\nGC before operation: completed in 114.377 ms, heap usage 135.245 MB -> 115.020 MB.\n====== finagle-http (web) [default], iteration 7 completed (2948.935 ms) ======\n====== finagle-http (web) [default], iteration 8 started ======\nGC before operation: completed in 122.053 ms, heap usage 135.666 MB -> 115.051 MB.\n====== finagle-http (web) [default], iteration 8 completed (2778.196 ms) ======\n====== finagle-http (web) [default], iteration 9 started ======\nGC before operation: completed in 109.678 ms, heap usage 136.088 MB -> 115.031 MB.\n====== finagle-http (web) [default], iteration 9 completed (2747.983 ms) ======\n====== finagle-http (web) [default], iteration 10 started ======\nGC before operation: completed in 99.536 ms, heap usage 135.498 MB -> 115.057 MB.\n====== finagle-http (web) [default], iteration 10 completed (2777.183 ms) ======\n====== finagle-http (web) [default], iteration 11 started ======\nGC before operation: completed in 100.476 ms, heap usage 134.090 MB -> 115.060 MB.\n====== finagle-http (web) [default], iteration 11 completed (2950.363 ms) ======\n====== finagle-http (web) [default], iteration 12 started ======\nGC before operation: completed in 101.952 ms, heap usage 134.523 MB -> 115.062 MB.\n====== finagle-http (web) [default], iteration 12 completed (2759.978 ms) ======\n====== finagle-http (web) [default], iteration 13 started ======\nGC before operation: completed in 109.865 ms, heap usage 135.138 MB -> 115.064 MB.\n====== finagle-http (web) [default], iteration 13 completed (2831.653 ms) ======\n====== finagle-http (web) [default], iteration 14 started ======\nGC before operation: completed in 105.948 ms, heap usage 134.532 MB -> 115.044 MB.\n====== finagle-http (web) [default], iteration 14 completed (2711.280 ms) ======\n====== reactors (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 105.850 ms, heap usage 151.704 MB -> 116.190 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 0 completed (17020.896 ms) ======\n====== reactors (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 104.599 ms, heap usage 181.251 MB -> 113.711 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 1 completed (13892.575 ms) ======\n====== reactors (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 95.102 ms, heap usage 174.198 MB -> 113.758 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 2 completed (12554.742 ms) ======\n====== reactors (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 116.893 ms, heap usage 619.954 MB -> 113.748 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 3 completed (13425.368 ms) ======\n====== reactors (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 116.460 ms, heap usage 633.733 MB -> 113.696 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 4 completed (12579.614 ms) ======\n====== reactors (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 101.795 ms, heap usage 678.695 MB -> 113.699 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 5 completed (13161.693 ms) ======\n====== reactors (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 172.615 ms, heap usage 622.470 MB -> 113.699 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 6 completed (12878.519 ms) ======\n====== reactors (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 112.228 ms, heap usage 718.171 MB -> 113.700 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 7 completed (12975.597 ms) ======\n====== reactors (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 98.762 ms, heap usage 716.077 MB -> 113.700 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 8 completed (12770.728 ms) ======\n====== reactors (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 102.126 ms, heap usage 748.105 MB -> 113.710 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 9 completed (13076.609 ms) ======\n====== reactors (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 98.649 ms, heap usage 687.606 MB -> 113.700 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 10 completed (13003.432 ms) ======\n====== reactors (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 101.379 ms, heap usage 732.195 MB -> 113.700 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 11 completed (14004.051 ms) ======\n====== reactors (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 105.159 ms, heap usage 627.924 MB -> 113.700 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 12 completed (13270.736 ms) ======\n====== reactors (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 108.063 ms, heap usage 752.521 MB -> 113.700 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 13 completed (13719.150 ms) ======\n====== reactors (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 122.216 ms, heap usage 634.683 MB -> 113.714 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 14 completed (13878.366 ms) ======\nNOTE: 'dec-tree' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== dec-tree (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 164.697 ms, heap usage 737.360 MB -> 126.493 MB.\n====== dec-tree (apache-spark) [default], iteration 0 completed (10211.732 ms) ======\n====== dec-tree (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 163.548 ms, heap usage 286.590 MB -> 158.107 MB.\n====== dec-tree (apache-spark) [default], iteration 1 completed (2450.505 ms) ======\n====== dec-tree (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 136.565 ms, heap usage 345.940 MB -> 158.492 MB.\n====== dec-tree (apache-spark) [default], iteration 2 completed (2009.743 ms) ======\n====== dec-tree (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 138.685 ms, heap usage 279.501 MB -> 158.716 MB.\n====== dec-tree (apache-spark) [default], iteration 3 completed (1989.605 ms) ======\n====== dec-tree (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 146.026 ms, heap usage 489.120 MB -> 158.915 MB.\n====== dec-tree (apache-spark) [default], iteration 4 completed (1714.918 ms) ======\n====== dec-tree (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 127.943 ms, heap usage 488.970 MB -> 159.140 MB.\n====== dec-tree (apache-spark) [default], iteration 5 completed (1705.237 ms) ======\n====== dec-tree (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 130.962 ms, heap usage 190.728 MB -> 158.870 MB.\n====== dec-tree (apache-spark) [default], iteration 6 completed (1675.410 ms) ======\n====== dec-tree (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 128.752 ms, heap usage 464.234 MB -> 159.494 MB.\n====== dec-tree (apache-spark) [default], iteration 7 completed (1687.319 ms) ======\n====== dec-tree (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 131.642 ms, heap usage 193.742 MB -> 159.062 MB.\n====== dec-tree (apache-spark) [default], iteration 8 completed (1553.852 ms) ======\n====== dec-tree (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 146.296 ms, heap usage 480.448 MB -> 168.014 MB.\n====== dec-tree (apache-spark) [default], iteration 9 completed (1516.748 ms) ======\n====== dec-tree (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 144.013 ms, heap usage 452.343 MB -> 159.895 MB.\n====== dec-tree (apache-spark) [default], iteration 10 completed (1582.871 ms) ======\n====== dec-tree (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 134.653 ms, heap usage 443.551 MB -> 160.089 MB.\n====== dec-tree (apache-spark) [default], iteration 11 completed (1470.741 ms) ======\n====== dec-tree (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 195.778 ms, heap usage 440.791 MB -> 160.224 MB.\n====== dec-tree (apache-spark) [default], iteration 12 completed (1455.447 ms) ======\n====== dec-tree (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 153.178 ms, heap usage 513.991 MB -> 160.372 MB.\n====== dec-tree (apache-spark) [default], iteration 13 completed (1444.480 ms) ======\n====== dec-tree (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 140.368 ms, heap usage 445.814 MB -> 160.435 MB.\n====== dec-tree (apache-spark) [default], iteration 14 completed (1470.615 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 0 started ======\nGC before operation: completed in 151.372 ms, heap usage 172.187 MB -> 143.483 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 534\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 53\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 9\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 7\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 10\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 8\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 16\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 4\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 11\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 22\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 4\tmaxttc = 534\tfailed = 0\ttotal = 4\nSHORT_TRAVERSAL:  successful = 6\tmaxttc = 16\tfailed = 0\ttotal = 6\nSHORT_TRAVERSAL_RO:  successful = 10\tmaxttc = 9\tfailed = 0\ttotal = 10\nOPERATION:  successful = 8\tmaxttc = 22\tfailed = 0\ttotal = 8\nOPERATION_RO:  successful = 12\tmaxttc = 11\tfailed = 0\ttotal = 12\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 59.88 op/s (59.88 op/s including failed)\nElapsed time: 0.67 s\n====== scala-stm-bench7 (scala) [default], iteration 0 completed (2511.480 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 1 started ======\nGC before operation: completed in 135.828 ms, heap usage 523.490 MB -> 142.053 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 470\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 13\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 8\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 14\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 9\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 8\tmaxttc = 534\tfailed = 0\ttotal = 8\nSHORT_TRAVERSAL:  successful = 12\tmaxttc = 16\tfailed = 0\ttotal = 12\nSHORT_TRAVERSAL_RO:  successful = 20\tmaxttc = 9\tfailed = 0\ttotal = 20\nOPERATION:  successful = 16\tmaxttc = 22\tfailed = 0\ttotal = 16\nOPERATION_RO:  successful = 24\tmaxttc = 14\tfailed = 0\ttotal = 24\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 155.64 op/s (155.64 op/s including failed)\nElapsed time: 0.51 s\n====== scala-stm-bench7 (scala) [default], iteration 1 completed (1783.062 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 2 started ======\nGC before operation: completed in 240.384 ms, heap usage 489.877 MB -> 142.054 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 517\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 11\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 8\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 12\tmaxttc = 534\tfailed = 0\ttotal = 12\nSHORT_TRAVERSAL:  successful = 18\tmaxttc = 16\tfailed = 0\ttotal = 18\nSHORT_TRAVERSAL_RO:  successful = 30\tmaxttc = 9\tfailed = 0\ttotal = 30\nOPERATION:  successful = 24\tmaxttc = 22\tfailed = 0\ttotal = 24\nOPERATION_RO:  successful = 36\tmaxttc = 14\tfailed = 0\ttotal = 36\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 220.59 op/s (220.59 op/s including failed)\nElapsed time: 0.54 s\n====== scala-stm-bench7 (scala) [default], iteration 2 completed (1408.246 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 3 started ======\nGC before operation: completed in 136.697 ms, heap usage 506.905 MB -> 142.050 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 496\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 7\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 4\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 16\tmaxttc = 534\tfailed = 0\ttotal = 16\nSHORT_TRAVERSAL:  successful = 24\tmaxttc = 16\tfailed = 0\ttotal = 24\nSHORT_TRAVERSAL_RO:  successful = 40\tmaxttc = 9\tfailed = 0\ttotal = 40\nOPERATION:  successful = 32\tmaxttc = 22\tfailed = 0\ttotal = 32\nOPERATION_RO:  successful = 48\tmaxttc = 14\tfailed = 0\ttotal = 48\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 310.08 op/s (310.08 op/s including failed)\nElapsed time: 0.52 s\n====== scala-stm-bench7 (scala) [default], iteration 3 completed (1342.530 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 4 started ======\nGC before operation: completed in 147.926 ms, heap usage 393.121 MB -> 142.060 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 384\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 7\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 4\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 20\tmaxttc = 534\tfailed = 0\ttotal = 20\nSHORT_TRAVERSAL:  successful = 30\tmaxttc = 16\tfailed = 0\ttotal = 30\nSHORT_TRAVERSAL_RO:  successful = 50\tmaxttc = 9\tfailed = 0\ttotal = 50\nOPERATION:  successful = 40\tmaxttc = 22\tfailed = 0\ttotal = 40\nOPERATION_RO:  successful = 60\tmaxttc = 14\tfailed = 0\ttotal = 60\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 506.33 op/s (506.33 op/s including failed)\nElapsed time: 0.40 s\n====== scala-stm-bench7 (scala) [default], iteration 4 completed (1272.510 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 5 started ======\nGC before operation: completed in 185.238 ms, heap usage 380.599 MB -> 142.044 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 518\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 11\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 6\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 24\tmaxttc = 534\tfailed = 0\ttotal = 24\nSHORT_TRAVERSAL:  successful = 36\tmaxttc = 16\tfailed = 0\ttotal = 36\nSHORT_TRAVERSAL_RO:  successful = 60\tmaxttc = 9\tfailed = 0\ttotal = 60\nOPERATION:  successful = 48\tmaxttc = 22\tfailed = 0\ttotal = 48\nOPERATION_RO:  successful = 72\tmaxttc = 14\tfailed = 0\ttotal = 72\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 441.99 op/s (441.99 op/s including failed)\nElapsed time: 0.54 s\n====== scala-stm-bench7 (scala) [default], iteration 5 completed (1480.501 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 6 started ======\nGC before operation: completed in 153.068 ms, heap usage 507.102 MB -> 142.056 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 463\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 11\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 8\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 8\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 28\tmaxttc = 534\tfailed = 0\ttotal = 28\nSHORT_TRAVERSAL:  successful = 42\tmaxttc = 16\tfailed = 0\ttotal = 42\nSHORT_TRAVERSAL_RO:  successful = 70\tmaxttc = 9\tfailed = 0\ttotal = 70\nOPERATION:  successful = 56\tmaxttc = 22\tfailed = 0\ttotal = 56\nOPERATION_RO:  successful = 84\tmaxttc = 14\tfailed = 0\ttotal = 84\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 577.32 op/s (577.32 op/s including failed)\nElapsed time: 0.49 s\n====== scala-stm-bench7 (scala) [default], iteration 6 completed (1372.866 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 7 started ======\nGC before operation: completed in 147.549 ms, heap usage 507.608 MB -> 142.061 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 483\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 9\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 32\tmaxttc = 534\tfailed = 0\ttotal = 32\nSHORT_TRAVERSAL:  successful = 48\tmaxttc = 16\tfailed = 0\ttotal = 48\nSHORT_TRAVERSAL_RO:  successful = 80\tmaxttc = 9\tfailed = 0\ttotal = 80\nOPERATION:  successful = 64\tmaxttc = 22\tfailed = 0\ttotal = 64\nOPERATION_RO:  successful = 96\tmaxttc = 14\tfailed = 0\ttotal = 96\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 642.57 op/s (642.57 op/s including failed)\nElapsed time: 0.50 s\n====== scala-stm-bench7 (scala) [default], iteration 7 completed (1368.893 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 8 started ======\nGC before operation: completed in 156.075 ms, heap usage 505.601 MB -> 142.044 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 492\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 10\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 4\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 36\tmaxttc = 534\tfailed = 0\ttotal = 36\nSHORT_TRAVERSAL:  successful = 54\tmaxttc = 16\tfailed = 0\ttotal = 54\nSHORT_TRAVERSAL_RO:  successful = 90\tmaxttc = 9\tfailed = 0\ttotal = 90\nOPERATION:  successful = 72\tmaxttc = 22\tfailed = 0\ttotal = 72\nOPERATION_RO:  successful = 108\tmaxttc = 14\tfailed = 0\ttotal = 108\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 705.88 op/s (705.88 op/s including failed)\nElapsed time: 0.51 s\n====== scala-stm-bench7 (scala) [default], iteration 8 completed (1469.754 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 9 started ======\nGC before operation: completed in 137.134 ms, heap usage 507.110 MB -> 142.056 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 474\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 10\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 4\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 40\tmaxttc = 534\tfailed = 0\ttotal = 40\nSHORT_TRAVERSAL:  successful = 60\tmaxttc = 16\tfailed = 0\ttotal = 60\nSHORT_TRAVERSAL_RO:  successful = 100\tmaxttc = 9\tfailed = 0\ttotal = 100\nOPERATION:  successful = 80\tmaxttc = 22\tfailed = 0\ttotal = 80\nOPERATION_RO:  successful = 120\tmaxttc = 14\tfailed = 0\ttotal = 120\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 818.00 op/s (818.00 op/s including failed)\nElapsed time: 0.49 s\n====== scala-stm-bench7 (scala) [default], iteration 9 completed (1497.723 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 10 started ======\nGC before operation: completed in 389.866 ms, heap usage 507.497 MB -> 295.408 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 340\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 11\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 44\tmaxttc = 534\tfailed = 0\ttotal = 44\nSHORT_TRAVERSAL:  successful = 66\tmaxttc = 16\tfailed = 0\ttotal = 66\nSHORT_TRAVERSAL_RO:  successful = 110\tmaxttc = 9\tfailed = 0\ttotal = 110\nOPERATION:  successful = 88\tmaxttc = 22\tfailed = 0\ttotal = 88\nOPERATION_RO:  successful = 132\tmaxttc = 14\tfailed = 0\ttotal = 132\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1229.05 op/s (1229.05 op/s including failed)\nElapsed time: 0.36 s\n====== scala-stm-bench7 (scala) [default], iteration 10 completed (1120.384 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 11 started ======\nGC before operation: completed in 140.313 ms, heap usage 400.744 MB -> 142.052 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 600\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 12\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 48\tmaxttc = 600\tfailed = 0\ttotal = 48\nSHORT_TRAVERSAL:  successful = 72\tmaxttc = 16\tfailed = 0\ttotal = 72\nSHORT_TRAVERSAL_RO:  successful = 120\tmaxttc = 9\tfailed = 0\ttotal = 120\nOPERATION:  successful = 96\tmaxttc = 22\tfailed = 0\ttotal = 96\nOPERATION_RO:  successful = 144\tmaxttc = 14\tfailed = 0\ttotal = 144\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 770.47 op/s (770.47 op/s including failed)\nElapsed time: 0.62 s\n====== scala-stm-bench7 (scala) [default], iteration 11 completed (1498.094 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 12 started ======\nGC before operation: completed in 158.043 ms, heap usage 507.099 MB -> 142.057 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 429\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 6\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 52\tmaxttc = 600\tfailed = 0\ttotal = 52\nSHORT_TRAVERSAL:  successful = 78\tmaxttc = 16\tfailed = 0\ttotal = 78\nSHORT_TRAVERSAL_RO:  successful = 130\tmaxttc = 9\tfailed = 0\ttotal = 130\nOPERATION:  successful = 104\tmaxttc = 22\tfailed = 0\ttotal = 104\nOPERATION_RO:  successful = 156\tmaxttc = 14\tfailed = 0\ttotal = 156\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1184.51 op/s (1184.51 op/s including failed)\nElapsed time: 0.44 s\n====== scala-stm-bench7 (scala) [default], iteration 12 completed (1301.468 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 13 started ======\nGC before operation: completed in 157.214 ms, heap usage 430.109 MB -> 142.044 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 441\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 8\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 7\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 56\tmaxttc = 600\tfailed = 0\ttotal = 56\nSHORT_TRAVERSAL:  successful = 84\tmaxttc = 16\tfailed = 0\ttotal = 84\nSHORT_TRAVERSAL_RO:  successful = 140\tmaxttc = 9\tfailed = 0\ttotal = 140\nOPERATION:  successful = 112\tmaxttc = 22\tfailed = 0\ttotal = 112\nOPERATION_RO:  successful = 168\tmaxttc = 14\tfailed = 0\ttotal = 168\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1244.44 op/s (1244.44 op/s including failed)\nElapsed time: 0.45 s\n====== scala-stm-bench7 (scala) [default], iteration 13 completed (1351.470 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 14 started ======\nGC before operation: completed in 141.475 ms, heap usage 507.530 MB -> 142.049 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 482\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 10\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 60\tmaxttc = 600\tfailed = 0\ttotal = 60\nSHORT_TRAVERSAL:  successful = 90\tmaxttc = 16\tfailed = 0\ttotal = 90\nSHORT_TRAVERSAL_RO:  successful = 150\tmaxttc = 9\tfailed = 0\ttotal = 150\nOPERATION:  successful = 120\tmaxttc = 22\tfailed = 0\ttotal = 120\nOPERATION_RO:  successful = 180\tmaxttc = 14\tfailed = 0\ttotal = 180\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1204.82 op/s (1204.82 op/s including failed)\nElapsed time: 0.50 s\n====== scala-stm-bench7 (scala) [default], iteration 14 completed (1439.994 ms) ======\nNOTE: 'naive-bayes' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== naive-bayes (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 157.559 ms, heap usage 173.043 MB -> 152.727 MB.\n====== naive-bayes (apache-spark) [default], iteration 0 completed (40505.768 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 203.021 ms, heap usage 442.679 MB -> 428.812 MB.\n====== naive-bayes (apache-spark) [default], iteration 1 completed (23313.942 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 184.892 ms, heap usage 455.964 MB -> 429.040 MB.\n====== naive-bayes (apache-spark) [default], iteration 2 completed (22137.040 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 207.126 ms, heap usage 447.901 MB -> 429.105 MB.\n====== naive-bayes (apache-spark) [default], iteration 3 completed (22166.338 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 178.331 ms, heap usage 447.914 MB -> 429.201 MB.\n====== naive-bayes (apache-spark) [default], iteration 4 completed (22021.017 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 188.053 ms, heap usage 531.524 MB -> 429.272 MB.\n====== naive-bayes (apache-spark) [default], iteration 5 completed (21499.434 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 198.890 ms, heap usage 499.768 MB -> 429.344 MB.\n====== naive-bayes (apache-spark) [default], iteration 6 completed (21187.520 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 175.395 ms, heap usage 531.319 MB -> 429.410 MB.\n====== naive-bayes (apache-spark) [default], iteration 7 completed (22419.763 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 282.874 ms, heap usage 492.795 MB -> 429.532 MB.\n====== naive-bayes (apache-spark) [default], iteration 8 completed (21701.999 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 167.999 ms, heap usage 455.434 MB -> 427.583 MB.\n====== naive-bayes (apache-spark) [default], iteration 9 completed (20956.195 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 211.706 ms, heap usage 813.593 MB -> 421.269 MB.\n====== naive-bayes (apache-spark) [default], iteration 10 completed (21463.384 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 165.327 ms, heap usage 542.556 MB -> 422.040 MB.\n====== naive-bayes (apache-spark) [default], iteration 11 completed (20713.293 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 156.444 ms, heap usage 742.313 MB -> 422.032 MB.\n====== naive-bayes (apache-spark) [default], iteration 12 completed (20682.267 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 143.812 ms, heap usage 741.763 MB -> 422.119 MB.\n====== naive-bayes (apache-spark) [default], iteration 13 completed (21341.442 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 154.760 ms, heap usage 448.917 MB -> 422.205 MB.\n====== naive-bayes (apache-spark) [default], iteration 14 completed (21277.786 ms) ======\nNOTE: 'als' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== als (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 170.517 ms, heap usage 342.184 MB -> 167.715 MB.\n====== als (apache-spark) [default], iteration 0 completed (17245.293 ms) ======\n====== als (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 206.106 ms, heap usage 381.163 MB -> 192.447 MB.\n====== als (apache-spark) [default], iteration 1 completed (8374.551 ms) ======\n====== als (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 203.403 ms, heap usage 692.875 MB -> 193.732 MB.\n====== als (apache-spark) [default], iteration 2 completed (7613.825 ms) ======\n====== als (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 197.033 ms, heap usage 770.490 MB -> 194.322 MB.\n====== als (apache-spark) [default], iteration 3 completed (7498.159 ms) ======\n====== als (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 222.854 ms, heap usage 724.610 MB -> 194.842 MB.\n====== als (apache-spark) [default], iteration 4 completed (7222.046 ms) ======\n====== als (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 199.073 ms, heap usage 630.683 MB -> 195.312 MB.\n====== als (apache-spark) [default], iteration 5 completed (6777.255 ms) ======\n====== als (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 196.178 ms, heap usage 670.045 MB -> 195.920 MB.\n====== als (apache-spark) [default], iteration 6 completed (6716.076 ms) ======\n====== als (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 196.405 ms, heap usage 703.914 MB -> 196.465 MB.\n====== als (apache-spark) [default], iteration 7 completed (6706.499 ms) ======\n====== als (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 200.429 ms, heap usage 690.188 MB -> 197.117 MB.\n====== als (apache-spark) [default], iteration 8 completed (6692.376 ms) ======\n====== als (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 206.096 ms, heap usage 703.429 MB -> 197.402 MB.\n====== als (apache-spark) [default], iteration 9 completed (6829.927 ms) ======\n====== als (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 210.566 ms, heap usage 722.096 MB -> 197.832 MB.\n====== als (apache-spark) [default], iteration 10 completed (6464.726 ms) ======\n====== als (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 207.892 ms, heap usage 691.523 MB -> 197.993 MB.\n====== als (apache-spark) [default], iteration 11 completed (6570.330 ms) ======\n====== als (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 235.043 ms, heap usage 728.923 MB -> 198.219 MB.\n====== als (apache-spark) [default], iteration 12 completed (6550.026 ms) ======\n====== als (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 204.262 ms, heap usage 672.212 MB -> 198.515 MB.\n====== als (apache-spark) [default], iteration 13 completed (6596.781 ms) ======\n====== als (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 202.815 ms, heap usage 743.348 MB -> 198.767 MB.\n====== als (apache-spark) [default], iteration 14 completed (6349.995 ms) ======\n====== par-mnemonics (functional) [default], iteration 0 started ======\nGC before operation: completed in 300.165 ms, heap usage 696.077 MB -> 179.147 MB.\n====== par-mnemonics (functional) [default], iteration 0 completed (4479.313 ms) ======\n====== par-mnemonics (functional) [default], iteration 1 started ======\nGC before operation: completed in 193.254 ms, heap usage 336.437 MB -> 179.107 MB.\n====== par-mnemonics (functional) [default], iteration 1 completed (4119.000 ms) ======\n====== par-mnemonics (functional) [default], iteration 2 started ======\nGC before operation: completed in 192.306 ms, heap usage 405.576 MB -> 179.104 MB.\n====== par-mnemonics (functional) [default], iteration 2 completed (4258.146 ms) ======\n====== par-mnemonics (functional) [default], iteration 3 started ======\nGC before operation: completed in 193.004 ms, heap usage 324.174 MB -> 179.108 MB.\n====== par-mnemonics (functional) [default], iteration 3 completed (4452.797 ms) ======\n====== par-mnemonics (functional) [default], iteration 4 started ======\nGC before operation: completed in 177.712 ms, heap usage 419.693 MB -> 179.105 MB.\n====== par-mnemonics (functional) [default], iteration 4 completed (3933.250 ms) ======\n====== par-mnemonics (functional) [default], iteration 5 started ======\nGC before operation: completed in 186.258 ms, heap usage 324.982 MB -> 179.105 MB.\n====== par-mnemonics (functional) [default], iteration 5 completed (4007.080 ms) ======\n====== par-mnemonics (functional) [default], iteration 6 started ======\nGC before operation: completed in 190.779 ms, heap usage 309.104 MB -> 179.121 MB.\n====== par-mnemonics (functional) [default], iteration 6 completed (3953.148 ms) ======\n====== par-mnemonics (functional) [default], iteration 7 started ======\nGC before operation: completed in 204.409 ms, heap usage 312.674 MB -> 179.116 MB.\n====== par-mnemonics (functional) [default], iteration 7 completed (4068.803 ms) ======\n====== par-mnemonics (functional) [default], iteration 8 started ======\nGC before operation: completed in 187.505 ms, heap usage 315.067 MB -> 179.106 MB.\n====== par-mnemonics (functional) [default], iteration 8 completed (3881.191 ms) ======\n====== par-mnemonics (functional) [default], iteration 9 started ======\nGC before operation: completed in 178.405 ms, heap usage 312.898 MB -> 179.106 MB.\n====== par-mnemonics (functional) [default], iteration 9 completed (4171.076 ms) ======\n====== par-mnemonics (functional) [default], iteration 10 started ======\nGC before operation: completed in 188.686 ms, heap usage 312.174 MB -> 179.106 MB.\n====== par-mnemonics (functional) [default], iteration 10 completed (3953.921 ms) ======\n====== par-mnemonics (functional) [default], iteration 11 started ======\nGC before operation: completed in 191.991 ms, heap usage 319.854 MB -> 179.106 MB.\n====== par-mnemonics (functional) [default], iteration 11 completed (4020.731 ms) ======\n====== par-mnemonics (functional) [default], iteration 12 started ======\nGC before operation: completed in 194.977 ms, heap usage 313.371 MB -> 179.106 MB.\n====== par-mnemonics (functional) [default], iteration 12 completed (4155.199 ms) ======\n====== par-mnemonics (functional) [default], iteration 13 started ======\nGC before operation: completed in 186.738 ms, heap usage 349.674 MB -> 179.103 MB.\n====== par-mnemonics (functional) [default], iteration 13 completed (4420.589 ms) ======\n====== par-mnemonics (functional) [default], iteration 14 started ======\nGC before operation: completed in 189.534 ms, heap usage 309.674 MB -> 179.103 MB.\n====== par-mnemonics (functional) [default], iteration 14 completed (3653.633 ms) ======\n====== scala-kmeans (scala) [default], iteration 0 started ======\nGC before operation: completed in 259.501 ms, heap usage 343.603 MB -> 201.421 MB.\n====== scala-kmeans (scala) [default], iteration 0 completed (339.766 ms) ======\n====== scala-kmeans (scala) [default], iteration 1 started ======\nGC before operation: completed in 202.460 ms, heap usage 256.921 MB -> 201.453 MB.\n====== scala-kmeans (scala) [default], iteration 1 completed (226.462 ms) ======\n====== scala-kmeans (scala) [default], iteration 2 started ======\nGC before operation: completed in 202.113 ms, heap usage 323.453 MB -> 201.453 MB.\n====== scala-kmeans (scala) [default], iteration 2 completed (224.094 ms) ======\n====== scala-kmeans (scala) [default], iteration 3 started ======\nGC before operation: completed in 183.749 ms, heap usage 322.953 MB -> 201.453 MB.\n====== scala-kmeans (scala) [default], iteration 3 completed (222.411 ms) ======\n====== scala-kmeans (scala) [default], iteration 4 started ======\nGC before operation: completed in 202.302 ms, heap usage 322.953 MB -> 201.453 MB.\n====== scala-kmeans (scala) [default], iteration 4 completed (223.270 ms) ======\n====== scala-kmeans (scala) [default], iteration 5 started ======\nGC before operation: completed in 202.640 ms, heap usage 322.953 MB -> 201.455 MB.\n====== scala-kmeans (scala) [default], iteration 5 completed (224.528 ms) ======\n====== scala-kmeans (scala) [default], iteration 6 started ======\nGC before operation: completed in 188.615 ms, heap usage 322.953 MB -> 201.453 MB.\n====== scala-kmeans (scala) [default], iteration 6 completed (231.478 ms) ======\n====== scala-kmeans (scala) [default], iteration 7 started ======\nGC before operation: completed in 206.202 ms, heap usage 322.953 MB -> 201.472 MB.\n====== scala-kmeans (scala) [default], iteration 7 completed (229.890 ms) ======\n====== scala-kmeans (scala) [default], iteration 8 started ======\nGC before operation: completed in 201.694 ms, heap usage 322.954 MB -> 201.454 MB.\n====== scala-kmeans (scala) [default], iteration 8 completed (259.279 ms) ======\n====== scala-kmeans (scala) [default], iteration 9 started ======\nGC before operation: completed in 185.242 ms, heap usage 332.551 MB -> 201.483 MB.\n====== scala-kmeans (scala) [default], iteration 9 completed (235.502 ms) ======\n====== scala-kmeans (scala) [default], iteration 10 started ======\nGC before operation: completed in 205.981 ms, heap usage 323.461 MB -> 201.461 MB.\n====== scala-kmeans (scala) [default], iteration 10 completed (235.422 ms) ======\n====== scala-kmeans (scala) [default], iteration 11 started ======\nGC before operation: completed in 205.946 ms, heap usage 322.961 MB -> 201.489 MB.\n====== scala-kmeans (scala) [default], iteration 11 completed (339.977 ms) ======\n====== scala-kmeans (scala) [default], iteration 12 started ======\nGC before operation: completed in 200.922 ms, heap usage 330.961 MB -> 201.462 MB.\n====== scala-kmeans (scala) [default], iteration 12 completed (222.818 ms) ======\n====== scala-kmeans (scala) [default], iteration 13 started ======\nGC before operation: completed in 192.781 ms, heap usage 322.962 MB -> 201.463 MB.\n====== scala-kmeans (scala) [default], iteration 13 completed (220.477 ms) ======\n====== scala-kmeans (scala) [default], iteration 14 started ======\nGC before operation: completed in 202.779 ms, heap usage 322.963 MB -> 201.463 MB.\n====== scala-kmeans (scala) [default], iteration 14 completed (222.039 ms) ======\n====== philosophers (scala) [default], iteration 0 started ======\nGC before operation: completed in 241.597 ms, heap usage 324.963 MB -> 180.463 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 0 completed (1409.944 ms) ======\n====== philosophers (scala) [default], iteration 1 started ======\nGC before operation: completed in 243.462 ms, heap usage 184.232 MB -> 180.383 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 1 completed (604.601 ms) ======\n====== philosophers (scala) [default], iteration 2 started ======\nGC before operation: completed in 192.650 ms, heap usage 525.881 MB -> 180.384 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 2 completed (741.321 ms) ======\n====== philosophers (scala) [default], iteration 3 started ======\nGC before operation: completed in 181.298 ms, heap usage 189.882 MB -> 180.385 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 3 completed (757.745 ms) ======\n====== philosophers (scala) [default], iteration 4 started ======\nGC before operation: completed in 201.106 ms, heap usage 194.464 MB -> 180.382 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 4 completed (659.879 ms) ======\n====== philosophers (scala) [default], iteration 5 started ======\nGC before operation: completed in 199.590 ms, heap usage 538.382 MB -> 180.402 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 5 completed (761.913 ms) ======\n====== philosophers (scala) [default], iteration 6 started ======\nGC before operation: completed in 180.230 ms, heap usage 206.336 MB -> 180.407 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 6 completed (582.194 ms) ======\n====== philosophers (scala) [default], iteration 7 started ======\nGC before operation: completed in 181.803 ms, heap usage 539.882 MB -> 180.387 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 7 completed (719.670 ms) ======\n====== philosophers (scala) [default], iteration 8 started ======\nGC before operation: completed in 205.901 ms, heap usage 205.086 MB -> 180.392 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 8 completed (711.867 ms) ======\n====== philosophers (scala) [default], iteration 9 started ======\nGC before operation: completed in 181.841 ms, heap usage 201.039 MB -> 180.385 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 9 completed (668.165 ms) ======\n====== philosophers (scala) [default], iteration 10 started ======\nGC before operation: completed in 199.598 ms, heap usage 194.511 MB -> 180.385 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 10 completed (566.751 ms) ======\n====== philosophers (scala) [default], iteration 11 started ======\nGC before operation: completed in 283.702 ms, heap usage 541.882 MB -> 180.382 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 11 completed (656.239 ms) ======\n====== philosophers (scala) [default], iteration 12 started ======\nGC before operation: completed in 177.024 ms, heap usage 193.987 MB -> 180.397 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 12 completed (612.935 ms) ======\n====== philosophers (scala) [default], iteration 13 started ======\nGC before operation: completed in 187.202 ms, heap usage 182.739 MB -> 180.398 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 13 completed (607.424 ms) ======\n====== philosophers (scala) [default], iteration 14 started ======\nGC before operation: completed in 194.918 ms, heap usage 191.477 MB -> 180.385 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 14 completed (767.034 ms) ======\nNOTE: 'log-regression' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== log-regression (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 200.091 ms, heap usage 269.882 MB -> 192.522 MB.\n====== log-regression (apache-spark) [default], iteration 0 completed (10200.692 ms) ======\n====== log-regression (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 265.987 ms, heap usage 685.270 MB -> 272.962 MB.\n====== log-regression (apache-spark) [default], iteration 1 completed (2383.667 ms) ======\n====== log-regression (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 191.716 ms, heap usage 723.618 MB -> 273.054 MB.\n====== log-regression (apache-spark) [default], iteration 2 completed (1814.105 ms) ======\n====== log-regression (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 214.202 ms, heap usage 803.623 MB -> 273.940 MB.\n====== log-regression (apache-spark) [default], iteration 3 completed (1769.557 ms) ======\n====== log-regression (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 295.871 ms, heap usage 736.077 MB -> 273.784 MB.\n====== log-regression (apache-spark) [default], iteration 4 completed (1748.066 ms) ======\n====== log-regression (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 252.860 ms, heap usage 796.034 MB -> 274.567 MB.\n====== log-regression (apache-spark) [default], iteration 5 completed (1730.830 ms) ======\n====== log-regression (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 193.306 ms, heap usage 772.790 MB -> 274.731 MB.\n====== log-regression (apache-spark) [default], iteration 6 completed (1570.874 ms) ======\n====== log-regression (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 196.220 ms, heap usage 745.435 MB -> 274.773 MB.\n====== log-regression (apache-spark) [default], iteration 7 completed (1425.369 ms) ======\n====== log-regression (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 213.785 ms, heap usage 790.879 MB -> 275.216 MB.\n====== log-regression (apache-spark) [default], iteration 8 completed (1372.563 ms) ======\n====== log-regression (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 203.644 ms, heap usage 775.698 MB -> 275.341 MB.\n====== log-regression (apache-spark) [default], iteration 9 completed (1356.486 ms) ======\n====== log-regression (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 208.058 ms, heap usage 789.384 MB -> 275.613 MB.\n====== log-regression (apache-spark) [default], iteration 10 completed (1377.665 ms) ======\n====== log-regression (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 215.160 ms, heap usage 769.988 MB -> 275.721 MB.\n====== log-regression (apache-spark) [default], iteration 11 completed (1441.676 ms) ======\n====== log-regression (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 207.060 ms, heap usage 779.839 MB -> 275.885 MB.\n====== log-regression (apache-spark) [default], iteration 12 completed (1344.311 ms) ======\n====== log-regression (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 210.402 ms, heap usage 768.518 MB -> 276.105 MB.\n====== log-regression (apache-spark) [default], iteration 13 completed (1502.652 ms) ======\n====== log-regression (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 202.788 ms, heap usage 765.290 MB -> 276.190 MB.\n====== log-regression (apache-spark) [default], iteration 14 completed (1510.368 ms) ======\nNOTE: 'gauss-mix' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== gauss-mix (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 221.071 ms, heap usage 621.403 MB -> 212.611 MB.\nAccuracy (validation) = 0.97667 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99333 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.91556 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99444 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 0 completed (32765.783 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 226.149 ms, heap usage 448.175 MB -> 218.989 MB.\nAccuracy (validation) = 0.97667 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99333 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.91556 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99444 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 1 completed (28169.443 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 233.916 ms, heap usage 284.299 MB -> 220.290 MB.\nAccuracy (validation) = 0.97667 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99333 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.91556 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99444 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 2 completed (26149.767 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 236.760 ms, heap usage 516.075 MB -> 221.871 MB.\nAccuracy (validation) = 0.97667 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99333 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.91556 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99444 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 3 completed (26250.307 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 230.692 ms, heap usage 313.653 MB -> 222.589 MB.\nAccuracy (validation) = 0.97667 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99333 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.91556 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99444 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 4 completed (24299.630 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 239.420 ms, heap usage 604.554 MB -> 222.932 MB.\nAccuracy (validation) = 0.97667 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99333 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.91556 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99444 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 5 completed (23670.122 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 229.737 ms, heap usage 527.090 MB -> 222.918 MB.\nAccuracy (validation) = 0.97667 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99333 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.91556 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99444 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 6 completed (19763.832 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 236.395 ms, heap usage 270.964 MB -> 222.478 MB.\nAccuracy (validation) = 0.97667 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99333 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.91556 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99444 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 7 completed (20519.230 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 235.480 ms, heap usage 392.699 MB -> 223.046 MB.\nAccuracy (validation) = 0.97667 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99333 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.91556 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99444 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 8 completed (19780.493 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 228.126 ms, heap usage 389.397 MB -> 222.753 MB.\nAccuracy (validation) = 0.97667 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99333 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.91556 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99444 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 9 completed (18838.189 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 232.057 ms, heap usage 268.377 MB -> 222.483 MB.\nAccuracy (validation) = 0.97667 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99333 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.91556 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99444 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 10 completed (25146.781 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 233.811 ms, heap usage 385.081 MB -> 222.924 MB.\nAccuracy (validation) = 0.97667 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99333 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.91556 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99444 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 11 completed (18846.665 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 233.190 ms, heap usage 268.234 MB -> 222.584 MB.\nAccuracy (validation) = 0.97667 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99333 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.91556 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99444 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 12 completed (22796.260 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 236.535 ms, heap usage 508.599 MB -> 222.697 MB.\nAccuracy (validation) = 0.97667 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99333 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.91556 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99444 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 13 completed (23208.565 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 240.926 ms, heap usage 257.352 MB -> 222.936 MB.\nAccuracy (validation) = 0.97667 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99333 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.91556 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99444 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 14 completed (19702.003 ms) ======\n====== mnemonics (functional) [default], iteration 0 started ======\nGC before operation: completed in 229.763 ms, heap usage 653.024 MB -> 215.285 MB.\n====== mnemonics (functional) [default], iteration 0 completed (4912.060 ms) ======\n====== mnemonics (functional) [default], iteration 1 started ======\nGC before operation: completed in 286.926 ms, heap usage 348.525 MB -> 212.374 MB.\n====== mnemonics (functional) [default], iteration 1 completed (4853.674 ms) ======\n====== mnemonics (functional) [default], iteration 2 started ======\nGC before operation: completed in 316.487 ms, heap usage 344.719 MB -> 212.375 MB.\n====== mnemonics (functional) [default], iteration 2 completed (4807.340 ms) ======\n====== mnemonics (functional) [default], iteration 3 started ======\nGC before operation: completed in 331.319 ms, heap usage 341.922 MB -> 212.388 MB.\n====== mnemonics (functional) [default], iteration 3 completed (4704.409 ms) ======\n====== mnemonics (functional) [default], iteration 4 started ======\nGC before operation: completed in 221.717 ms, heap usage 347.402 MB -> 212.385 MB.\n====== mnemonics (functional) [default], iteration 4 completed (4781.430 ms) ======\n====== mnemonics (functional) [default], iteration 5 started ======\nGC before operation: completed in 222.118 ms, heap usage 347.419 MB -> 211.812 MB.\n====== mnemonics (functional) [default], iteration 5 completed (4843.976 ms) ======\n====== mnemonics (functional) [default], iteration 6 started ======\nGC before operation: completed in 238.758 ms, heap usage 346.861 MB -> 211.848 MB.\n====== mnemonics (functional) [default], iteration 6 completed (4627.921 ms) ======\n====== mnemonics (functional) [default], iteration 7 started ======\nGC before operation: completed in 223.531 ms, heap usage 352.166 MB -> 211.830 MB.\n====== mnemonics (functional) [default], iteration 7 completed (4931.177 ms) ======\n====== mnemonics (functional) [default], iteration 8 started ======\nGC before operation: completed in 221.471 ms, heap usage 343.152 MB -> 211.835 MB.\n====== mnemonics (functional) [default], iteration 8 completed (4695.904 ms) ======\n====== mnemonics (functional) [default], iteration 9 started ======\nGC before operation: completed in 227.286 ms, heap usage 341.151 MB -> 211.833 MB.\n====== mnemonics (functional) [default], iteration 9 completed (4799.330 ms) ======\n====== mnemonics (functional) [default], iteration 10 started ======\nGC before operation: completed in 224.047 ms, heap usage 341.152 MB -> 211.833 MB.\n====== mnemonics (functional) [default], iteration 10 completed (4837.347 ms) ======\n====== mnemonics (functional) [default], iteration 11 started ======\nGC before operation: completed in 280.233 ms, heap usage 346.852 MB -> 211.833 MB.\n====== mnemonics (functional) [default], iteration 11 completed (4418.383 ms) ======\n====== mnemonics (functional) [default], iteration 12 started ======\nGC before operation: completed in 285.743 ms, heap usage 352.830 MB -> 210.688 MB.\n====== mnemonics (functional) [default], iteration 12 completed (4509.635 ms) ======\n====== mnemonics (functional) [default], iteration 13 started ======\nGC before operation: completed in 219.793 ms, heap usage 343.185 MB -> 210.702 MB.\n====== mnemonics (functional) [default], iteration 13 completed (4488.064 ms) ======\n====== mnemonics (functional) [default], iteration 14 started ======\nGC before operation: completed in 216.426 ms, heap usage 346.687 MB -> 210.689 MB.\n====== mnemonics (functional) [default], iteration 14 completed (4923.621 ms) ======\n"
    },
    "dotty": {
        "times": [
            14766.819,
            5840.501,
            4644.727,
            4007.941,
            3383.523,
            3202.383,
            3029.147,
            2713.005,
            2638.156,
            2463.251,
            2168.038,
            2378.848,
            2306.044,
            1985.266,
            1897.143
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 111.440 ms, heap usage 193.716 MB -> 76.034 MB.\n====== scrabble (functional) [default], iteration 0 completed (1746.818 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 75.425 ms, heap usage 124.295 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 1 completed (822.799 ms) ======\n====== scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 103.806 ms, heap usage 309.363 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 2 completed (876.688 ms) ======\n====== scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 108.057 ms, heap usage 131.528 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 3 completed (772.422 ms) ======\n====== scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 90.330 ms, heap usage 339.197 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 4 completed (664.922 ms) ======\n====== scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 78.633 ms, heap usage 242.581 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 5 completed (767.926 ms) ======\n====== scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 80.529 ms, heap usage 243.067 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 6 completed (771.953 ms) ======\n====== scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 87.821 ms, heap usage 169.966 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 7 completed (713.175 ms) ======\n====== scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 85.627 ms, heap usage 126.363 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 8 completed (705.321 ms) ======\n====== scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 77.713 ms, heap usage 279.273 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 9 completed (595.178 ms) ======\n====== scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 90.853 ms, heap usage 197.665 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 10 completed (653.981 ms) ======\n====== scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 80.787 ms, heap usage 125.936 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 11 completed (671.613 ms) ======\n====== scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 81.092 ms, heap usage 326.788 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 12 completed (614.500 ms) ======\n====== scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 74.421 ms, heap usage 199.244 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 13 completed (687.061 ms) ======\n====== scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 77.486 ms, heap usage 357.036 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 14 completed (698.120 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 39.864 ms, heap usage 626.576 MB -> 29.596 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (20832.995 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 151.296 ms, heap usage 587.802 MB -> 148.935 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (10726.986 ms) ======\n====== page-rank (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 139.528 ms, heap usage 662.229 MB -> 149.044 MB.\n====== page-rank (apache-spark) [default], iteration 2 completed (10497.012 ms) ======\n====== page-rank (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 145.301 ms, heap usage 620.847 MB -> 149.161 MB.\n====== page-rank (apache-spark) [default], iteration 3 completed (10683.078 ms) ======\n====== page-rank (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 146.272 ms, heap usage 595.956 MB -> 149.275 MB.\n====== page-rank (apache-spark) [default], iteration 4 completed (11158.857 ms) ======\n====== page-rank (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 150.477 ms, heap usage 624.956 MB -> 149.389 MB.\n====== page-rank (apache-spark) [default], iteration 5 completed (10816.748 ms) ======\n====== page-rank (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 152.563 ms, heap usage 475.956 MB -> 149.705 MB.\n====== page-rank (apache-spark) [default], iteration 6 completed (10797.777 ms) ======\n====== page-rank (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 153.431 ms, heap usage 575.956 MB -> 149.630 MB.\n====== page-rank (apache-spark) [default], iteration 7 completed (10320.855 ms) ======\n====== page-rank (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 154.161 ms, heap usage 494.956 MB -> 149.734 MB.\n====== page-rank (apache-spark) [default], iteration 8 completed (10797.875 ms) ======\n====== page-rank (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 159.810 ms, heap usage 685.884 MB -> 149.850 MB.\n====== page-rank (apache-spark) [default], iteration 9 completed (10426.551 ms) ======\n====== page-rank (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 138.119 ms, heap usage 483.136 MB -> 149.929 MB.\n====== page-rank (apache-spark) [default], iteration 10 completed (11319.287 ms) ======\n====== page-rank (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 160.571 ms, heap usage 417.218 MB -> 150.048 MB.\n====== page-rank (apache-spark) [default], iteration 11 completed (10773.541 ms) ======\n====== page-rank (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 153.774 ms, heap usage 591.956 MB -> 150.197 MB.\n====== page-rank (apache-spark) [default], iteration 12 completed (10583.141 ms) ======\n====== page-rank (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 151.297 ms, heap usage 385.309 MB -> 150.212 MB.\n====== page-rank (apache-spark) [default], iteration 13 completed (11225.389 ms) ======\n====== page-rank (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 138.750 ms, heap usage 506.956 MB -> 150.287 MB.\n====== page-rank (apache-spark) [default], iteration 14 completed (11253.752 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 60.640 ms, heap usage 661.207 MB -> 32.216 MB.\n====== future-genetic (functional) [default], iteration 0 completed (14742.129 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 51.821 ms, heap usage 114.841 MB -> 33.158 MB.\n====== future-genetic (functional) [default], iteration 1 completed (11014.493 ms) ======\n====== future-genetic (functional) [default], iteration 2 started ======\nGC before operation: completed in 34.821 ms, heap usage 68.320 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 2 completed (10628.352 ms) ======\n====== future-genetic (functional) [default], iteration 3 started ======\nGC before operation: completed in 38.504 ms, heap usage 57.876 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 3 completed (10722.143 ms) ======\n====== future-genetic (functional) [default], iteration 4 started ======\nGC before operation: completed in 39.692 ms, heap usage 145.206 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 4 completed (10840.012 ms) ======\n====== future-genetic (functional) [default], iteration 5 started ======\nGC before operation: completed in 38.411 ms, heap usage 81.011 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 5 completed (10598.435 ms) ======\n====== future-genetic (functional) [default], iteration 6 started ======\nGC before operation: completed in 40.019 ms, heap usage 144.534 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 6 completed (10786.150 ms) ======\n====== future-genetic (functional) [default], iteration 7 started ======\nGC before operation: completed in 48.015 ms, heap usage 171.419 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 7 completed (10652.683 ms) ======\n====== future-genetic (functional) [default], iteration 8 started ======\nGC before operation: completed in 35.498 ms, heap usage 37.426 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 8 completed (10488.698 ms) ======\n====== future-genetic (functional) [default], iteration 9 started ======\nGC before operation: completed in 42.383 ms, heap usage 130.505 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 9 completed (10682.271 ms) ======\n====== future-genetic (functional) [default], iteration 10 started ======\nGC before operation: completed in 48.742 ms, heap usage 134.970 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 10 completed (10549.840 ms) ======\n====== future-genetic (functional) [default], iteration 11 started ======\nGC before operation: completed in 41.808 ms, heap usage 156.009 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 11 completed (10851.547 ms) ======\n====== future-genetic (functional) [default], iteration 12 started ======\nGC before operation: completed in 40.139 ms, heap usage 163.381 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 12 completed (10940.461 ms) ======\n====== future-genetic (functional) [default], iteration 13 started ======\nGC before operation: completed in 35.048 ms, heap usage 80.372 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 13 completed (10876.099 ms) ======\n====== future-genetic (functional) [default], iteration 14 started ======\nGC before operation: completed in 43.468 ms, heap usage 62.997 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 14 completed (10763.606 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 70.620 ms, heap usage 85.721 MB -> 33.974 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 11\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (23373.227 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 371.313 ms, heap usage 780.679 MB -> 161.200 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (17055.803 ms) ======\n====== akka-uct (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 323.521 ms, heap usage 714.804 MB -> 140.346 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 2 completed (16644.579 ms) ======\n====== akka-uct (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 312.697 ms, heap usage 606.138 MB -> 139.703 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 3 completed (16230.901 ms) ======\n====== akka-uct (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 272.343 ms, heap usage 694.413 MB -> 139.888 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 4 completed (16222.783 ms) ======\n====== akka-uct (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 288.309 ms, heap usage 549.430 MB -> 124.976 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 5 completed (16061.576 ms) ======\n====== akka-uct (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 254.080 ms, heap usage 570.484 MB -> 130.699 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 6 completed (15769.690 ms) ======\n====== akka-uct (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 387.396 ms, heap usage 619.770 MB -> 158.750 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 7 completed (15901.168 ms) ======\n====== akka-uct (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 304.489 ms, heap usage 580.964 MB -> 149.879 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 8 completed (16178.151 ms) ======\n====== akka-uct (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 253.043 ms, heap usage 553.450 MB -> 150.939 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 9 completed (15874.839 ms) ======\n====== akka-uct (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 301.130 ms, heap usage 528.928 MB -> 139.937 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 10 completed (15982.587 ms) ======\n====== akka-uct (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 267.305 ms, heap usage 626.465 MB -> 131.010 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 11 completed (16353.495 ms) ======\n====== akka-uct (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 294.293 ms, heap usage 500.855 MB -> 153.125 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 12 completed (15969.903 ms) ======\n====== akka-uct (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 292.350 ms, heap usage 647.259 MB -> 125.388 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 13 completed (15322.843 ms) ======\n====== akka-uct (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 252.391 ms, heap usage 562.070 MB -> 128.190 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 14 completed (16083.172 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 2 (out of 2) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 134.630 ms, heap usage 463.678 MB -> 85.476 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (22878.805 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 103.188 ms, heap usage 272.080 MB -> 100.040 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (14811.341 ms) ======\n====== movie-lens (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 144.144 ms, heap usage 208.849 MB -> 97.194 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 2 completed (13632.892 ms) ======\n====== movie-lens (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 122.890 ms, heap usage 173.120 MB -> 97.842 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 3 completed (12814.257 ms) ======\n====== movie-lens (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 113.279 ms, heap usage 237.308 MB -> 98.141 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 4 completed (12978.413 ms) ======\n====== movie-lens (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 119.099 ms, heap usage 219.670 MB -> 98.103 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 5 completed (14306.460 ms) ======\n====== movie-lens (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 123.459 ms, heap usage 175.077 MB -> 98.404 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 6 completed (12568.443 ms) ======\n====== movie-lens (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 115.564 ms, heap usage 119.760 MB -> 100.031 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 7 completed (11505.398 ms) ======\n====== movie-lens (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 112.918 ms, heap usage 255.198 MB -> 99.024 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 8 completed (11706.594 ms) ======\n====== movie-lens (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 170.418 ms, heap usage 189.372 MB -> 98.513 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 9 completed (11662.958 ms) ======\n====== movie-lens (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 218.616 ms, heap usage 163.601 MB -> 98.629 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 10 completed (11293.424 ms) ======\n====== movie-lens (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 126.280 ms, heap usage 236.690 MB -> 98.603 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 11 completed (11873.509 ms) ======\n====== movie-lens (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 121.729 ms, heap usage 154.433 MB -> 98.657 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 12 completed (12263.435 ms) ======\n====== movie-lens (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 113.550 ms, heap usage 470.143 MB -> 102.266 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 13 completed (12351.951 ms) ======\n====== movie-lens (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 107.375 ms, heap usage 274.093 MB -> 98.738 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 14 completed (12112.256 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 83.428 ms, heap usage 476.231 MB -> 58.268 MB.\n====== scala-doku (scala) [default], iteration 0 completed (2753.475 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 83.813 ms, heap usage 150.542 MB -> 58.243 MB.\n====== scala-doku (scala) [default], iteration 1 completed (2340.567 ms) ======\n====== scala-doku (scala) [default], iteration 2 started ======\nGC before operation: completed in 88.607 ms, heap usage 121.743 MB -> 58.244 MB.\n====== scala-doku (scala) [default], iteration 2 completed (2269.313 ms) ======\n====== scala-doku (scala) [default], iteration 3 started ======\nGC before operation: completed in 79.133 ms, heap usage 118.244 MB -> 58.245 MB.\n====== scala-doku (scala) [default], iteration 3 completed (1898.181 ms) ======\n====== scala-doku (scala) [default], iteration 4 started ======\nGC before operation: completed in 86.643 ms, heap usage 120.745 MB -> 58.245 MB.\n====== scala-doku (scala) [default], iteration 4 completed (1792.430 ms) ======\n====== scala-doku (scala) [default], iteration 5 started ======\nGC before operation: completed in 77.315 ms, heap usage 119.245 MB -> 58.245 MB.\n====== scala-doku (scala) [default], iteration 5 completed (1786.944 ms) ======\n====== scala-doku (scala) [default], iteration 6 started ======\nGC before operation: completed in 89.168 ms, heap usage 120.745 MB -> 58.245 MB.\n====== scala-doku (scala) [default], iteration 6 completed (1866.830 ms) ======\n====== scala-doku (scala) [default], iteration 7 started ======\nGC before operation: completed in 76.164 ms, heap usage 120.245 MB -> 58.246 MB.\n====== scala-doku (scala) [default], iteration 7 completed (1799.903 ms) ======\n====== scala-doku (scala) [default], iteration 8 started ======\nGC before operation: completed in 79.207 ms, heap usage 119.746 MB -> 58.246 MB.\n====== scala-doku (scala) [default], iteration 8 completed (1782.750 ms) ======\n====== scala-doku (scala) [default], iteration 9 started ======\nGC before operation: completed in 86.288 ms, heap usage 120.246 MB -> 58.247 MB.\n====== scala-doku (scala) [default], iteration 9 completed (1778.745 ms) ======\n====== scala-doku (scala) [default], iteration 10 started ======\nGC before operation: completed in 77.760 ms, heap usage 119.747 MB -> 58.247 MB.\n====== scala-doku (scala) [default], iteration 10 completed (1794.655 ms) ======\n====== scala-doku (scala) [default], iteration 11 started ======\nGC before operation: completed in 92.459 ms, heap usage 119.747 MB -> 58.247 MB.\n====== scala-doku (scala) [default], iteration 11 completed (1818.580 ms) ======\n====== scala-doku (scala) [default], iteration 12 started ======\nGC before operation: completed in 77.984 ms, heap usage 120.247 MB -> 58.247 MB.\n====== scala-doku (scala) [default], iteration 12 completed (1848.215 ms) ======\n====== scala-doku (scala) [default], iteration 13 started ======\nGC before operation: completed in 93.441 ms, heap usage 119.747 MB -> 58.247 MB.\n====== scala-doku (scala) [default], iteration 13 completed (1809.411 ms) ======\n====== scala-doku (scala) [default], iteration 14 started ======\nGC before operation: completed in 82.582 ms, heap usage 119.747 MB -> 58.247 MB.\n====== scala-doku (scala) [default], iteration 14 completed (1803.934 ms) ======\nNOTE: 'chi-square' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== chi-square (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 99.379 ms, heap usage 319.426 MB -> 63.405 MB.\n====== chi-square (apache-spark) [default], iteration 0 completed (5198.635 ms) ======\n====== chi-square (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 217.985 ms, heap usage 339.427 MB -> 209.273 MB.\n====== chi-square (apache-spark) [default], iteration 1 completed (1119.485 ms) ======\n====== chi-square (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 175.933 ms, heap usage 299.968 MB -> 209.346 MB.\n====== chi-square (apache-spark) [default], iteration 2 completed (1038.669 ms) ======\n====== chi-square (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 162.484 ms, heap usage 434.584 MB -> 209.395 MB.\n====== chi-square (apache-spark) [default], iteration 3 completed (988.864 ms) ======\n====== chi-square (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 185.658 ms, heap usage 472.608 MB -> 209.448 MB.\n====== chi-square (apache-spark) [default], iteration 4 completed (1021.110 ms) ======\n====== chi-square (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 161.400 ms, heap usage 424.379 MB -> 209.494 MB.\n====== chi-square (apache-spark) [default], iteration 5 completed (1016.339 ms) ======\n====== chi-square (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 165.385 ms, heap usage 377.344 MB -> 209.638 MB.\n====== chi-square (apache-spark) [default], iteration 6 completed (1044.792 ms) ======\n====== chi-square (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 151.433 ms, heap usage 385.817 MB -> 209.712 MB.\n====== chi-square (apache-spark) [default], iteration 7 completed (892.107 ms) ======\n====== chi-square (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 148.497 ms, heap usage 375.358 MB -> 209.695 MB.\n====== chi-square (apache-spark) [default], iteration 8 completed (912.148 ms) ======\n====== chi-square (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 186.559 ms, heap usage 381.260 MB -> 209.735 MB.\n====== chi-square (apache-spark) [default], iteration 9 completed (916.193 ms) ======\n====== chi-square (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 172.071 ms, heap usage 375.984 MB -> 209.776 MB.\n====== chi-square (apache-spark) [default], iteration 10 completed (706.035 ms) ======\n====== chi-square (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 142.619 ms, heap usage 232.457 MB -> 209.816 MB.\n====== chi-square (apache-spark) [default], iteration 11 completed (764.527 ms) ======\n====== chi-square (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 164.121 ms, heap usage 670.340 MB -> 209.852 MB.\n====== chi-square (apache-spark) [default], iteration 12 completed (858.768 ms) ======\n====== chi-square (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 159.826 ms, heap usage 316.763 MB -> 209.890 MB.\n====== chi-square (apache-spark) [default], iteration 13 completed (862.769 ms) ======\n====== chi-square (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 166.687 ms, heap usage 379.775 MB -> 209.921 MB.\n====== chi-square (apache-spark) [default], iteration 14 completed (703.576 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 196.120 ms, heap usage 470.464 MB -> 147.340 MB.\n====== fj-kmeans (concurrency) [default], iteration 0 completed (8529.473 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 133.696 ms, heap usage 331.615 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 1 completed (7479.812 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 134.063 ms, heap usage 318.922 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 2 completed (7610.407 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 133.778 ms, heap usage 222.341 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 3 completed (7571.793 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 139.456 ms, heap usage 217.309 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 4 completed (7516.518 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 133.370 ms, heap usage 382.616 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 5 completed (8339.655 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 140.237 ms, heap usage 354.831 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 6 completed (7633.795 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 137.960 ms, heap usage 448.031 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 7 completed (7335.928 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 127.427 ms, heap usage 221.957 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 8 completed (7359.912 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 137.302 ms, heap usage 368.915 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 9 completed (8379.108 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 139.433 ms, heap usage 184.312 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 10 completed (8029.337 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 138.797 ms, heap usage 171.657 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 11 completed (7673.166 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 132.845 ms, heap usage 170.035 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 12 completed (7460.127 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 137.480 ms, heap usage 320.158 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 13 completed (7646.174 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 127.475 ms, heap usage 186.440 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 14 completed (7391.153 ms) ======\n====== rx-scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 138.851 ms, heap usage 249.054 MB -> 97.875 MB.\n====== rx-scrabble (functional) [default], iteration 0 completed (539.438 ms) ======\n====== rx-scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 97.806 ms, heap usage 250.872 MB -> 98.124 MB.\n====== rx-scrabble (functional) [default], iteration 1 completed (188.955 ms) ======\n====== rx-scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 121.701 ms, heap usage 240.121 MB -> 98.118 MB.\n====== rx-scrabble (functional) [default], iteration 2 completed (158.740 ms) ======\n====== rx-scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 103.202 ms, heap usage 238.618 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 3 completed (147.979 ms) ======\n====== rx-scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 107.730 ms, heap usage 239.113 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 4 completed (162.112 ms) ======\n====== rx-scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 117.578 ms, heap usage 239.463 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 5 completed (128.936 ms) ======\n====== rx-scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 111.309 ms, heap usage 239.390 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 6 completed (116.055 ms) ======\n====== rx-scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 109.603 ms, heap usage 239.557 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 7 completed (109.336 ms) ======\n====== rx-scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 108.494 ms, heap usage 239.260 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 8 completed (124.372 ms) ======\n====== rx-scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 134.578 ms, heap usage 239.449 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 9 completed (133.649 ms) ======\n====== rx-scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 98.374 ms, heap usage 240.453 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 10 completed (197.918 ms) ======\n====== rx-scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 111.349 ms, heap usage 240.463 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 11 completed (117.228 ms) ======\n====== rx-scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 104.555 ms, heap usage 240.413 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 12 completed (112.849 ms) ======\n====== rx-scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 98.436 ms, heap usage 240.514 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 13 completed (105.866 ms) ======\n====== rx-scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 92.783 ms, heap usage 240.977 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 14 completed (105.587 ms) ======\n====== db-shootout (database) [default], iteration 0 started ======\nGC before operation: completed in 104.333 ms, heap usage 179.823 MB -> 100.606 MB.\n====== db-shootout (database) [default], iteration 0 completed (8779.951 ms) ======\n====== db-shootout (database) [default], iteration 1 started ======\nGC before operation: completed in 107.497 ms, heap usage 242.103 MB -> 110.924 MB.\n====== db-shootout (database) [default], iteration 1 completed (9343.782 ms) ======\n====== db-shootout (database) [default], iteration 2 started ======\nGC before operation: completed in 111.405 ms, heap usage 283.357 MB -> 112.478 MB.\n====== db-shootout (database) [default], iteration 2 completed (7499.305 ms) ======\n====== db-shootout (database) [default], iteration 3 started ======\nGC before operation: completed in 94.995 ms, heap usage 543.589 MB -> 114.314 MB.\n====== db-shootout (database) [default], iteration 3 completed (8724.019 ms) ======\n====== db-shootout (database) [default], iteration 4 started ======\nGC before operation: completed in 101.845 ms, heap usage 213.978 MB -> 159.872 MB.\n====== db-shootout (database) [default], iteration 4 completed (7010.765 ms) ======\n====== db-shootout (database) [default], iteration 5 started ======\nGC before operation: completed in 164.949 ms, heap usage 636.845 MB -> 167.668 MB.\n====== db-shootout (database) [default], iteration 5 completed (7721.156 ms) ======\n====== db-shootout (database) [default], iteration 6 started ======\nGC before operation: completed in 130.093 ms, heap usage 384.324 MB -> 167.486 MB.\n====== db-shootout (database) [default], iteration 6 completed (7647.257 ms) ======\n====== db-shootout (database) [default], iteration 7 started ======\nGC before operation: completed in 109.623 ms, heap usage 282.011 MB -> 175.857 MB.\n====== db-shootout (database) [default], iteration 7 completed (7329.669 ms) ======\n====== db-shootout (database) [default], iteration 8 started ======\nGC before operation: completed in 116.420 ms, heap usage 284.042 MB -> 175.655 MB.\n====== db-shootout (database) [default], iteration 8 completed (7329.711 ms) ======\n====== db-shootout (database) [default], iteration 9 started ======\nGC before operation: completed in 171.716 ms, heap usage 342.792 MB -> 175.912 MB.\n====== db-shootout (database) [default], iteration 9 completed (6774.502 ms) ======\n====== db-shootout (database) [default], iteration 10 started ======\nGC before operation: completed in 173.829 ms, heap usage 293.932 MB -> 175.555 MB.\n====== db-shootout (database) [default], iteration 10 completed (6874.618 ms) ======\n====== db-shootout (database) [default], iteration 11 started ======\nGC before operation: completed in 148.492 ms, heap usage 400.220 MB -> 180.072 MB.\n====== db-shootout (database) [default], iteration 11 completed (7713.732 ms) ======\n====== db-shootout (database) [default], iteration 12 started ======\nGC before operation: completed in 117.617 ms, heap usage 194.930 MB -> 178.866 MB.\n====== db-shootout (database) [default], iteration 12 completed (7466.876 ms) ======\n====== db-shootout (database) [default], iteration 13 started ======\nGC before operation: completed in 129.592 ms, heap usage 290.546 MB -> 179.243 MB.\n====== db-shootout (database) [default], iteration 13 completed (6989.489 ms) ======\n====== db-shootout (database) [default], iteration 14 started ======\nGC before operation: completed in 136.413 ms, heap usage 256.392 MB -> 179.022 MB.\n====== db-shootout (database) [default], iteration 14 completed (6647.630 ms) ======\nCreating graph database...\nLoading resources...\nPopulating database...\nfinagle-http on :39975 spawning 2 client and default number of server workers.\n====== finagle-http (web) [default], iteration 0 started ======\nGC before operation: completed in 98.510 ms, heap usage 612.157 MB -> 111.470 MB.\n====== finagle-http (web) [default], iteration 0 completed (17579.182 ms) ======\n====== finagle-http (web) [default], iteration 1 started ======\nGC before operation: completed in 132.580 ms, heap usage 293.599 MB -> 114.255 MB.\n====== finagle-http (web) [default], iteration 1 completed (7093.193 ms) ======\n====== finagle-http (web) [default], iteration 2 started ======\nGC before operation: completed in 139.872 ms, heap usage 142.229 MB -> 114.940 MB.\n====== finagle-http (web) [default], iteration 2 completed (3467.412 ms) ======\n====== finagle-http (web) [default], iteration 3 started ======\nGC before operation: completed in 102.621 ms, heap usage 139.149 MB -> 115.008 MB.\n====== finagle-http (web) [default], iteration 3 completed (2891.463 ms) ======\n====== finagle-http (web) [default], iteration 4 started ======\nGC before operation: completed in 101.518 ms, heap usage 138.053 MB -> 115.745 MB.\n====== finagle-http (web) [default], iteration 4 completed (3105.065 ms) ======\n====== finagle-http (web) [default], iteration 5 started ======\nGC before operation: completed in 107.976 ms, heap usage 136.110 MB -> 115.075 MB.\n====== finagle-http (web) [default], iteration 5 completed (2695.150 ms) ======\n====== finagle-http (web) [default], iteration 6 started ======\nGC before operation: completed in 112.486 ms, heap usage 136.249 MB -> 115.049 MB.\n====== finagle-http (web) [default], iteration 6 completed (2704.392 ms) ======\n====== finagle-http (web) [default], iteration 7 started ======\nGC before operation: completed in 114.377 ms, heap usage 135.245 MB -> 115.020 MB.\n====== finagle-http (web) [default], iteration 7 completed (2948.935 ms) ======\n====== finagle-http (web) [default], iteration 8 started ======\nGC before operation: completed in 122.053 ms, heap usage 135.666 MB -> 115.051 MB.\n====== finagle-http (web) [default], iteration 8 completed (2778.196 ms) ======\n====== finagle-http (web) [default], iteration 9 started ======\nGC before operation: completed in 109.678 ms, heap usage 136.088 MB -> 115.031 MB.\n====== finagle-http (web) [default], iteration 9 completed (2747.983 ms) ======\n====== finagle-http (web) [default], iteration 10 started ======\nGC before operation: completed in 99.536 ms, heap usage 135.498 MB -> 115.057 MB.\n====== finagle-http (web) [default], iteration 10 completed (2777.183 ms) ======\n====== finagle-http (web) [default], iteration 11 started ======\nGC before operation: completed in 100.476 ms, heap usage 134.090 MB -> 115.060 MB.\n====== finagle-http (web) [default], iteration 11 completed (2950.363 ms) ======\n====== finagle-http (web) [default], iteration 12 started ======\nGC before operation: completed in 101.952 ms, heap usage 134.523 MB -> 115.062 MB.\n====== finagle-http (web) [default], iteration 12 completed (2759.978 ms) ======\n====== finagle-http (web) [default], iteration 13 started ======\nGC before operation: completed in 109.865 ms, heap usage 135.138 MB -> 115.064 MB.\n====== finagle-http (web) [default], iteration 13 completed (2831.653 ms) ======\n====== finagle-http (web) [default], iteration 14 started ======\nGC before operation: completed in 105.948 ms, heap usage 134.532 MB -> 115.044 MB.\n====== finagle-http (web) [default], iteration 14 completed (2711.280 ms) ======\n====== reactors (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 105.850 ms, heap usage 151.704 MB -> 116.190 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 0 completed (17020.896 ms) ======\n====== reactors (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 104.599 ms, heap usage 181.251 MB -> 113.711 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 1 completed (13892.575 ms) ======\n====== reactors (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 95.102 ms, heap usage 174.198 MB -> 113.758 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 2 completed (12554.742 ms) ======\n====== reactors (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 116.893 ms, heap usage 619.954 MB -> 113.748 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 3 completed (13425.368 ms) ======\n====== reactors (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 116.460 ms, heap usage 633.733 MB -> 113.696 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 4 completed (12579.614 ms) ======\n====== reactors (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 101.795 ms, heap usage 678.695 MB -> 113.699 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 5 completed (13161.693 ms) ======\n====== reactors (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 172.615 ms, heap usage 622.470 MB -> 113.699 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 6 completed (12878.519 ms) ======\n====== reactors (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 112.228 ms, heap usage 718.171 MB -> 113.700 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 7 completed (12975.597 ms) ======\n====== reactors (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 98.762 ms, heap usage 716.077 MB -> 113.700 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 8 completed (12770.728 ms) ======\n====== reactors (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 102.126 ms, heap usage 748.105 MB -> 113.710 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 9 completed (13076.609 ms) ======\n====== reactors (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 98.649 ms, heap usage 687.606 MB -> 113.700 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 10 completed (13003.432 ms) ======\n====== reactors (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 101.379 ms, heap usage 732.195 MB -> 113.700 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 11 completed (14004.051 ms) ======\n====== reactors (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 105.159 ms, heap usage 627.924 MB -> 113.700 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 12 completed (13270.736 ms) ======\n====== reactors (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 108.063 ms, heap usage 752.521 MB -> 113.700 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 13 completed (13719.150 ms) ======\n====== reactors (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 122.216 ms, heap usage 634.683 MB -> 113.714 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 14 completed (13878.366 ms) ======\nNOTE: 'dec-tree' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== dec-tree (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 164.697 ms, heap usage 737.360 MB -> 126.493 MB.\n====== dec-tree (apache-spark) [default], iteration 0 completed (10211.732 ms) ======\n====== dec-tree (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 163.548 ms, heap usage 286.590 MB -> 158.107 MB.\n====== dec-tree (apache-spark) [default], iteration 1 completed (2450.505 ms) ======\n====== dec-tree (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 136.565 ms, heap usage 345.940 MB -> 158.492 MB.\n====== dec-tree (apache-spark) [default], iteration 2 completed (2009.743 ms) ======\n====== dec-tree (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 138.685 ms, heap usage 279.501 MB -> 158.716 MB.\n====== dec-tree (apache-spark) [default], iteration 3 completed (1989.605 ms) ======\n====== dec-tree (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 146.026 ms, heap usage 489.120 MB -> 158.915 MB.\n====== dec-tree (apache-spark) [default], iteration 4 completed (1714.918 ms) ======\n====== dec-tree (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 127.943 ms, heap usage 488.970 MB -> 159.140 MB.\n====== dec-tree (apache-spark) [default], iteration 5 completed (1705.237 ms) ======\n====== dec-tree (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 130.962 ms, heap usage 190.728 MB -> 158.870 MB.\n====== dec-tree (apache-spark) [default], iteration 6 completed (1675.410 ms) ======\n====== dec-tree (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 128.752 ms, heap usage 464.234 MB -> 159.494 MB.\n====== dec-tree (apache-spark) [default], iteration 7 completed (1687.319 ms) ======\n====== dec-tree (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 131.642 ms, heap usage 193.742 MB -> 159.062 MB.\n====== dec-tree (apache-spark) [default], iteration 8 completed (1553.852 ms) ======\n====== dec-tree (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 146.296 ms, heap usage 480.448 MB -> 168.014 MB.\n====== dec-tree (apache-spark) [default], iteration 9 completed (1516.748 ms) ======\n====== dec-tree (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 144.013 ms, heap usage 452.343 MB -> 159.895 MB.\n====== dec-tree (apache-spark) [default], iteration 10 completed (1582.871 ms) ======\n====== dec-tree (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 134.653 ms, heap usage 443.551 MB -> 160.089 MB.\n====== dec-tree (apache-spark) [default], iteration 11 completed (1470.741 ms) ======\n====== dec-tree (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 195.778 ms, heap usage 440.791 MB -> 160.224 MB.\n====== dec-tree (apache-spark) [default], iteration 12 completed (1455.447 ms) ======\n====== dec-tree (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 153.178 ms, heap usage 513.991 MB -> 160.372 MB.\n====== dec-tree (apache-spark) [default], iteration 13 completed (1444.480 ms) ======\n====== dec-tree (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 140.368 ms, heap usage 445.814 MB -> 160.435 MB.\n====== dec-tree (apache-spark) [default], iteration 14 completed (1470.615 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 0 started ======\nGC before operation: completed in 151.372 ms, heap usage 172.187 MB -> 143.483 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 534\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 53\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 9\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 7\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 10\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 8\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 16\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 4\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 11\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 22\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 4\tmaxttc = 534\tfailed = 0\ttotal = 4\nSHORT_TRAVERSAL:  successful = 6\tmaxttc = 16\tfailed = 0\ttotal = 6\nSHORT_TRAVERSAL_RO:  successful = 10\tmaxttc = 9\tfailed = 0\ttotal = 10\nOPERATION:  successful = 8\tmaxttc = 22\tfailed = 0\ttotal = 8\nOPERATION_RO:  successful = 12\tmaxttc = 11\tfailed = 0\ttotal = 12\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 59.88 op/s (59.88 op/s including failed)\nElapsed time: 0.67 s\n====== scala-stm-bench7 (scala) [default], iteration 0 completed (2511.480 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 1 started ======\nGC before operation: completed in 135.828 ms, heap usage 523.490 MB -> 142.053 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 470\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 13\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 8\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 14\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 9\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 8\tmaxttc = 534\tfailed = 0\ttotal = 8\nSHORT_TRAVERSAL:  successful = 12\tmaxttc = 16\tfailed = 0\ttotal = 12\nSHORT_TRAVERSAL_RO:  successful = 20\tmaxttc = 9\tfailed = 0\ttotal = 20\nOPERATION:  successful = 16\tmaxttc = 22\tfailed = 0\ttotal = 16\nOPERATION_RO:  successful = 24\tmaxttc = 14\tfailed = 0\ttotal = 24\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 155.64 op/s (155.64 op/s including failed)\nElapsed time: 0.51 s\n====== scala-stm-bench7 (scala) [default], iteration 1 completed (1783.062 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 2 started ======\nGC before operation: completed in 240.384 ms, heap usage 489.877 MB -> 142.054 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 517\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 11\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 8\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 12\tmaxttc = 534\tfailed = 0\ttotal = 12\nSHORT_TRAVERSAL:  successful = 18\tmaxttc = 16\tfailed = 0\ttotal = 18\nSHORT_TRAVERSAL_RO:  successful = 30\tmaxttc = 9\tfailed = 0\ttotal = 30\nOPERATION:  successful = 24\tmaxttc = 22\tfailed = 0\ttotal = 24\nOPERATION_RO:  successful = 36\tmaxttc = 14\tfailed = 0\ttotal = 36\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 220.59 op/s (220.59 op/s including failed)\nElapsed time: 0.54 s\n====== scala-stm-bench7 (scala) [default], iteration 2 completed (1408.246 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 3 started ======\nGC before operation: completed in 136.697 ms, heap usage 506.905 MB -> 142.050 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 496\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 7\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 4\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 16\tmaxttc = 534\tfailed = 0\ttotal = 16\nSHORT_TRAVERSAL:  successful = 24\tmaxttc = 16\tfailed = 0\ttotal = 24\nSHORT_TRAVERSAL_RO:  successful = 40\tmaxttc = 9\tfailed = 0\ttotal = 40\nOPERATION:  successful = 32\tmaxttc = 22\tfailed = 0\ttotal = 32\nOPERATION_RO:  successful = 48\tmaxttc = 14\tfailed = 0\ttotal = 48\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 310.08 op/s (310.08 op/s including failed)\nElapsed time: 0.52 s\n====== scala-stm-bench7 (scala) [default], iteration 3 completed (1342.530 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 4 started ======\nGC before operation: completed in 147.926 ms, heap usage 393.121 MB -> 142.060 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 384\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 7\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 4\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 20\tmaxttc = 534\tfailed = 0\ttotal = 20\nSHORT_TRAVERSAL:  successful = 30\tmaxttc = 16\tfailed = 0\ttotal = 30\nSHORT_TRAVERSAL_RO:  successful = 50\tmaxttc = 9\tfailed = 0\ttotal = 50\nOPERATION:  successful = 40\tmaxttc = 22\tfailed = 0\ttotal = 40\nOPERATION_RO:  successful = 60\tmaxttc = 14\tfailed = 0\ttotal = 60\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 506.33 op/s (506.33 op/s including failed)\nElapsed time: 0.40 s\n====== scala-stm-bench7 (scala) [default], iteration 4 completed (1272.510 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 5 started ======\nGC before operation: completed in 185.238 ms, heap usage 380.599 MB -> 142.044 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 518\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 11\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 6\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 24\tmaxttc = 534\tfailed = 0\ttotal = 24\nSHORT_TRAVERSAL:  successful = 36\tmaxttc = 16\tfailed = 0\ttotal = 36\nSHORT_TRAVERSAL_RO:  successful = 60\tmaxttc = 9\tfailed = 0\ttotal = 60\nOPERATION:  successful = 48\tmaxttc = 22\tfailed = 0\ttotal = 48\nOPERATION_RO:  successful = 72\tmaxttc = 14\tfailed = 0\ttotal = 72\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 441.99 op/s (441.99 op/s including failed)\nElapsed time: 0.54 s\n====== scala-stm-bench7 (scala) [default], iteration 5 completed (1480.501 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 6 started ======\nGC before operation: completed in 153.068 ms, heap usage 507.102 MB -> 142.056 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 463\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 11\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 8\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 8\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 28\tmaxttc = 534\tfailed = 0\ttotal = 28\nSHORT_TRAVERSAL:  successful = 42\tmaxttc = 16\tfailed = 0\ttotal = 42\nSHORT_TRAVERSAL_RO:  successful = 70\tmaxttc = 9\tfailed = 0\ttotal = 70\nOPERATION:  successful = 56\tmaxttc = 22\tfailed = 0\ttotal = 56\nOPERATION_RO:  successful = 84\tmaxttc = 14\tfailed = 0\ttotal = 84\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 577.32 op/s (577.32 op/s including failed)\nElapsed time: 0.49 s\n====== scala-stm-bench7 (scala) [default], iteration 6 completed (1372.866 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 7 started ======\nGC before operation: completed in 147.549 ms, heap usage 507.608 MB -> 142.061 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 483\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 9\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 32\tmaxttc = 534\tfailed = 0\ttotal = 32\nSHORT_TRAVERSAL:  successful = 48\tmaxttc = 16\tfailed = 0\ttotal = 48\nSHORT_TRAVERSAL_RO:  successful = 80\tmaxttc = 9\tfailed = 0\ttotal = 80\nOPERATION:  successful = 64\tmaxttc = 22\tfailed = 0\ttotal = 64\nOPERATION_RO:  successful = 96\tmaxttc = 14\tfailed = 0\ttotal = 96\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 642.57 op/s (642.57 op/s including failed)\nElapsed time: 0.50 s\n====== scala-stm-bench7 (scala) [default], iteration 7 completed (1368.893 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 8 started ======\nGC before operation: completed in 156.075 ms, heap usage 505.601 MB -> 142.044 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 492\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 10\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 4\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 36\tmaxttc = 534\tfailed = 0\ttotal = 36\nSHORT_TRAVERSAL:  successful = 54\tmaxttc = 16\tfailed = 0\ttotal = 54\nSHORT_TRAVERSAL_RO:  successful = 90\tmaxttc = 9\tfailed = 0\ttotal = 90\nOPERATION:  successful = 72\tmaxttc = 22\tfailed = 0\ttotal = 72\nOPERATION_RO:  successful = 108\tmaxttc = 14\tfailed = 0\ttotal = 108\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 705.88 op/s (705.88 op/s including failed)\nElapsed time: 0.51 s\n====== scala-stm-bench7 (scala) [default], iteration 8 completed (1469.754 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 9 started ======\nGC before operation: completed in 137.134 ms, heap usage 507.110 MB -> 142.056 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 474\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 10\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 4\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 40\tmaxttc = 534\tfailed = 0\ttotal = 40\nSHORT_TRAVERSAL:  successful = 60\tmaxttc = 16\tfailed = 0\ttotal = 60\nSHORT_TRAVERSAL_RO:  successful = 100\tmaxttc = 9\tfailed = 0\ttotal = 100\nOPERATION:  successful = 80\tmaxttc = 22\tfailed = 0\ttotal = 80\nOPERATION_RO:  successful = 120\tmaxttc = 14\tfailed = 0\ttotal = 120\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 818.00 op/s (818.00 op/s including failed)\nElapsed time: 0.49 s\n====== scala-stm-bench7 (scala) [default], iteration 9 completed (1497.723 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 10 started ======\nGC before operation: completed in 389.866 ms, heap usage 507.497 MB -> 295.408 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 340\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 11\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 44\tmaxttc = 534\tfailed = 0\ttotal = 44\nSHORT_TRAVERSAL:  successful = 66\tmaxttc = 16\tfailed = 0\ttotal = 66\nSHORT_TRAVERSAL_RO:  successful = 110\tmaxttc = 9\tfailed = 0\ttotal = 110\nOPERATION:  successful = 88\tmaxttc = 22\tfailed = 0\ttotal = 88\nOPERATION_RO:  successful = 132\tmaxttc = 14\tfailed = 0\ttotal = 132\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1229.05 op/s (1229.05 op/s including failed)\nElapsed time: 0.36 s\n====== scala-stm-bench7 (scala) [default], iteration 10 completed (1120.384 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 11 started ======\nGC before operation: completed in 140.313 ms, heap usage 400.744 MB -> 142.052 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 600\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 12\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 48\tmaxttc = 600\tfailed = 0\ttotal = 48\nSHORT_TRAVERSAL:  successful = 72\tmaxttc = 16\tfailed = 0\ttotal = 72\nSHORT_TRAVERSAL_RO:  successful = 120\tmaxttc = 9\tfailed = 0\ttotal = 120\nOPERATION:  successful = 96\tmaxttc = 22\tfailed = 0\ttotal = 96\nOPERATION_RO:  successful = 144\tmaxttc = 14\tfailed = 0\ttotal = 144\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 770.47 op/s (770.47 op/s including failed)\nElapsed time: 0.62 s\n====== scala-stm-bench7 (scala) [default], iteration 11 completed (1498.094 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 12 started ======\nGC before operation: completed in 158.043 ms, heap usage 507.099 MB -> 142.057 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 429\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 6\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 52\tmaxttc = 600\tfailed = 0\ttotal = 52\nSHORT_TRAVERSAL:  successful = 78\tmaxttc = 16\tfailed = 0\ttotal = 78\nSHORT_TRAVERSAL_RO:  successful = 130\tmaxttc = 9\tfailed = 0\ttotal = 130\nOPERATION:  successful = 104\tmaxttc = 22\tfailed = 0\ttotal = 104\nOPERATION_RO:  successful = 156\tmaxttc = 14\tfailed = 0\ttotal = 156\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1184.51 op/s (1184.51 op/s including failed)\nElapsed time: 0.44 s\n====== scala-stm-bench7 (scala) [default], iteration 12 completed (1301.468 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 13 started ======\nGC before operation: completed in 157.214 ms, heap usage 430.109 MB -> 142.044 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 441\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 8\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 7\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 56\tmaxttc = 600\tfailed = 0\ttotal = 56\nSHORT_TRAVERSAL:  successful = 84\tmaxttc = 16\tfailed = 0\ttotal = 84\nSHORT_TRAVERSAL_RO:  successful = 140\tmaxttc = 9\tfailed = 0\ttotal = 140\nOPERATION:  successful = 112\tmaxttc = 22\tfailed = 0\ttotal = 112\nOPERATION_RO:  successful = 168\tmaxttc = 14\tfailed = 0\ttotal = 168\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1244.44 op/s (1244.44 op/s including failed)\nElapsed time: 0.45 s\n====== scala-stm-bench7 (scala) [default], iteration 13 completed (1351.470 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 14 started ======\nGC before operation: completed in 141.475 ms, heap usage 507.530 MB -> 142.049 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 482\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 10\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 60\tmaxttc = 600\tfailed = 0\ttotal = 60\nSHORT_TRAVERSAL:  successful = 90\tmaxttc = 16\tfailed = 0\ttotal = 90\nSHORT_TRAVERSAL_RO:  successful = 150\tmaxttc = 9\tfailed = 0\ttotal = 150\nOPERATION:  successful = 120\tmaxttc = 22\tfailed = 0\ttotal = 120\nOPERATION_RO:  successful = 180\tmaxttc = 14\tfailed = 0\ttotal = 180\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1204.82 op/s (1204.82 op/s including failed)\nElapsed time: 0.50 s\n====== scala-stm-bench7 (scala) [default], iteration 14 completed (1439.994 ms) ======\nNOTE: 'naive-bayes' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== naive-bayes (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 157.559 ms, heap usage 173.043 MB -> 152.727 MB.\n====== naive-bayes (apache-spark) [default], iteration 0 completed (40505.768 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 203.021 ms, heap usage 442.679 MB -> 428.812 MB.\n====== naive-bayes (apache-spark) [default], iteration 1 completed (23313.942 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 184.892 ms, heap usage 455.964 MB -> 429.040 MB.\n====== naive-bayes (apache-spark) [default], iteration 2 completed (22137.040 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 207.126 ms, heap usage 447.901 MB -> 429.105 MB.\n====== naive-bayes (apache-spark) [default], iteration 3 completed (22166.338 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 178.331 ms, heap usage 447.914 MB -> 429.201 MB.\n====== naive-bayes (apache-spark) [default], iteration 4 completed (22021.017 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 188.053 ms, heap usage 531.524 MB -> 429.272 MB.\n====== naive-bayes (apache-spark) [default], iteration 5 completed (21499.434 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 198.890 ms, heap usage 499.768 MB -> 429.344 MB.\n====== naive-bayes (apache-spark) [default], iteration 6 completed (21187.520 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 175.395 ms, heap usage 531.319 MB -> 429.410 MB.\n====== naive-bayes (apache-spark) [default], iteration 7 completed (22419.763 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 282.874 ms, heap usage 492.795 MB -> 429.532 MB.\n====== naive-bayes (apache-spark) [default], iteration 8 completed (21701.999 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 167.999 ms, heap usage 455.434 MB -> 427.583 MB.\n====== naive-bayes (apache-spark) [default], iteration 9 completed (20956.195 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 211.706 ms, heap usage 813.593 MB -> 421.269 MB.\n====== naive-bayes (apache-spark) [default], iteration 10 completed (21463.384 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 165.327 ms, heap usage 542.556 MB -> 422.040 MB.\n====== naive-bayes (apache-spark) [default], iteration 11 completed (20713.293 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 156.444 ms, heap usage 742.313 MB -> 422.032 MB.\n====== naive-bayes (apache-spark) [default], iteration 12 completed (20682.267 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 143.812 ms, heap usage 741.763 MB -> 422.119 MB.\n====== naive-bayes (apache-spark) [default], iteration 13 completed (21341.442 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 154.760 ms, heap usage 448.917 MB -> 422.205 MB.\n====== naive-bayes (apache-spark) [default], iteration 14 completed (21277.786 ms) ======\nNOTE: 'als' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== als (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 170.517 ms, heap usage 342.184 MB -> 167.715 MB.\n====== als (apache-spark) [default], iteration 0 completed (17245.293 ms) ======\n====== als (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 206.106 ms, heap usage 381.163 MB -> 192.447 MB.\n====== als (apache-spark) [default], iteration 1 completed (8374.551 ms) ======\n====== als (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 203.403 ms, heap usage 692.875 MB -> 193.732 MB.\n====== als (apache-spark) [default], iteration 2 completed (7613.825 ms) ======\n====== als (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 197.033 ms, heap usage 770.490 MB -> 194.322 MB.\n====== als (apache-spark) [default], iteration 3 completed (7498.159 ms) ======\n====== als (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 222.854 ms, heap usage 724.610 MB -> 194.842 MB.\n====== als (apache-spark) [default], iteration 4 completed (7222.046 ms) ======\n====== als (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 199.073 ms, heap usage 630.683 MB -> 195.312 MB.\n====== als (apache-spark) [default], iteration 5 completed (6777.255 ms) ======\n====== als (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 196.178 ms, heap usage 670.045 MB -> 195.920 MB.\n====== als (apache-spark) [default], iteration 6 completed (6716.076 ms) ======\n====== als (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 196.405 ms, heap usage 703.914 MB -> 196.465 MB.\n====== als (apache-spark) [default], iteration 7 completed (6706.499 ms) ======\n====== als (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 200.429 ms, heap usage 690.188 MB -> 197.117 MB.\n====== als (apache-spark) [default], iteration 8 completed (6692.376 ms) ======\n====== als (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 206.096 ms, heap usage 703.429 MB -> 197.402 MB.\n====== als (apache-spark) [default], iteration 9 completed (6829.927 ms) ======\n====== als (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 210.566 ms, heap usage 722.096 MB -> 197.832 MB.\n====== als (apache-spark) [default], iteration 10 completed (6464.726 ms) ======\n====== als (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 207.892 ms, heap usage 691.523 MB -> 197.993 MB.\n====== als (apache-spark) [default], iteration 11 completed (6570.330 ms) ======\n====== als (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 235.043 ms, heap usage 728.923 MB -> 198.219 MB.\n====== als (apache-spark) [default], iteration 12 completed (6550.026 ms) ======\n====== als (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 204.262 ms, heap usage 672.212 MB -> 198.515 MB.\n====== als (apache-spark) [default], iteration 13 completed (6596.781 ms) ======\n====== als (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 202.815 ms, heap usage 743.348 MB -> 198.767 MB.\n====== als (apache-spark) [default], iteration 14 completed (6349.995 ms) ======\n====== par-mnemonics (functional) [default], iteration 0 started ======\nGC before operation: completed in 300.165 ms, heap usage 696.077 MB -> 179.147 MB.\n====== par-mnemonics (functional) [default], iteration 0 completed (4479.313 ms) ======\n====== par-mnemonics (functional) [default], iteration 1 started ======\nGC before operation: completed in 193.254 ms, heap usage 336.437 MB -> 179.107 MB.\n====== par-mnemonics (functional) [default], iteration 1 completed (4119.000 ms) ======\n====== par-mnemonics (functional) [default], iteration 2 started ======\nGC before operation: completed in 192.306 ms, heap usage 405.576 MB -> 179.104 MB.\n====== par-mnemonics (functional) [default], iteration 2 completed (4258.146 ms) ======\n====== par-mnemonics (functional) [default], iteration 3 started ======\nGC before operation: completed in 193.004 ms, heap usage 324.174 MB -> 179.108 MB.\n====== par-mnemonics (functional) [default], iteration 3 completed (4452.797 ms) ======\n====== par-mnemonics (functional) [default], iteration 4 started ======\nGC before operation: completed in 177.712 ms, heap usage 419.693 MB -> 179.105 MB.\n====== par-mnemonics (functional) [default], iteration 4 completed (3933.250 ms) ======\n====== par-mnemonics (functional) [default], iteration 5 started ======\nGC before operation: completed in 186.258 ms, heap usage 324.982 MB -> 179.105 MB.\n====== par-mnemonics (functional) [default], iteration 5 completed (4007.080 ms) ======\n====== par-mnemonics (functional) [default], iteration 6 started ======\nGC before operation: completed in 190.779 ms, heap usage 309.104 MB -> 179.121 MB.\n====== par-mnemonics (functional) [default], iteration 6 completed (3953.148 ms) ======\n====== par-mnemonics (functional) [default], iteration 7 started ======\nGC before operation: completed in 204.409 ms, heap usage 312.674 MB -> 179.116 MB.\n====== par-mnemonics (functional) [default], iteration 7 completed (4068.803 ms) ======\n====== par-mnemonics (functional) [default], iteration 8 started ======\nGC before operation: completed in 187.505 ms, heap usage 315.067 MB -> 179.106 MB.\n====== par-mnemonics (functional) [default], iteration 8 completed (3881.191 ms) ======\n====== par-mnemonics (functional) [default], iteration 9 started ======\nGC before operation: completed in 178.405 ms, heap usage 312.898 MB -> 179.106 MB.\n====== par-mnemonics (functional) [default], iteration 9 completed (4171.076 ms) ======\n====== par-mnemonics (functional) [default], iteration 10 started ======\nGC before operation: completed in 188.686 ms, heap usage 312.174 MB -> 179.106 MB.\n====== par-mnemonics (functional) [default], iteration 10 completed (3953.921 ms) ======\n====== par-mnemonics (functional) [default], iteration 11 started ======\nGC before operation: completed in 191.991 ms, heap usage 319.854 MB -> 179.106 MB.\n====== par-mnemonics (functional) [default], iteration 11 completed (4020.731 ms) ======\n====== par-mnemonics (functional) [default], iteration 12 started ======\nGC before operation: completed in 194.977 ms, heap usage 313.371 MB -> 179.106 MB.\n====== par-mnemonics (functional) [default], iteration 12 completed (4155.199 ms) ======\n====== par-mnemonics (functional) [default], iteration 13 started ======\nGC before operation: completed in 186.738 ms, heap usage 349.674 MB -> 179.103 MB.\n====== par-mnemonics (functional) [default], iteration 13 completed (4420.589 ms) ======\n====== par-mnemonics (functional) [default], iteration 14 started ======\nGC before operation: completed in 189.534 ms, heap usage 309.674 MB -> 179.103 MB.\n====== par-mnemonics (functional) [default], iteration 14 completed (3653.633 ms) ======\n====== scala-kmeans (scala) [default], iteration 0 started ======\nGC before operation: completed in 259.501 ms, heap usage 343.603 MB -> 201.421 MB.\n====== scala-kmeans (scala) [default], iteration 0 completed (339.766 ms) ======\n====== scala-kmeans (scala) [default], iteration 1 started ======\nGC before operation: completed in 202.460 ms, heap usage 256.921 MB -> 201.453 MB.\n====== scala-kmeans (scala) [default], iteration 1 completed (226.462 ms) ======\n====== scala-kmeans (scala) [default], iteration 2 started ======\nGC before operation: completed in 202.113 ms, heap usage 323.453 MB -> 201.453 MB.\n====== scala-kmeans (scala) [default], iteration 2 completed (224.094 ms) ======\n====== scala-kmeans (scala) [default], iteration 3 started ======\nGC before operation: completed in 183.749 ms, heap usage 322.953 MB -> 201.453 MB.\n====== scala-kmeans (scala) [default], iteration 3 completed (222.411 ms) ======\n====== scala-kmeans (scala) [default], iteration 4 started ======\nGC before operation: completed in 202.302 ms, heap usage 322.953 MB -> 201.453 MB.\n====== scala-kmeans (scala) [default], iteration 4 completed (223.270 ms) ======\n====== scala-kmeans (scala) [default], iteration 5 started ======\nGC before operation: completed in 202.640 ms, heap usage 322.953 MB -> 201.455 MB.\n====== scala-kmeans (scala) [default], iteration 5 completed (224.528 ms) ======\n====== scala-kmeans (scala) [default], iteration 6 started ======\nGC before operation: completed in 188.615 ms, heap usage 322.953 MB -> 201.453 MB.\n====== scala-kmeans (scala) [default], iteration 6 completed (231.478 ms) ======\n====== scala-kmeans (scala) [default], iteration 7 started ======\nGC before operation: completed in 206.202 ms, heap usage 322.953 MB -> 201.472 MB.\n====== scala-kmeans (scala) [default], iteration 7 completed (229.890 ms) ======\n====== scala-kmeans (scala) [default], iteration 8 started ======\nGC before operation: completed in 201.694 ms, heap usage 322.954 MB -> 201.454 MB.\n====== scala-kmeans (scala) [default], iteration 8 completed (259.279 ms) ======\n====== scala-kmeans (scala) [default], iteration 9 started ======\nGC before operation: completed in 185.242 ms, heap usage 332.551 MB -> 201.483 MB.\n====== scala-kmeans (scala) [default], iteration 9 completed (235.502 ms) ======\n====== scala-kmeans (scala) [default], iteration 10 started ======\nGC before operation: completed in 205.981 ms, heap usage 323.461 MB -> 201.461 MB.\n====== scala-kmeans (scala) [default], iteration 10 completed (235.422 ms) ======\n====== scala-kmeans (scala) [default], iteration 11 started ======\nGC before operation: completed in 205.946 ms, heap usage 322.961 MB -> 201.489 MB.\n====== scala-kmeans (scala) [default], iteration 11 completed (339.977 ms) ======\n====== scala-kmeans (scala) [default], iteration 12 started ======\nGC before operation: completed in 200.922 ms, heap usage 330.961 MB -> 201.462 MB.\n====== scala-kmeans (scala) [default], iteration 12 completed (222.818 ms) ======\n====== scala-kmeans (scala) [default], iteration 13 started ======\nGC before operation: completed in 192.781 ms, heap usage 322.962 MB -> 201.463 MB.\n====== scala-kmeans (scala) [default], iteration 13 completed (220.477 ms) ======\n====== scala-kmeans (scala) [default], iteration 14 started ======\nGC before operation: completed in 202.779 ms, heap usage 322.963 MB -> 201.463 MB.\n====== scala-kmeans (scala) [default], iteration 14 completed (222.039 ms) ======\n====== philosophers (scala) [default], iteration 0 started ======\nGC before operation: completed in 241.597 ms, heap usage 324.963 MB -> 180.463 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 0 completed (1409.944 ms) ======\n====== philosophers (scala) [default], iteration 1 started ======\nGC before operation: completed in 243.462 ms, heap usage 184.232 MB -> 180.383 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 1 completed (604.601 ms) ======\n====== philosophers (scala) [default], iteration 2 started ======\nGC before operation: completed in 192.650 ms, heap usage 525.881 MB -> 180.384 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 2 completed (741.321 ms) ======\n====== philosophers (scala) [default], iteration 3 started ======\nGC before operation: completed in 181.298 ms, heap usage 189.882 MB -> 180.385 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 3 completed (757.745 ms) ======\n====== philosophers (scala) [default], iteration 4 started ======\nGC before operation: completed in 201.106 ms, heap usage 194.464 MB -> 180.382 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 4 completed (659.879 ms) ======\n====== philosophers (scala) [default], iteration 5 started ======\nGC before operation: completed in 199.590 ms, heap usage 538.382 MB -> 180.402 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 5 completed (761.913 ms) ======\n====== philosophers (scala) [default], iteration 6 started ======\nGC before operation: completed in 180.230 ms, heap usage 206.336 MB -> 180.407 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 6 completed (582.194 ms) ======\n====== philosophers (scala) [default], iteration 7 started ======\nGC before operation: completed in 181.803 ms, heap usage 539.882 MB -> 180.387 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 7 completed (719.670 ms) ======\n====== philosophers (scala) [default], iteration 8 started ======\nGC before operation: completed in 205.901 ms, heap usage 205.086 MB -> 180.392 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 8 completed (711.867 ms) ======\n====== philosophers (scala) [default], iteration 9 started ======\nGC before operation: completed in 181.841 ms, heap usage 201.039 MB -> 180.385 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 9 completed (668.165 ms) ======\n====== philosophers (scala) [default], iteration 10 started ======\nGC before operation: completed in 199.598 ms, heap usage 194.511 MB -> 180.385 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 10 completed (566.751 ms) ======\n====== philosophers (scala) [default], iteration 11 started ======\nGC before operation: completed in 283.702 ms, heap usage 541.882 MB -> 180.382 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 11 completed (656.239 ms) ======\n====== philosophers (scala) [default], iteration 12 started ======\nGC before operation: completed in 177.024 ms, heap usage 193.987 MB -> 180.397 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 12 completed (612.935 ms) ======\n====== philosophers (scala) [default], iteration 13 started ======\nGC before operation: completed in 187.202 ms, heap usage 182.739 MB -> 180.398 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 13 completed (607.424 ms) ======\n====== philosophers (scala) [default], iteration 14 started ======\nGC before operation: completed in 194.918 ms, heap usage 191.477 MB -> 180.385 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 14 completed (767.034 ms) ======\nNOTE: 'log-regression' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== log-regression (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 200.091 ms, heap usage 269.882 MB -> 192.522 MB.\n====== log-regression (apache-spark) [default], iteration 0 completed (10200.692 ms) ======\n====== log-regression (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 265.987 ms, heap usage 685.270 MB -> 272.962 MB.\n====== log-regression (apache-spark) [default], iteration 1 completed (2383.667 ms) ======\n====== log-regression (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 191.716 ms, heap usage 723.618 MB -> 273.054 MB.\n====== log-regression (apache-spark) [default], iteration 2 completed (1814.105 ms) ======\n====== log-regression (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 214.202 ms, heap usage 803.623 MB -> 273.940 MB.\n====== log-regression (apache-spark) [default], iteration 3 completed (1769.557 ms) ======\n====== log-regression (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 295.871 ms, heap usage 736.077 MB -> 273.784 MB.\n====== log-regression (apache-spark) [default], iteration 4 completed (1748.066 ms) ======\n====== log-regression (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 252.860 ms, heap usage 796.034 MB -> 274.567 MB.\n====== log-regression (apache-spark) [default], iteration 5 completed (1730.830 ms) ======\n====== log-regression (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 193.306 ms, heap usage 772.790 MB -> 274.731 MB.\n====== log-regression (apache-spark) [default], iteration 6 completed (1570.874 ms) ======\n====== log-regression (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 196.220 ms, heap usage 745.435 MB -> 274.773 MB.\n====== log-regression (apache-spark) [default], iteration 7 completed (1425.369 ms) ======\n====== log-regression (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 213.785 ms, heap usage 790.879 MB -> 275.216 MB.\n====== log-regression (apache-spark) [default], iteration 8 completed (1372.563 ms) ======\n====== log-regression (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 203.644 ms, heap usage 775.698 MB -> 275.341 MB.\n====== log-regression (apache-spark) [default], iteration 9 completed (1356.486 ms) ======\n====== log-regression (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 208.058 ms, heap usage 789.384 MB -> 275.613 MB.\n====== log-regression (apache-spark) [default], iteration 10 completed (1377.665 ms) ======\n====== log-regression (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 215.160 ms, heap usage 769.988 MB -> 275.721 MB.\n====== log-regression (apache-spark) [default], iteration 11 completed (1441.676 ms) ======\n====== log-regression (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 207.060 ms, heap usage 779.839 MB -> 275.885 MB.\n====== log-regression (apache-spark) [default], iteration 12 completed (1344.311 ms) ======\n====== log-regression (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 210.402 ms, heap usage 768.518 MB -> 276.105 MB.\n====== log-regression (apache-spark) [default], iteration 13 completed (1502.652 ms) ======\n====== log-regression (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 202.788 ms, heap usage 765.290 MB -> 276.190 MB.\n====== log-regression (apache-spark) [default], iteration 14 completed (1510.368 ms) ======\nNOTE: 'gauss-mix' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== gauss-mix (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 221.071 ms, heap usage 621.403 MB -> 212.611 MB.\nAccuracy (validation) = 0.97667 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99333 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.91556 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99444 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 0 completed (32765.783 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 226.149 ms, heap usage 448.175 MB -> 218.989 MB.\nAccuracy (validation) = 0.97667 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99333 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.91556 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99444 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 1 completed (28169.443 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 233.916 ms, heap usage 284.299 MB -> 220.290 MB.\nAccuracy (validation) = 0.97667 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99333 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.91556 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99444 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 2 completed (26149.767 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 236.760 ms, heap usage 516.075 MB -> 221.871 MB.\nAccuracy (validation) = 0.97667 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99333 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.91556 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99444 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 3 completed (26250.307 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 230.692 ms, heap usage 313.653 MB -> 222.589 MB.\nAccuracy (validation) = 0.97667 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99333 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.91556 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99444 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 4 completed (24299.630 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 239.420 ms, heap usage 604.554 MB -> 222.932 MB.\nAccuracy (validation) = 0.97667 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99333 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.91556 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99444 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 5 completed (23670.122 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 229.737 ms, heap usage 527.090 MB -> 222.918 MB.\nAccuracy (validation) = 0.97667 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99333 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.91556 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99444 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 6 completed (19763.832 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 236.395 ms, heap usage 270.964 MB -> 222.478 MB.\nAccuracy (validation) = 0.97667 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99333 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.91556 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99444 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 7 completed (20519.230 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 235.480 ms, heap usage 392.699 MB -> 223.046 MB.\nAccuracy (validation) = 0.97667 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99333 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.91556 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99444 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 8 completed (19780.493 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 228.126 ms, heap usage 389.397 MB -> 222.753 MB.\nAccuracy (validation) = 0.97667 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99333 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.91556 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99444 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 9 completed (18838.189 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 232.057 ms, heap usage 268.377 MB -> 222.483 MB.\nAccuracy (validation) = 0.97667 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99333 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.91556 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99444 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 10 completed (25146.781 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 233.811 ms, heap usage 385.081 MB -> 222.924 MB.\nAccuracy (validation) = 0.97667 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99333 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.91556 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99444 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 11 completed (18846.665 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 233.190 ms, heap usage 268.234 MB -> 222.584 MB.\nAccuracy (validation) = 0.97667 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99333 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.91556 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99444 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 12 completed (22796.260 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 236.535 ms, heap usage 508.599 MB -> 222.697 MB.\nAccuracy (validation) = 0.97667 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99333 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.91556 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99444 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 13 completed (23208.565 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 240.926 ms, heap usage 257.352 MB -> 222.936 MB.\nAccuracy (validation) = 0.97667 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99333 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.91556 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99444 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 14 completed (19702.003 ms) ======\n====== mnemonics (functional) [default], iteration 0 started ======\nGC before operation: completed in 229.763 ms, heap usage 653.024 MB -> 215.285 MB.\n====== mnemonics (functional) [default], iteration 0 completed (4912.060 ms) ======\n====== mnemonics (functional) [default], iteration 1 started ======\nGC before operation: completed in 286.926 ms, heap usage 348.525 MB -> 212.374 MB.\n====== mnemonics (functional) [default], iteration 1 completed (4853.674 ms) ======\n====== mnemonics (functional) [default], iteration 2 started ======\nGC before operation: completed in 316.487 ms, heap usage 344.719 MB -> 212.375 MB.\n====== mnemonics (functional) [default], iteration 2 completed (4807.340 ms) ======\n====== mnemonics (functional) [default], iteration 3 started ======\nGC before operation: completed in 331.319 ms, heap usage 341.922 MB -> 212.388 MB.\n====== mnemonics (functional) [default], iteration 3 completed (4704.409 ms) ======\n====== mnemonics (functional) [default], iteration 4 started ======\nGC before operation: completed in 221.717 ms, heap usage 347.402 MB -> 212.385 MB.\n====== mnemonics (functional) [default], iteration 4 completed (4781.430 ms) ======\n====== mnemonics (functional) [default], iteration 5 started ======\nGC before operation: completed in 222.118 ms, heap usage 347.419 MB -> 211.812 MB.\n====== mnemonics (functional) [default], iteration 5 completed (4843.976 ms) ======\n====== mnemonics (functional) [default], iteration 6 started ======\nGC before operation: completed in 238.758 ms, heap usage 346.861 MB -> 211.848 MB.\n====== mnemonics (functional) [default], iteration 6 completed (4627.921 ms) ======\n====== mnemonics (functional) [default], iteration 7 started ======\nGC before operation: completed in 223.531 ms, heap usage 352.166 MB -> 211.830 MB.\n====== mnemonics (functional) [default], iteration 7 completed (4931.177 ms) ======\n====== mnemonics (functional) [default], iteration 8 started ======\nGC before operation: completed in 221.471 ms, heap usage 343.152 MB -> 211.835 MB.\n====== mnemonics (functional) [default], iteration 8 completed (4695.904 ms) ======\n====== mnemonics (functional) [default], iteration 9 started ======\nGC before operation: completed in 227.286 ms, heap usage 341.151 MB -> 211.833 MB.\n====== mnemonics (functional) [default], iteration 9 completed (4799.330 ms) ======\n====== mnemonics (functional) [default], iteration 10 started ======\nGC before operation: completed in 224.047 ms, heap usage 341.152 MB -> 211.833 MB.\n====== mnemonics (functional) [default], iteration 10 completed (4837.347 ms) ======\n====== mnemonics (functional) [default], iteration 11 started ======\nGC before operation: completed in 280.233 ms, heap usage 346.852 MB -> 211.833 MB.\n====== mnemonics (functional) [default], iteration 11 completed (4418.383 ms) ======\n====== mnemonics (functional) [default], iteration 12 started ======\nGC before operation: completed in 285.743 ms, heap usage 352.830 MB -> 210.688 MB.\n====== mnemonics (functional) [default], iteration 12 completed (4509.635 ms) ======\n====== mnemonics (functional) [default], iteration 13 started ======\nGC before operation: completed in 219.793 ms, heap usage 343.185 MB -> 210.702 MB.\n====== mnemonics (functional) [default], iteration 13 completed (4488.064 ms) ======\n====== mnemonics (functional) [default], iteration 14 started ======\nGC before operation: completed in 216.426 ms, heap usage 346.687 MB -> 210.689 MB.\n====== mnemonics (functional) [default], iteration 14 completed (4923.621 ms) ======\n====== dotty (scala) [default], iteration 0 started ======\nGC before operation: completed in 286.379 ms, heap usage 276.208 MB -> 213.304 MB.\n====== dotty (scala) [default], iteration 0 completed (14766.819 ms) ======\n====== dotty (scala) [default], iteration 1 started ======\nGC before operation: completed in 294.853 ms, heap usage 414.950 MB -> 229.993 MB.\n====== dotty (scala) [default], iteration 1 completed (5840.501 ms) ======\n====== dotty (scala) [default], iteration 2 started ======\nGC before operation: completed in 252.291 ms, heap usage 462.012 MB -> 229.984 MB.\n====== dotty (scala) [default], iteration 2 completed (4644.727 ms) ======\n====== dotty (scala) [default], iteration 3 started ======\nGC before operation: completed in 227.863 ms, heap usage 457.992 MB -> 229.999 MB.\n====== dotty (scala) [default], iteration 3 completed (4007.941 ms) ======\n====== dotty (scala) [default], iteration 4 started ======\nGC before operation: completed in 264.608 ms, heap usage 456.131 MB -> 230.003 MB.\n====== dotty (scala) [default], iteration 4 completed (3383.523 ms) ======\n====== dotty (scala) [default], iteration 5 started ======\nGC before operation: completed in 236.122 ms, heap usage 453.475 MB -> 230.005 MB.\n====== dotty (scala) [default], iteration 5 completed (3202.383 ms) ======\n====== dotty (scala) [default], iteration 6 started ======\nGC before operation: completed in 230.257 ms, heap usage 451.931 MB -> 230.013 MB.\n====== dotty (scala) [default], iteration 6 completed (3029.147 ms) ======\n====== dotty (scala) [default], iteration 7 started ======\nGC before operation: completed in 230.335 ms, heap usage 450.916 MB -> 230.036 MB.\n====== dotty (scala) [default], iteration 7 completed (2713.005 ms) ======\n====== dotty (scala) [default], iteration 8 started ======\nGC before operation: completed in 226.930 ms, heap usage 448.925 MB -> 230.032 MB.\n====== dotty (scala) [default], iteration 8 completed (2638.156 ms) ======\n====== dotty (scala) [default], iteration 9 started ======\nGC before operation: completed in 228.881 ms, heap usage 447.406 MB -> 230.053 MB.\n====== dotty (scala) [default], iteration 9 completed (2463.251 ms) ======\n====== dotty (scala) [default], iteration 10 started ======\nGC before operation: completed in 224.978 ms, heap usage 446.940 MB -> 230.041 MB.\n====== dotty (scala) [default], iteration 10 completed (2168.038 ms) ======\n====== dotty (scala) [default], iteration 11 started ======\nGC before operation: completed in 223.008 ms, heap usage 445.454 MB -> 230.049 MB.\n====== dotty (scala) [default], iteration 11 completed (2378.848 ms) ======\n====== dotty (scala) [default], iteration 12 started ======\nGC before operation: completed in 230.142 ms, heap usage 444.459 MB -> 230.049 MB.\n====== dotty (scala) [default], iteration 12 completed (2306.044 ms) ======\n====== dotty (scala) [default], iteration 13 started ======\nGC before operation: completed in 235.493 ms, heap usage 443.428 MB -> 230.079 MB.\n====== dotty (scala) [default], iteration 13 completed (1985.266 ms) ======\n====== dotty (scala) [default], iteration 14 started ======\nGC before operation: completed in 209.238 ms, heap usage 442.963 MB -> 230.084 MB.\n====== dotty (scala) [default], iteration 14 completed (1897.143 ms) ======\n"
    },
    "finagle-chirper": {
        "times": [
            13405.769,
            6569.004,
            3658.695,
            3373.727,
            3326.246,
            3134.24,
            3217.832,
            3264.395,
            2910.089,
            2937.345,
            2883.745,
            2928.275,
            2989.815,
            2999.979,
            2938.448
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 111.440 ms, heap usage 193.716 MB -> 76.034 MB.\n====== scrabble (functional) [default], iteration 0 completed (1746.818 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 75.425 ms, heap usage 124.295 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 1 completed (822.799 ms) ======\n====== scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 103.806 ms, heap usage 309.363 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 2 completed (876.688 ms) ======\n====== scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 108.057 ms, heap usage 131.528 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 3 completed (772.422 ms) ======\n====== scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 90.330 ms, heap usage 339.197 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 4 completed (664.922 ms) ======\n====== scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 78.633 ms, heap usage 242.581 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 5 completed (767.926 ms) ======\n====== scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 80.529 ms, heap usage 243.067 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 6 completed (771.953 ms) ======\n====== scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 87.821 ms, heap usage 169.966 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 7 completed (713.175 ms) ======\n====== scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 85.627 ms, heap usage 126.363 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 8 completed (705.321 ms) ======\n====== scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 77.713 ms, heap usage 279.273 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 9 completed (595.178 ms) ======\n====== scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 90.853 ms, heap usage 197.665 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 10 completed (653.981 ms) ======\n====== scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 80.787 ms, heap usage 125.936 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 11 completed (671.613 ms) ======\n====== scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 81.092 ms, heap usage 326.788 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 12 completed (614.500 ms) ======\n====== scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 74.421 ms, heap usage 199.244 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 13 completed (687.061 ms) ======\n====== scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 77.486 ms, heap usage 357.036 MB -> 76.113 MB.\n====== scrabble (functional) [default], iteration 14 completed (698.120 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 39.864 ms, heap usage 626.576 MB -> 29.596 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (20832.995 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 151.296 ms, heap usage 587.802 MB -> 148.935 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (10726.986 ms) ======\n====== page-rank (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 139.528 ms, heap usage 662.229 MB -> 149.044 MB.\n====== page-rank (apache-spark) [default], iteration 2 completed (10497.012 ms) ======\n====== page-rank (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 145.301 ms, heap usage 620.847 MB -> 149.161 MB.\n====== page-rank (apache-spark) [default], iteration 3 completed (10683.078 ms) ======\n====== page-rank (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 146.272 ms, heap usage 595.956 MB -> 149.275 MB.\n====== page-rank (apache-spark) [default], iteration 4 completed (11158.857 ms) ======\n====== page-rank (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 150.477 ms, heap usage 624.956 MB -> 149.389 MB.\n====== page-rank (apache-spark) [default], iteration 5 completed (10816.748 ms) ======\n====== page-rank (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 152.563 ms, heap usage 475.956 MB -> 149.705 MB.\n====== page-rank (apache-spark) [default], iteration 6 completed (10797.777 ms) ======\n====== page-rank (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 153.431 ms, heap usage 575.956 MB -> 149.630 MB.\n====== page-rank (apache-spark) [default], iteration 7 completed (10320.855 ms) ======\n====== page-rank (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 154.161 ms, heap usage 494.956 MB -> 149.734 MB.\n====== page-rank (apache-spark) [default], iteration 8 completed (10797.875 ms) ======\n====== page-rank (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 159.810 ms, heap usage 685.884 MB -> 149.850 MB.\n====== page-rank (apache-spark) [default], iteration 9 completed (10426.551 ms) ======\n====== page-rank (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 138.119 ms, heap usage 483.136 MB -> 149.929 MB.\n====== page-rank (apache-spark) [default], iteration 10 completed (11319.287 ms) ======\n====== page-rank (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 160.571 ms, heap usage 417.218 MB -> 150.048 MB.\n====== page-rank (apache-spark) [default], iteration 11 completed (10773.541 ms) ======\n====== page-rank (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 153.774 ms, heap usage 591.956 MB -> 150.197 MB.\n====== page-rank (apache-spark) [default], iteration 12 completed (10583.141 ms) ======\n====== page-rank (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 151.297 ms, heap usage 385.309 MB -> 150.212 MB.\n====== page-rank (apache-spark) [default], iteration 13 completed (11225.389 ms) ======\n====== page-rank (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 138.750 ms, heap usage 506.956 MB -> 150.287 MB.\n====== page-rank (apache-spark) [default], iteration 14 completed (11253.752 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 60.640 ms, heap usage 661.207 MB -> 32.216 MB.\n====== future-genetic (functional) [default], iteration 0 completed (14742.129 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 51.821 ms, heap usage 114.841 MB -> 33.158 MB.\n====== future-genetic (functional) [default], iteration 1 completed (11014.493 ms) ======\n====== future-genetic (functional) [default], iteration 2 started ======\nGC before operation: completed in 34.821 ms, heap usage 68.320 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 2 completed (10628.352 ms) ======\n====== future-genetic (functional) [default], iteration 3 started ======\nGC before operation: completed in 38.504 ms, heap usage 57.876 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 3 completed (10722.143 ms) ======\n====== future-genetic (functional) [default], iteration 4 started ======\nGC before operation: completed in 39.692 ms, heap usage 145.206 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 4 completed (10840.012 ms) ======\n====== future-genetic (functional) [default], iteration 5 started ======\nGC before operation: completed in 38.411 ms, heap usage 81.011 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 5 completed (10598.435 ms) ======\n====== future-genetic (functional) [default], iteration 6 started ======\nGC before operation: completed in 40.019 ms, heap usage 144.534 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 6 completed (10786.150 ms) ======\n====== future-genetic (functional) [default], iteration 7 started ======\nGC before operation: completed in 48.015 ms, heap usage 171.419 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 7 completed (10652.683 ms) ======\n====== future-genetic (functional) [default], iteration 8 started ======\nGC before operation: completed in 35.498 ms, heap usage 37.426 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 8 completed (10488.698 ms) ======\n====== future-genetic (functional) [default], iteration 9 started ======\nGC before operation: completed in 42.383 ms, heap usage 130.505 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 9 completed (10682.271 ms) ======\n====== future-genetic (functional) [default], iteration 10 started ======\nGC before operation: completed in 48.742 ms, heap usage 134.970 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 10 completed (10549.840 ms) ======\n====== future-genetic (functional) [default], iteration 11 started ======\nGC before operation: completed in 41.808 ms, heap usage 156.009 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 11 completed (10851.547 ms) ======\n====== future-genetic (functional) [default], iteration 12 started ======\nGC before operation: completed in 40.139 ms, heap usage 163.381 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 12 completed (10940.461 ms) ======\n====== future-genetic (functional) [default], iteration 13 started ======\nGC before operation: completed in 35.048 ms, heap usage 80.372 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 13 completed (10876.099 ms) ======\n====== future-genetic (functional) [default], iteration 14 started ======\nGC before operation: completed in 43.468 ms, heap usage 62.997 MB -> 33.157 MB.\n====== future-genetic (functional) [default], iteration 14 completed (10763.606 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 70.620 ms, heap usage 85.721 MB -> 33.974 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 11\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (23373.227 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 371.313 ms, heap usage 780.679 MB -> 161.200 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (17055.803 ms) ======\n====== akka-uct (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 323.521 ms, heap usage 714.804 MB -> 140.346 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 2 completed (16644.579 ms) ======\n====== akka-uct (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 312.697 ms, heap usage 606.138 MB -> 139.703 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 3 completed (16230.901 ms) ======\n====== akka-uct (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 272.343 ms, heap usage 694.413 MB -> 139.888 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 4 completed (16222.783 ms) ======\n====== akka-uct (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 288.309 ms, heap usage 549.430 MB -> 124.976 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 5 completed (16061.576 ms) ======\n====== akka-uct (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 254.080 ms, heap usage 570.484 MB -> 130.699 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 6 completed (15769.690 ms) ======\n====== akka-uct (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 387.396 ms, heap usage 619.770 MB -> 158.750 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 7 completed (15901.168 ms) ======\n====== akka-uct (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 304.489 ms, heap usage 580.964 MB -> 149.879 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 8 completed (16178.151 ms) ======\n====== akka-uct (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 253.043 ms, heap usage 553.450 MB -> 150.939 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 9 completed (15874.839 ms) ======\n====== akka-uct (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 301.130 ms, heap usage 528.928 MB -> 139.937 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 10 completed (15982.587 ms) ======\n====== akka-uct (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 267.305 ms, heap usage 626.465 MB -> 131.010 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 11 completed (16353.495 ms) ======\n====== akka-uct (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 294.293 ms, heap usage 500.855 MB -> 153.125 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 10\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 12 completed (15969.903 ms) ======\n====== akka-uct (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 292.350 ms, heap usage 647.259 MB -> 125.388 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 13 completed (15322.843 ms) ======\n====== akka-uct (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 252.391 ms, heap usage 562.070 MB -> 128.190 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 14 completed (16083.172 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 2 (out of 2) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 134.630 ms, heap usage 463.678 MB -> 85.476 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (22878.805 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 103.188 ms, heap usage 272.080 MB -> 100.040 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (14811.341 ms) ======\n====== movie-lens (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 144.144 ms, heap usage 208.849 MB -> 97.194 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 2 completed (13632.892 ms) ======\n====== movie-lens (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 122.890 ms, heap usage 173.120 MB -> 97.842 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 3 completed (12814.257 ms) ======\n====== movie-lens (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 113.279 ms, heap usage 237.308 MB -> 98.141 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 4 completed (12978.413 ms) ======\n====== movie-lens (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 119.099 ms, heap usage 219.670 MB -> 98.103 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 5 completed (14306.460 ms) ======\n====== movie-lens (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 123.459 ms, heap usage 175.077 MB -> 98.404 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 6 completed (12568.443 ms) ======\n====== movie-lens (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 115.564 ms, heap usage 119.760 MB -> 100.031 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 7 completed (11505.398 ms) ======\n====== movie-lens (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 112.918 ms, heap usage 255.198 MB -> 99.024 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 8 completed (11706.594 ms) ======\n====== movie-lens (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 170.418 ms, heap usage 189.372 MB -> 98.513 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 9 completed (11662.958 ms) ======\n====== movie-lens (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 218.616 ms, heap usage 163.601 MB -> 98.629 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 10 completed (11293.424 ms) ======\n====== movie-lens (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 126.280 ms, heap usage 236.690 MB -> 98.603 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 11 completed (11873.509 ms) ======\n====== movie-lens (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 121.729 ms, heap usage 154.433 MB -> 98.657 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 12 completed (12263.435 ms) ======\n====== movie-lens (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 113.550 ms, heap usage 470.143 MB -> 102.266 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 13 completed (12351.951 ms) ======\n====== movie-lens (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 107.375 ms, heap usage 274.093 MB -> 98.738 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 14 completed (12112.256 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 83.428 ms, heap usage 476.231 MB -> 58.268 MB.\n====== scala-doku (scala) [default], iteration 0 completed (2753.475 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 83.813 ms, heap usage 150.542 MB -> 58.243 MB.\n====== scala-doku (scala) [default], iteration 1 completed (2340.567 ms) ======\n====== scala-doku (scala) [default], iteration 2 started ======\nGC before operation: completed in 88.607 ms, heap usage 121.743 MB -> 58.244 MB.\n====== scala-doku (scala) [default], iteration 2 completed (2269.313 ms) ======\n====== scala-doku (scala) [default], iteration 3 started ======\nGC before operation: completed in 79.133 ms, heap usage 118.244 MB -> 58.245 MB.\n====== scala-doku (scala) [default], iteration 3 completed (1898.181 ms) ======\n====== scala-doku (scala) [default], iteration 4 started ======\nGC before operation: completed in 86.643 ms, heap usage 120.745 MB -> 58.245 MB.\n====== scala-doku (scala) [default], iteration 4 completed (1792.430 ms) ======\n====== scala-doku (scala) [default], iteration 5 started ======\nGC before operation: completed in 77.315 ms, heap usage 119.245 MB -> 58.245 MB.\n====== scala-doku (scala) [default], iteration 5 completed (1786.944 ms) ======\n====== scala-doku (scala) [default], iteration 6 started ======\nGC before operation: completed in 89.168 ms, heap usage 120.745 MB -> 58.245 MB.\n====== scala-doku (scala) [default], iteration 6 completed (1866.830 ms) ======\n====== scala-doku (scala) [default], iteration 7 started ======\nGC before operation: completed in 76.164 ms, heap usage 120.245 MB -> 58.246 MB.\n====== scala-doku (scala) [default], iteration 7 completed (1799.903 ms) ======\n====== scala-doku (scala) [default], iteration 8 started ======\nGC before operation: completed in 79.207 ms, heap usage 119.746 MB -> 58.246 MB.\n====== scala-doku (scala) [default], iteration 8 completed (1782.750 ms) ======\n====== scala-doku (scala) [default], iteration 9 started ======\nGC before operation: completed in 86.288 ms, heap usage 120.246 MB -> 58.247 MB.\n====== scala-doku (scala) [default], iteration 9 completed (1778.745 ms) ======\n====== scala-doku (scala) [default], iteration 10 started ======\nGC before operation: completed in 77.760 ms, heap usage 119.747 MB -> 58.247 MB.\n====== scala-doku (scala) [default], iteration 10 completed (1794.655 ms) ======\n====== scala-doku (scala) [default], iteration 11 started ======\nGC before operation: completed in 92.459 ms, heap usage 119.747 MB -> 58.247 MB.\n====== scala-doku (scala) [default], iteration 11 completed (1818.580 ms) ======\n====== scala-doku (scala) [default], iteration 12 started ======\nGC before operation: completed in 77.984 ms, heap usage 120.247 MB -> 58.247 MB.\n====== scala-doku (scala) [default], iteration 12 completed (1848.215 ms) ======\n====== scala-doku (scala) [default], iteration 13 started ======\nGC before operation: completed in 93.441 ms, heap usage 119.747 MB -> 58.247 MB.\n====== scala-doku (scala) [default], iteration 13 completed (1809.411 ms) ======\n====== scala-doku (scala) [default], iteration 14 started ======\nGC before operation: completed in 82.582 ms, heap usage 119.747 MB -> 58.247 MB.\n====== scala-doku (scala) [default], iteration 14 completed (1803.934 ms) ======\nNOTE: 'chi-square' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== chi-square (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 99.379 ms, heap usage 319.426 MB -> 63.405 MB.\n====== chi-square (apache-spark) [default], iteration 0 completed (5198.635 ms) ======\n====== chi-square (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 217.985 ms, heap usage 339.427 MB -> 209.273 MB.\n====== chi-square (apache-spark) [default], iteration 1 completed (1119.485 ms) ======\n====== chi-square (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 175.933 ms, heap usage 299.968 MB -> 209.346 MB.\n====== chi-square (apache-spark) [default], iteration 2 completed (1038.669 ms) ======\n====== chi-square (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 162.484 ms, heap usage 434.584 MB -> 209.395 MB.\n====== chi-square (apache-spark) [default], iteration 3 completed (988.864 ms) ======\n====== chi-square (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 185.658 ms, heap usage 472.608 MB -> 209.448 MB.\n====== chi-square (apache-spark) [default], iteration 4 completed (1021.110 ms) ======\n====== chi-square (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 161.400 ms, heap usage 424.379 MB -> 209.494 MB.\n====== chi-square (apache-spark) [default], iteration 5 completed (1016.339 ms) ======\n====== chi-square (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 165.385 ms, heap usage 377.344 MB -> 209.638 MB.\n====== chi-square (apache-spark) [default], iteration 6 completed (1044.792 ms) ======\n====== chi-square (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 151.433 ms, heap usage 385.817 MB -> 209.712 MB.\n====== chi-square (apache-spark) [default], iteration 7 completed (892.107 ms) ======\n====== chi-square (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 148.497 ms, heap usage 375.358 MB -> 209.695 MB.\n====== chi-square (apache-spark) [default], iteration 8 completed (912.148 ms) ======\n====== chi-square (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 186.559 ms, heap usage 381.260 MB -> 209.735 MB.\n====== chi-square (apache-spark) [default], iteration 9 completed (916.193 ms) ======\n====== chi-square (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 172.071 ms, heap usage 375.984 MB -> 209.776 MB.\n====== chi-square (apache-spark) [default], iteration 10 completed (706.035 ms) ======\n====== chi-square (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 142.619 ms, heap usage 232.457 MB -> 209.816 MB.\n====== chi-square (apache-spark) [default], iteration 11 completed (764.527 ms) ======\n====== chi-square (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 164.121 ms, heap usage 670.340 MB -> 209.852 MB.\n====== chi-square (apache-spark) [default], iteration 12 completed (858.768 ms) ======\n====== chi-square (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 159.826 ms, heap usage 316.763 MB -> 209.890 MB.\n====== chi-square (apache-spark) [default], iteration 13 completed (862.769 ms) ======\n====== chi-square (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 166.687 ms, heap usage 379.775 MB -> 209.921 MB.\n====== chi-square (apache-spark) [default], iteration 14 completed (703.576 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 196.120 ms, heap usage 470.464 MB -> 147.340 MB.\n====== fj-kmeans (concurrency) [default], iteration 0 completed (8529.473 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 133.696 ms, heap usage 331.615 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 1 completed (7479.812 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 134.063 ms, heap usage 318.922 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 2 completed (7610.407 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 133.778 ms, heap usage 222.341 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 3 completed (7571.793 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 139.456 ms, heap usage 217.309 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 4 completed (7516.518 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 133.370 ms, heap usage 382.616 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 5 completed (8339.655 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 140.237 ms, heap usage 354.831 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 6 completed (7633.795 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 137.960 ms, heap usage 448.031 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 7 completed (7335.928 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 127.427 ms, heap usage 221.957 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 8 completed (7359.912 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 137.302 ms, heap usage 368.915 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 9 completed (8379.108 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 139.433 ms, heap usage 184.312 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 10 completed (8029.337 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 138.797 ms, heap usage 171.657 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 11 completed (7673.166 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 132.845 ms, heap usage 170.035 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 12 completed (7460.127 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 137.480 ms, heap usage 320.158 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 13 completed (7646.174 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 127.475 ms, heap usage 186.440 MB -> 146.537 MB.\n====== fj-kmeans (concurrency) [default], iteration 14 completed (7391.153 ms) ======\n====== rx-scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 138.851 ms, heap usage 249.054 MB -> 97.875 MB.\n====== rx-scrabble (functional) [default], iteration 0 completed (539.438 ms) ======\n====== rx-scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 97.806 ms, heap usage 250.872 MB -> 98.124 MB.\n====== rx-scrabble (functional) [default], iteration 1 completed (188.955 ms) ======\n====== rx-scrabble (functional) [default], iteration 2 started ======\nGC before operation: completed in 121.701 ms, heap usage 240.121 MB -> 98.118 MB.\n====== rx-scrabble (functional) [default], iteration 2 completed (158.740 ms) ======\n====== rx-scrabble (functional) [default], iteration 3 started ======\nGC before operation: completed in 103.202 ms, heap usage 238.618 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 3 completed (147.979 ms) ======\n====== rx-scrabble (functional) [default], iteration 4 started ======\nGC before operation: completed in 107.730 ms, heap usage 239.113 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 4 completed (162.112 ms) ======\n====== rx-scrabble (functional) [default], iteration 5 started ======\nGC before operation: completed in 117.578 ms, heap usage 239.463 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 5 completed (128.936 ms) ======\n====== rx-scrabble (functional) [default], iteration 6 started ======\nGC before operation: completed in 111.309 ms, heap usage 239.390 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 6 completed (116.055 ms) ======\n====== rx-scrabble (functional) [default], iteration 7 started ======\nGC before operation: completed in 109.603 ms, heap usage 239.557 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 7 completed (109.336 ms) ======\n====== rx-scrabble (functional) [default], iteration 8 started ======\nGC before operation: completed in 108.494 ms, heap usage 239.260 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 8 completed (124.372 ms) ======\n====== rx-scrabble (functional) [default], iteration 9 started ======\nGC before operation: completed in 134.578 ms, heap usage 239.449 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 9 completed (133.649 ms) ======\n====== rx-scrabble (functional) [default], iteration 10 started ======\nGC before operation: completed in 98.374 ms, heap usage 240.453 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 10 completed (197.918 ms) ======\n====== rx-scrabble (functional) [default], iteration 11 started ======\nGC before operation: completed in 111.349 ms, heap usage 240.463 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 11 completed (117.228 ms) ======\n====== rx-scrabble (functional) [default], iteration 12 started ======\nGC before operation: completed in 104.555 ms, heap usage 240.413 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 12 completed (112.849 ms) ======\n====== rx-scrabble (functional) [default], iteration 13 started ======\nGC before operation: completed in 98.436 ms, heap usage 240.514 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 13 completed (105.866 ms) ======\n====== rx-scrabble (functional) [default], iteration 14 started ======\nGC before operation: completed in 92.783 ms, heap usage 240.977 MB -> 98.119 MB.\n====== rx-scrabble (functional) [default], iteration 14 completed (105.587 ms) ======\n====== db-shootout (database) [default], iteration 0 started ======\nGC before operation: completed in 104.333 ms, heap usage 179.823 MB -> 100.606 MB.\n====== db-shootout (database) [default], iteration 0 completed (8779.951 ms) ======\n====== db-shootout (database) [default], iteration 1 started ======\nGC before operation: completed in 107.497 ms, heap usage 242.103 MB -> 110.924 MB.\n====== db-shootout (database) [default], iteration 1 completed (9343.782 ms) ======\n====== db-shootout (database) [default], iteration 2 started ======\nGC before operation: completed in 111.405 ms, heap usage 283.357 MB -> 112.478 MB.\n====== db-shootout (database) [default], iteration 2 completed (7499.305 ms) ======\n====== db-shootout (database) [default], iteration 3 started ======\nGC before operation: completed in 94.995 ms, heap usage 543.589 MB -> 114.314 MB.\n====== db-shootout (database) [default], iteration 3 completed (8724.019 ms) ======\n====== db-shootout (database) [default], iteration 4 started ======\nGC before operation: completed in 101.845 ms, heap usage 213.978 MB -> 159.872 MB.\n====== db-shootout (database) [default], iteration 4 completed (7010.765 ms) ======\n====== db-shootout (database) [default], iteration 5 started ======\nGC before operation: completed in 164.949 ms, heap usage 636.845 MB -> 167.668 MB.\n====== db-shootout (database) [default], iteration 5 completed (7721.156 ms) ======\n====== db-shootout (database) [default], iteration 6 started ======\nGC before operation: completed in 130.093 ms, heap usage 384.324 MB -> 167.486 MB.\n====== db-shootout (database) [default], iteration 6 completed (7647.257 ms) ======\n====== db-shootout (database) [default], iteration 7 started ======\nGC before operation: completed in 109.623 ms, heap usage 282.011 MB -> 175.857 MB.\n====== db-shootout (database) [default], iteration 7 completed (7329.669 ms) ======\n====== db-shootout (database) [default], iteration 8 started ======\nGC before operation: completed in 116.420 ms, heap usage 284.042 MB -> 175.655 MB.\n====== db-shootout (database) [default], iteration 8 completed (7329.711 ms) ======\n====== db-shootout (database) [default], iteration 9 started ======\nGC before operation: completed in 171.716 ms, heap usage 342.792 MB -> 175.912 MB.\n====== db-shootout (database) [default], iteration 9 completed (6774.502 ms) ======\n====== db-shootout (database) [default], iteration 10 started ======\nGC before operation: completed in 173.829 ms, heap usage 293.932 MB -> 175.555 MB.\n====== db-shootout (database) [default], iteration 10 completed (6874.618 ms) ======\n====== db-shootout (database) [default], iteration 11 started ======\nGC before operation: completed in 148.492 ms, heap usage 400.220 MB -> 180.072 MB.\n====== db-shootout (database) [default], iteration 11 completed (7713.732 ms) ======\n====== db-shootout (database) [default], iteration 12 started ======\nGC before operation: completed in 117.617 ms, heap usage 194.930 MB -> 178.866 MB.\n====== db-shootout (database) [default], iteration 12 completed (7466.876 ms) ======\n====== db-shootout (database) [default], iteration 13 started ======\nGC before operation: completed in 129.592 ms, heap usage 290.546 MB -> 179.243 MB.\n====== db-shootout (database) [default], iteration 13 completed (6989.489 ms) ======\n====== db-shootout (database) [default], iteration 14 started ======\nGC before operation: completed in 136.413 ms, heap usage 256.392 MB -> 179.022 MB.\n====== db-shootout (database) [default], iteration 14 completed (6647.630 ms) ======\nCreating graph database...\nLoading resources...\nPopulating database...\nfinagle-http on :39975 spawning 2 client and default number of server workers.\n====== finagle-http (web) [default], iteration 0 started ======\nGC before operation: completed in 98.510 ms, heap usage 612.157 MB -> 111.470 MB.\n====== finagle-http (web) [default], iteration 0 completed (17579.182 ms) ======\n====== finagle-http (web) [default], iteration 1 started ======\nGC before operation: completed in 132.580 ms, heap usage 293.599 MB -> 114.255 MB.\n====== finagle-http (web) [default], iteration 1 completed (7093.193 ms) ======\n====== finagle-http (web) [default], iteration 2 started ======\nGC before operation: completed in 139.872 ms, heap usage 142.229 MB -> 114.940 MB.\n====== finagle-http (web) [default], iteration 2 completed (3467.412 ms) ======\n====== finagle-http (web) [default], iteration 3 started ======\nGC before operation: completed in 102.621 ms, heap usage 139.149 MB -> 115.008 MB.\n====== finagle-http (web) [default], iteration 3 completed (2891.463 ms) ======\n====== finagle-http (web) [default], iteration 4 started ======\nGC before operation: completed in 101.518 ms, heap usage 138.053 MB -> 115.745 MB.\n====== finagle-http (web) [default], iteration 4 completed (3105.065 ms) ======\n====== finagle-http (web) [default], iteration 5 started ======\nGC before operation: completed in 107.976 ms, heap usage 136.110 MB -> 115.075 MB.\n====== finagle-http (web) [default], iteration 5 completed (2695.150 ms) ======\n====== finagle-http (web) [default], iteration 6 started ======\nGC before operation: completed in 112.486 ms, heap usage 136.249 MB -> 115.049 MB.\n====== finagle-http (web) [default], iteration 6 completed (2704.392 ms) ======\n====== finagle-http (web) [default], iteration 7 started ======\nGC before operation: completed in 114.377 ms, heap usage 135.245 MB -> 115.020 MB.\n====== finagle-http (web) [default], iteration 7 completed (2948.935 ms) ======\n====== finagle-http (web) [default], iteration 8 started ======\nGC before operation: completed in 122.053 ms, heap usage 135.666 MB -> 115.051 MB.\n====== finagle-http (web) [default], iteration 8 completed (2778.196 ms) ======\n====== finagle-http (web) [default], iteration 9 started ======\nGC before operation: completed in 109.678 ms, heap usage 136.088 MB -> 115.031 MB.\n====== finagle-http (web) [default], iteration 9 completed (2747.983 ms) ======\n====== finagle-http (web) [default], iteration 10 started ======\nGC before operation: completed in 99.536 ms, heap usage 135.498 MB -> 115.057 MB.\n====== finagle-http (web) [default], iteration 10 completed (2777.183 ms) ======\n====== finagle-http (web) [default], iteration 11 started ======\nGC before operation: completed in 100.476 ms, heap usage 134.090 MB -> 115.060 MB.\n====== finagle-http (web) [default], iteration 11 completed (2950.363 ms) ======\n====== finagle-http (web) [default], iteration 12 started ======\nGC before operation: completed in 101.952 ms, heap usage 134.523 MB -> 115.062 MB.\n====== finagle-http (web) [default], iteration 12 completed (2759.978 ms) ======\n====== finagle-http (web) [default], iteration 13 started ======\nGC before operation: completed in 109.865 ms, heap usage 135.138 MB -> 115.064 MB.\n====== finagle-http (web) [default], iteration 13 completed (2831.653 ms) ======\n====== finagle-http (web) [default], iteration 14 started ======\nGC before operation: completed in 105.948 ms, heap usage 134.532 MB -> 115.044 MB.\n====== finagle-http (web) [default], iteration 14 completed (2711.280 ms) ======\n====== reactors (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 105.850 ms, heap usage 151.704 MB -> 116.190 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 0 completed (17020.896 ms) ======\n====== reactors (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 104.599 ms, heap usage 181.251 MB -> 113.711 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 1 completed (13892.575 ms) ======\n====== reactors (concurrency) [default], iteration 2 started ======\nGC before operation: completed in 95.102 ms, heap usage 174.198 MB -> 113.758 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 2 completed (12554.742 ms) ======\n====== reactors (concurrency) [default], iteration 3 started ======\nGC before operation: completed in 116.893 ms, heap usage 619.954 MB -> 113.748 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 3 completed (13425.368 ms) ======\n====== reactors (concurrency) [default], iteration 4 started ======\nGC before operation: completed in 116.460 ms, heap usage 633.733 MB -> 113.696 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 4 completed (12579.614 ms) ======\n====== reactors (concurrency) [default], iteration 5 started ======\nGC before operation: completed in 101.795 ms, heap usage 678.695 MB -> 113.699 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 5 completed (13161.693 ms) ======\n====== reactors (concurrency) [default], iteration 6 started ======\nGC before operation: completed in 172.615 ms, heap usage 622.470 MB -> 113.699 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 6 completed (12878.519 ms) ======\n====== reactors (concurrency) [default], iteration 7 started ======\nGC before operation: completed in 112.228 ms, heap usage 718.171 MB -> 113.700 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 7 completed (12975.597 ms) ======\n====== reactors (concurrency) [default], iteration 8 started ======\nGC before operation: completed in 98.762 ms, heap usage 716.077 MB -> 113.700 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 8 completed (12770.728 ms) ======\n====== reactors (concurrency) [default], iteration 9 started ======\nGC before operation: completed in 102.126 ms, heap usage 748.105 MB -> 113.710 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 9 completed (13076.609 ms) ======\n====== reactors (concurrency) [default], iteration 10 started ======\nGC before operation: completed in 98.649 ms, heap usage 687.606 MB -> 113.700 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 10 completed (13003.432 ms) ======\n====== reactors (concurrency) [default], iteration 11 started ======\nGC before operation: completed in 101.379 ms, heap usage 732.195 MB -> 113.700 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 11 completed (14004.051 ms) ======\n====== reactors (concurrency) [default], iteration 12 started ======\nGC before operation: completed in 105.159 ms, heap usage 627.924 MB -> 113.700 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 12 completed (13270.736 ms) ======\n====== reactors (concurrency) [default], iteration 13 started ======\nGC before operation: completed in 108.063 ms, heap usage 752.521 MB -> 113.700 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 13 completed (13719.150 ms) ======\n====== reactors (concurrency) [default], iteration 14 started ======\nGC before operation: completed in 122.216 ms, heap usage 634.683 MB -> 113.714 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 14 completed (13878.366 ms) ======\nNOTE: 'dec-tree' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== dec-tree (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 164.697 ms, heap usage 737.360 MB -> 126.493 MB.\n====== dec-tree (apache-spark) [default], iteration 0 completed (10211.732 ms) ======\n====== dec-tree (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 163.548 ms, heap usage 286.590 MB -> 158.107 MB.\n====== dec-tree (apache-spark) [default], iteration 1 completed (2450.505 ms) ======\n====== dec-tree (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 136.565 ms, heap usage 345.940 MB -> 158.492 MB.\n====== dec-tree (apache-spark) [default], iteration 2 completed (2009.743 ms) ======\n====== dec-tree (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 138.685 ms, heap usage 279.501 MB -> 158.716 MB.\n====== dec-tree (apache-spark) [default], iteration 3 completed (1989.605 ms) ======\n====== dec-tree (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 146.026 ms, heap usage 489.120 MB -> 158.915 MB.\n====== dec-tree (apache-spark) [default], iteration 4 completed (1714.918 ms) ======\n====== dec-tree (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 127.943 ms, heap usage 488.970 MB -> 159.140 MB.\n====== dec-tree (apache-spark) [default], iteration 5 completed (1705.237 ms) ======\n====== dec-tree (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 130.962 ms, heap usage 190.728 MB -> 158.870 MB.\n====== dec-tree (apache-spark) [default], iteration 6 completed (1675.410 ms) ======\n====== dec-tree (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 128.752 ms, heap usage 464.234 MB -> 159.494 MB.\n====== dec-tree (apache-spark) [default], iteration 7 completed (1687.319 ms) ======\n====== dec-tree (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 131.642 ms, heap usage 193.742 MB -> 159.062 MB.\n====== dec-tree (apache-spark) [default], iteration 8 completed (1553.852 ms) ======\n====== dec-tree (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 146.296 ms, heap usage 480.448 MB -> 168.014 MB.\n====== dec-tree (apache-spark) [default], iteration 9 completed (1516.748 ms) ======\n====== dec-tree (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 144.013 ms, heap usage 452.343 MB -> 159.895 MB.\n====== dec-tree (apache-spark) [default], iteration 10 completed (1582.871 ms) ======\n====== dec-tree (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 134.653 ms, heap usage 443.551 MB -> 160.089 MB.\n====== dec-tree (apache-spark) [default], iteration 11 completed (1470.741 ms) ======\n====== dec-tree (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 195.778 ms, heap usage 440.791 MB -> 160.224 MB.\n====== dec-tree (apache-spark) [default], iteration 12 completed (1455.447 ms) ======\n====== dec-tree (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 153.178 ms, heap usage 513.991 MB -> 160.372 MB.\n====== dec-tree (apache-spark) [default], iteration 13 completed (1444.480 ms) ======\n====== dec-tree (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 140.368 ms, heap usage 445.814 MB -> 160.435 MB.\n====== dec-tree (apache-spark) [default], iteration 14 completed (1470.615 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 0 started ======\nGC before operation: completed in 151.372 ms, heap usage 172.187 MB -> 143.483 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 534\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 53\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 9\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 7\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 10\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 8\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 16\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 4\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 11\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 22\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 4\tmaxttc = 534\tfailed = 0\ttotal = 4\nSHORT_TRAVERSAL:  successful = 6\tmaxttc = 16\tfailed = 0\ttotal = 6\nSHORT_TRAVERSAL_RO:  successful = 10\tmaxttc = 9\tfailed = 0\ttotal = 10\nOPERATION:  successful = 8\tmaxttc = 22\tfailed = 0\ttotal = 8\nOPERATION_RO:  successful = 12\tmaxttc = 11\tfailed = 0\ttotal = 12\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 59.88 op/s (59.88 op/s including failed)\nElapsed time: 0.67 s\n====== scala-stm-bench7 (scala) [default], iteration 0 completed (2511.480 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 1 started ======\nGC before operation: completed in 135.828 ms, heap usage 523.490 MB -> 142.053 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 470\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 13\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 8\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 14\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 9\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 8\tmaxttc = 534\tfailed = 0\ttotal = 8\nSHORT_TRAVERSAL:  successful = 12\tmaxttc = 16\tfailed = 0\ttotal = 12\nSHORT_TRAVERSAL_RO:  successful = 20\tmaxttc = 9\tfailed = 0\ttotal = 20\nOPERATION:  successful = 16\tmaxttc = 22\tfailed = 0\ttotal = 16\nOPERATION_RO:  successful = 24\tmaxttc = 14\tfailed = 0\ttotal = 24\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 155.64 op/s (155.64 op/s including failed)\nElapsed time: 0.51 s\n====== scala-stm-bench7 (scala) [default], iteration 1 completed (1783.062 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 2 started ======\nGC before operation: completed in 240.384 ms, heap usage 489.877 MB -> 142.054 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 517\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 11\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 8\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 12\tmaxttc = 534\tfailed = 0\ttotal = 12\nSHORT_TRAVERSAL:  successful = 18\tmaxttc = 16\tfailed = 0\ttotal = 18\nSHORT_TRAVERSAL_RO:  successful = 30\tmaxttc = 9\tfailed = 0\ttotal = 30\nOPERATION:  successful = 24\tmaxttc = 22\tfailed = 0\ttotal = 24\nOPERATION_RO:  successful = 36\tmaxttc = 14\tfailed = 0\ttotal = 36\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 220.59 op/s (220.59 op/s including failed)\nElapsed time: 0.54 s\n====== scala-stm-bench7 (scala) [default], iteration 2 completed (1408.246 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 3 started ======\nGC before operation: completed in 136.697 ms, heap usage 506.905 MB -> 142.050 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 496\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 7\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 4\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 16\tmaxttc = 534\tfailed = 0\ttotal = 16\nSHORT_TRAVERSAL:  successful = 24\tmaxttc = 16\tfailed = 0\ttotal = 24\nSHORT_TRAVERSAL_RO:  successful = 40\tmaxttc = 9\tfailed = 0\ttotal = 40\nOPERATION:  successful = 32\tmaxttc = 22\tfailed = 0\ttotal = 32\nOPERATION_RO:  successful = 48\tmaxttc = 14\tfailed = 0\ttotal = 48\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 310.08 op/s (310.08 op/s including failed)\nElapsed time: 0.52 s\n====== scala-stm-bench7 (scala) [default], iteration 3 completed (1342.530 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 4 started ======\nGC before operation: completed in 147.926 ms, heap usage 393.121 MB -> 142.060 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 384\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 7\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 4\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 20\tmaxttc = 534\tfailed = 0\ttotal = 20\nSHORT_TRAVERSAL:  successful = 30\tmaxttc = 16\tfailed = 0\ttotal = 30\nSHORT_TRAVERSAL_RO:  successful = 50\tmaxttc = 9\tfailed = 0\ttotal = 50\nOPERATION:  successful = 40\tmaxttc = 22\tfailed = 0\ttotal = 40\nOPERATION_RO:  successful = 60\tmaxttc = 14\tfailed = 0\ttotal = 60\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 506.33 op/s (506.33 op/s including failed)\nElapsed time: 0.40 s\n====== scala-stm-bench7 (scala) [default], iteration 4 completed (1272.510 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 5 started ======\nGC before operation: completed in 185.238 ms, heap usage 380.599 MB -> 142.044 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 518\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 11\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 6\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 24\tmaxttc = 534\tfailed = 0\ttotal = 24\nSHORT_TRAVERSAL:  successful = 36\tmaxttc = 16\tfailed = 0\ttotal = 36\nSHORT_TRAVERSAL_RO:  successful = 60\tmaxttc = 9\tfailed = 0\ttotal = 60\nOPERATION:  successful = 48\tmaxttc = 22\tfailed = 0\ttotal = 48\nOPERATION_RO:  successful = 72\tmaxttc = 14\tfailed = 0\ttotal = 72\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 441.99 op/s (441.99 op/s including failed)\nElapsed time: 0.54 s\n====== scala-stm-bench7 (scala) [default], iteration 5 completed (1480.501 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 6 started ======\nGC before operation: completed in 153.068 ms, heap usage 507.102 MB -> 142.056 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 463\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 11\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 8\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 8\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 28\tmaxttc = 534\tfailed = 0\ttotal = 28\nSHORT_TRAVERSAL:  successful = 42\tmaxttc = 16\tfailed = 0\ttotal = 42\nSHORT_TRAVERSAL_RO:  successful = 70\tmaxttc = 9\tfailed = 0\ttotal = 70\nOPERATION:  successful = 56\tmaxttc = 22\tfailed = 0\ttotal = 56\nOPERATION_RO:  successful = 84\tmaxttc = 14\tfailed = 0\ttotal = 84\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 577.32 op/s (577.32 op/s including failed)\nElapsed time: 0.49 s\n====== scala-stm-bench7 (scala) [default], iteration 6 completed (1372.866 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 7 started ======\nGC before operation: completed in 147.549 ms, heap usage 507.608 MB -> 142.061 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 483\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 9\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 32\tmaxttc = 534\tfailed = 0\ttotal = 32\nSHORT_TRAVERSAL:  successful = 48\tmaxttc = 16\tfailed = 0\ttotal = 48\nSHORT_TRAVERSAL_RO:  successful = 80\tmaxttc = 9\tfailed = 0\ttotal = 80\nOPERATION:  successful = 64\tmaxttc = 22\tfailed = 0\ttotal = 64\nOPERATION_RO:  successful = 96\tmaxttc = 14\tfailed = 0\ttotal = 96\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 642.57 op/s (642.57 op/s including failed)\nElapsed time: 0.50 s\n====== scala-stm-bench7 (scala) [default], iteration 7 completed (1368.893 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 8 started ======\nGC before operation: completed in 156.075 ms, heap usage 505.601 MB -> 142.044 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 492\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 10\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 4\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 36\tmaxttc = 534\tfailed = 0\ttotal = 36\nSHORT_TRAVERSAL:  successful = 54\tmaxttc = 16\tfailed = 0\ttotal = 54\nSHORT_TRAVERSAL_RO:  successful = 90\tmaxttc = 9\tfailed = 0\ttotal = 90\nOPERATION:  successful = 72\tmaxttc = 22\tfailed = 0\ttotal = 72\nOPERATION_RO:  successful = 108\tmaxttc = 14\tfailed = 0\ttotal = 108\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 705.88 op/s (705.88 op/s including failed)\nElapsed time: 0.51 s\n====== scala-stm-bench7 (scala) [default], iteration 8 completed (1469.754 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 9 started ======\nGC before operation: completed in 137.134 ms, heap usage 507.110 MB -> 142.056 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 474\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 10\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 4\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 40\tmaxttc = 534\tfailed = 0\ttotal = 40\nSHORT_TRAVERSAL:  successful = 60\tmaxttc = 16\tfailed = 0\ttotal = 60\nSHORT_TRAVERSAL_RO:  successful = 100\tmaxttc = 9\tfailed = 0\ttotal = 100\nOPERATION:  successful = 80\tmaxttc = 22\tfailed = 0\ttotal = 80\nOPERATION_RO:  successful = 120\tmaxttc = 14\tfailed = 0\ttotal = 120\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 818.00 op/s (818.00 op/s including failed)\nElapsed time: 0.49 s\n====== scala-stm-bench7 (scala) [default], iteration 9 completed (1497.723 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 10 started ======\nGC before operation: completed in 389.866 ms, heap usage 507.497 MB -> 295.408 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 340\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 11\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 44\tmaxttc = 534\tfailed = 0\ttotal = 44\nSHORT_TRAVERSAL:  successful = 66\tmaxttc = 16\tfailed = 0\ttotal = 66\nSHORT_TRAVERSAL_RO:  successful = 110\tmaxttc = 9\tfailed = 0\ttotal = 110\nOPERATION:  successful = 88\tmaxttc = 22\tfailed = 0\ttotal = 88\nOPERATION_RO:  successful = 132\tmaxttc = 14\tfailed = 0\ttotal = 132\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1229.05 op/s (1229.05 op/s including failed)\nElapsed time: 0.36 s\n====== scala-stm-bench7 (scala) [default], iteration 10 completed (1120.384 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 11 started ======\nGC before operation: completed in 140.313 ms, heap usage 400.744 MB -> 142.052 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 600\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 12\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 48\tmaxttc = 600\tfailed = 0\ttotal = 48\nSHORT_TRAVERSAL:  successful = 72\tmaxttc = 16\tfailed = 0\ttotal = 72\nSHORT_TRAVERSAL_RO:  successful = 120\tmaxttc = 9\tfailed = 0\ttotal = 120\nOPERATION:  successful = 96\tmaxttc = 22\tfailed = 0\ttotal = 96\nOPERATION_RO:  successful = 144\tmaxttc = 14\tfailed = 0\ttotal = 144\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 770.47 op/s (770.47 op/s including failed)\nElapsed time: 0.62 s\n====== scala-stm-bench7 (scala) [default], iteration 11 completed (1498.094 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 12 started ======\nGC before operation: completed in 158.043 ms, heap usage 507.099 MB -> 142.057 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 429\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 6\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 52\tmaxttc = 600\tfailed = 0\ttotal = 52\nSHORT_TRAVERSAL:  successful = 78\tmaxttc = 16\tfailed = 0\ttotal = 78\nSHORT_TRAVERSAL_RO:  successful = 130\tmaxttc = 9\tfailed = 0\ttotal = 130\nOPERATION:  successful = 104\tmaxttc = 22\tfailed = 0\ttotal = 104\nOPERATION_RO:  successful = 156\tmaxttc = 14\tfailed = 0\ttotal = 156\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1184.51 op/s (1184.51 op/s including failed)\nElapsed time: 0.44 s\n====== scala-stm-bench7 (scala) [default], iteration 12 completed (1301.468 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 13 started ======\nGC before operation: completed in 157.214 ms, heap usage 430.109 MB -> 142.044 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 441\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 8\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 7\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 56\tmaxttc = 600\tfailed = 0\ttotal = 56\nSHORT_TRAVERSAL:  successful = 84\tmaxttc = 16\tfailed = 0\ttotal = 84\nSHORT_TRAVERSAL_RO:  successful = 140\tmaxttc = 9\tfailed = 0\ttotal = 140\nOPERATION:  successful = 112\tmaxttc = 22\tfailed = 0\ttotal = 112\nOPERATION_RO:  successful = 168\tmaxttc = 14\tfailed = 0\ttotal = 168\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1244.44 op/s (1244.44 op/s including failed)\nElapsed time: 0.45 s\n====== scala-stm-bench7 (scala) [default], iteration 13 completed (1351.470 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 14 started ======\nGC before operation: completed in 141.475 ms, heap usage 507.530 MB -> 142.049 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 482\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 10\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 60\tmaxttc = 600\tfailed = 0\ttotal = 60\nSHORT_TRAVERSAL:  successful = 90\tmaxttc = 16\tfailed = 0\ttotal = 90\nSHORT_TRAVERSAL_RO:  successful = 150\tmaxttc = 9\tfailed = 0\ttotal = 150\nOPERATION:  successful = 120\tmaxttc = 22\tfailed = 0\ttotal = 120\nOPERATION_RO:  successful = 180\tmaxttc = 14\tfailed = 0\ttotal = 180\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 1204.82 op/s (1204.82 op/s including failed)\nElapsed time: 0.50 s\n====== scala-stm-bench7 (scala) [default], iteration 14 completed (1439.994 ms) ======\nNOTE: 'naive-bayes' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== naive-bayes (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 157.559 ms, heap usage 173.043 MB -> 152.727 MB.\n====== naive-bayes (apache-spark) [default], iteration 0 completed (40505.768 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 203.021 ms, heap usage 442.679 MB -> 428.812 MB.\n====== naive-bayes (apache-spark) [default], iteration 1 completed (23313.942 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 184.892 ms, heap usage 455.964 MB -> 429.040 MB.\n====== naive-bayes (apache-spark) [default], iteration 2 completed (22137.040 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 207.126 ms, heap usage 447.901 MB -> 429.105 MB.\n====== naive-bayes (apache-spark) [default], iteration 3 completed (22166.338 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 178.331 ms, heap usage 447.914 MB -> 429.201 MB.\n====== naive-bayes (apache-spark) [default], iteration 4 completed (22021.017 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 188.053 ms, heap usage 531.524 MB -> 429.272 MB.\n====== naive-bayes (apache-spark) [default], iteration 5 completed (21499.434 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 198.890 ms, heap usage 499.768 MB -> 429.344 MB.\n====== naive-bayes (apache-spark) [default], iteration 6 completed (21187.520 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 175.395 ms, heap usage 531.319 MB -> 429.410 MB.\n====== naive-bayes (apache-spark) [default], iteration 7 completed (22419.763 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 282.874 ms, heap usage 492.795 MB -> 429.532 MB.\n====== naive-bayes (apache-spark) [default], iteration 8 completed (21701.999 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 167.999 ms, heap usage 455.434 MB -> 427.583 MB.\n====== naive-bayes (apache-spark) [default], iteration 9 completed (20956.195 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 211.706 ms, heap usage 813.593 MB -> 421.269 MB.\n====== naive-bayes (apache-spark) [default], iteration 10 completed (21463.384 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 165.327 ms, heap usage 542.556 MB -> 422.040 MB.\n====== naive-bayes (apache-spark) [default], iteration 11 completed (20713.293 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 156.444 ms, heap usage 742.313 MB -> 422.032 MB.\n====== naive-bayes (apache-spark) [default], iteration 12 completed (20682.267 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 143.812 ms, heap usage 741.763 MB -> 422.119 MB.\n====== naive-bayes (apache-spark) [default], iteration 13 completed (21341.442 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 154.760 ms, heap usage 448.917 MB -> 422.205 MB.\n====== naive-bayes (apache-spark) [default], iteration 14 completed (21277.786 ms) ======\nNOTE: 'als' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== als (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 170.517 ms, heap usage 342.184 MB -> 167.715 MB.\n====== als (apache-spark) [default], iteration 0 completed (17245.293 ms) ======\n====== als (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 206.106 ms, heap usage 381.163 MB -> 192.447 MB.\n====== als (apache-spark) [default], iteration 1 completed (8374.551 ms) ======\n====== als (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 203.403 ms, heap usage 692.875 MB -> 193.732 MB.\n====== als (apache-spark) [default], iteration 2 completed (7613.825 ms) ======\n====== als (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 197.033 ms, heap usage 770.490 MB -> 194.322 MB.\n====== als (apache-spark) [default], iteration 3 completed (7498.159 ms) ======\n====== als (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 222.854 ms, heap usage 724.610 MB -> 194.842 MB.\n====== als (apache-spark) [default], iteration 4 completed (7222.046 ms) ======\n====== als (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 199.073 ms, heap usage 630.683 MB -> 195.312 MB.\n====== als (apache-spark) [default], iteration 5 completed (6777.255 ms) ======\n====== als (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 196.178 ms, heap usage 670.045 MB -> 195.920 MB.\n====== als (apache-spark) [default], iteration 6 completed (6716.076 ms) ======\n====== als (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 196.405 ms, heap usage 703.914 MB -> 196.465 MB.\n====== als (apache-spark) [default], iteration 7 completed (6706.499 ms) ======\n====== als (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 200.429 ms, heap usage 690.188 MB -> 197.117 MB.\n====== als (apache-spark) [default], iteration 8 completed (6692.376 ms) ======\n====== als (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 206.096 ms, heap usage 703.429 MB -> 197.402 MB.\n====== als (apache-spark) [default], iteration 9 completed (6829.927 ms) ======\n====== als (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 210.566 ms, heap usage 722.096 MB -> 197.832 MB.\n====== als (apache-spark) [default], iteration 10 completed (6464.726 ms) ======\n====== als (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 207.892 ms, heap usage 691.523 MB -> 197.993 MB.\n====== als (apache-spark) [default], iteration 11 completed (6570.330 ms) ======\n====== als (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 235.043 ms, heap usage 728.923 MB -> 198.219 MB.\n====== als (apache-spark) [default], iteration 12 completed (6550.026 ms) ======\n====== als (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 204.262 ms, heap usage 672.212 MB -> 198.515 MB.\n====== als (apache-spark) [default], iteration 13 completed (6596.781 ms) ======\n====== als (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 202.815 ms, heap usage 743.348 MB -> 198.767 MB.\n====== als (apache-spark) [default], iteration 14 completed (6349.995 ms) ======\n====== par-mnemonics (functional) [default], iteration 0 started ======\nGC before operation: completed in 300.165 ms, heap usage 696.077 MB -> 179.147 MB.\n====== par-mnemonics (functional) [default], iteration 0 completed (4479.313 ms) ======\n====== par-mnemonics (functional) [default], iteration 1 started ======\nGC before operation: completed in 193.254 ms, heap usage 336.437 MB -> 179.107 MB.\n====== par-mnemonics (functional) [default], iteration 1 completed (4119.000 ms) ======\n====== par-mnemonics (functional) [default], iteration 2 started ======\nGC before operation: completed in 192.306 ms, heap usage 405.576 MB -> 179.104 MB.\n====== par-mnemonics (functional) [default], iteration 2 completed (4258.146 ms) ======\n====== par-mnemonics (functional) [default], iteration 3 started ======\nGC before operation: completed in 193.004 ms, heap usage 324.174 MB -> 179.108 MB.\n====== par-mnemonics (functional) [default], iteration 3 completed (4452.797 ms) ======\n====== par-mnemonics (functional) [default], iteration 4 started ======\nGC before operation: completed in 177.712 ms, heap usage 419.693 MB -> 179.105 MB.\n====== par-mnemonics (functional) [default], iteration 4 completed (3933.250 ms) ======\n====== par-mnemonics (functional) [default], iteration 5 started ======\nGC before operation: completed in 186.258 ms, heap usage 324.982 MB -> 179.105 MB.\n====== par-mnemonics (functional) [default], iteration 5 completed (4007.080 ms) ======\n====== par-mnemonics (functional) [default], iteration 6 started ======\nGC before operation: completed in 190.779 ms, heap usage 309.104 MB -> 179.121 MB.\n====== par-mnemonics (functional) [default], iteration 6 completed (3953.148 ms) ======\n====== par-mnemonics (functional) [default], iteration 7 started ======\nGC before operation: completed in 204.409 ms, heap usage 312.674 MB -> 179.116 MB.\n====== par-mnemonics (functional) [default], iteration 7 completed (4068.803 ms) ======\n====== par-mnemonics (functional) [default], iteration 8 started ======\nGC before operation: completed in 187.505 ms, heap usage 315.067 MB -> 179.106 MB.\n====== par-mnemonics (functional) [default], iteration 8 completed (3881.191 ms) ======\n====== par-mnemonics (functional) [default], iteration 9 started ======\nGC before operation: completed in 178.405 ms, heap usage 312.898 MB -> 179.106 MB.\n====== par-mnemonics (functional) [default], iteration 9 completed (4171.076 ms) ======\n====== par-mnemonics (functional) [default], iteration 10 started ======\nGC before operation: completed in 188.686 ms, heap usage 312.174 MB -> 179.106 MB.\n====== par-mnemonics (functional) [default], iteration 10 completed (3953.921 ms) ======\n====== par-mnemonics (functional) [default], iteration 11 started ======\nGC before operation: completed in 191.991 ms, heap usage 319.854 MB -> 179.106 MB.\n====== par-mnemonics (functional) [default], iteration 11 completed (4020.731 ms) ======\n====== par-mnemonics (functional) [default], iteration 12 started ======\nGC before operation: completed in 194.977 ms, heap usage 313.371 MB -> 179.106 MB.\n====== par-mnemonics (functional) [default], iteration 12 completed (4155.199 ms) ======\n====== par-mnemonics (functional) [default], iteration 13 started ======\nGC before operation: completed in 186.738 ms, heap usage 349.674 MB -> 179.103 MB.\n====== par-mnemonics (functional) [default], iteration 13 completed (4420.589 ms) ======\n====== par-mnemonics (functional) [default], iteration 14 started ======\nGC before operation: completed in 189.534 ms, heap usage 309.674 MB -> 179.103 MB.\n====== par-mnemonics (functional) [default], iteration 14 completed (3653.633 ms) ======\n====== scala-kmeans (scala) [default], iteration 0 started ======\nGC before operation: completed in 259.501 ms, heap usage 343.603 MB -> 201.421 MB.\n====== scala-kmeans (scala) [default], iteration 0 completed (339.766 ms) ======\n====== scala-kmeans (scala) [default], iteration 1 started ======\nGC before operation: completed in 202.460 ms, heap usage 256.921 MB -> 201.453 MB.\n====== scala-kmeans (scala) [default], iteration 1 completed (226.462 ms) ======\n====== scala-kmeans (scala) [default], iteration 2 started ======\nGC before operation: completed in 202.113 ms, heap usage 323.453 MB -> 201.453 MB.\n====== scala-kmeans (scala) [default], iteration 2 completed (224.094 ms) ======\n====== scala-kmeans (scala) [default], iteration 3 started ======\nGC before operation: completed in 183.749 ms, heap usage 322.953 MB -> 201.453 MB.\n====== scala-kmeans (scala) [default], iteration 3 completed (222.411 ms) ======\n====== scala-kmeans (scala) [default], iteration 4 started ======\nGC before operation: completed in 202.302 ms, heap usage 322.953 MB -> 201.453 MB.\n====== scala-kmeans (scala) [default], iteration 4 completed (223.270 ms) ======\n====== scala-kmeans (scala) [default], iteration 5 started ======\nGC before operation: completed in 202.640 ms, heap usage 322.953 MB -> 201.455 MB.\n====== scala-kmeans (scala) [default], iteration 5 completed (224.528 ms) ======\n====== scala-kmeans (scala) [default], iteration 6 started ======\nGC before operation: completed in 188.615 ms, heap usage 322.953 MB -> 201.453 MB.\n====== scala-kmeans (scala) [default], iteration 6 completed (231.478 ms) ======\n====== scala-kmeans (scala) [default], iteration 7 started ======\nGC before operation: completed in 206.202 ms, heap usage 322.953 MB -> 201.472 MB.\n====== scala-kmeans (scala) [default], iteration 7 completed (229.890 ms) ======\n====== scala-kmeans (scala) [default], iteration 8 started ======\nGC before operation: completed in 201.694 ms, heap usage 322.954 MB -> 201.454 MB.\n====== scala-kmeans (scala) [default], iteration 8 completed (259.279 ms) ======\n====== scala-kmeans (scala) [default], iteration 9 started ======\nGC before operation: completed in 185.242 ms, heap usage 332.551 MB -> 201.483 MB.\n====== scala-kmeans (scala) [default], iteration 9 completed (235.502 ms) ======\n====== scala-kmeans (scala) [default], iteration 10 started ======\nGC before operation: completed in 205.981 ms, heap usage 323.461 MB -> 201.461 MB.\n====== scala-kmeans (scala) [default], iteration 10 completed (235.422 ms) ======\n====== scala-kmeans (scala) [default], iteration 11 started ======\nGC before operation: completed in 205.946 ms, heap usage 322.961 MB -> 201.489 MB.\n====== scala-kmeans (scala) [default], iteration 11 completed (339.977 ms) ======\n====== scala-kmeans (scala) [default], iteration 12 started ======\nGC before operation: completed in 200.922 ms, heap usage 330.961 MB -> 201.462 MB.\n====== scala-kmeans (scala) [default], iteration 12 completed (222.818 ms) ======\n====== scala-kmeans (scala) [default], iteration 13 started ======\nGC before operation: completed in 192.781 ms, heap usage 322.962 MB -> 201.463 MB.\n====== scala-kmeans (scala) [default], iteration 13 completed (220.477 ms) ======\n====== scala-kmeans (scala) [default], iteration 14 started ======\nGC before operation: completed in 202.779 ms, heap usage 322.963 MB -> 201.463 MB.\n====== scala-kmeans (scala) [default], iteration 14 completed (222.039 ms) ======\n====== philosophers (scala) [default], iteration 0 started ======\nGC before operation: completed in 241.597 ms, heap usage 324.963 MB -> 180.463 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 0 completed (1409.944 ms) ======\n====== philosophers (scala) [default], iteration 1 started ======\nGC before operation: completed in 243.462 ms, heap usage 184.232 MB -> 180.383 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 1 completed (604.601 ms) ======\n====== philosophers (scala) [default], iteration 2 started ======\nGC before operation: completed in 192.650 ms, heap usage 525.881 MB -> 180.384 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 2 completed (741.321 ms) ======\n====== philosophers (scala) [default], iteration 3 started ======\nGC before operation: completed in 181.298 ms, heap usage 189.882 MB -> 180.385 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 3 completed (757.745 ms) ======\n====== philosophers (scala) [default], iteration 4 started ======\nGC before operation: completed in 201.106 ms, heap usage 194.464 MB -> 180.382 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 4 completed (659.879 ms) ======\n====== philosophers (scala) [default], iteration 5 started ======\nGC before operation: completed in 199.590 ms, heap usage 538.382 MB -> 180.402 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 5 completed (761.913 ms) ======\n====== philosophers (scala) [default], iteration 6 started ======\nGC before operation: completed in 180.230 ms, heap usage 206.336 MB -> 180.407 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 6 completed (582.194 ms) ======\n====== philosophers (scala) [default], iteration 7 started ======\nGC before operation: completed in 181.803 ms, heap usage 539.882 MB -> 180.387 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 7 completed (719.670 ms) ======\n====== philosophers (scala) [default], iteration 8 started ======\nGC before operation: completed in 205.901 ms, heap usage 205.086 MB -> 180.392 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 8 completed (711.867 ms) ======\n====== philosophers (scala) [default], iteration 9 started ======\nGC before operation: completed in 181.841 ms, heap usage 201.039 MB -> 180.385 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 9 completed (668.165 ms) ======\n====== philosophers (scala) [default], iteration 10 started ======\nGC before operation: completed in 199.598 ms, heap usage 194.511 MB -> 180.385 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 10 completed (566.751 ms) ======\n====== philosophers (scala) [default], iteration 11 started ======\nGC before operation: completed in 283.702 ms, heap usage 541.882 MB -> 180.382 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 11 completed (656.239 ms) ======\n====== philosophers (scala) [default], iteration 12 started ======\nGC before operation: completed in 177.024 ms, heap usage 193.987 MB -> 180.397 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 12 completed (612.935 ms) ======\n====== philosophers (scala) [default], iteration 13 started ======\nGC before operation: completed in 187.202 ms, heap usage 182.739 MB -> 180.398 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 13 completed (607.424 ms) ======\n====== philosophers (scala) [default], iteration 14 started ======\nGC before operation: completed in 194.918 ms, heap usage 191.477 MB -> 180.385 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 14 completed (767.034 ms) ======\nNOTE: 'log-regression' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== log-regression (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 200.091 ms, heap usage 269.882 MB -> 192.522 MB.\n====== log-regression (apache-spark) [default], iteration 0 completed (10200.692 ms) ======\n====== log-regression (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 265.987 ms, heap usage 685.270 MB -> 272.962 MB.\n====== log-regression (apache-spark) [default], iteration 1 completed (2383.667 ms) ======\n====== log-regression (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 191.716 ms, heap usage 723.618 MB -> 273.054 MB.\n====== log-regression (apache-spark) [default], iteration 2 completed (1814.105 ms) ======\n====== log-regression (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 214.202 ms, heap usage 803.623 MB -> 273.940 MB.\n====== log-regression (apache-spark) [default], iteration 3 completed (1769.557 ms) ======\n====== log-regression (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 295.871 ms, heap usage 736.077 MB -> 273.784 MB.\n====== log-regression (apache-spark) [default], iteration 4 completed (1748.066 ms) ======\n====== log-regression (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 252.860 ms, heap usage 796.034 MB -> 274.567 MB.\n====== log-regression (apache-spark) [default], iteration 5 completed (1730.830 ms) ======\n====== log-regression (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 193.306 ms, heap usage 772.790 MB -> 274.731 MB.\n====== log-regression (apache-spark) [default], iteration 6 completed (1570.874 ms) ======\n====== log-regression (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 196.220 ms, heap usage 745.435 MB -> 274.773 MB.\n====== log-regression (apache-spark) [default], iteration 7 completed (1425.369 ms) ======\n====== log-regression (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 213.785 ms, heap usage 790.879 MB -> 275.216 MB.\n====== log-regression (apache-spark) [default], iteration 8 completed (1372.563 ms) ======\n====== log-regression (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 203.644 ms, heap usage 775.698 MB -> 275.341 MB.\n====== log-regression (apache-spark) [default], iteration 9 completed (1356.486 ms) ======\n====== log-regression (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 208.058 ms, heap usage 789.384 MB -> 275.613 MB.\n====== log-regression (apache-spark) [default], iteration 10 completed (1377.665 ms) ======\n====== log-regression (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 215.160 ms, heap usage 769.988 MB -> 275.721 MB.\n====== log-regression (apache-spark) [default], iteration 11 completed (1441.676 ms) ======\n====== log-regression (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 207.060 ms, heap usage 779.839 MB -> 275.885 MB.\n====== log-regression (apache-spark) [default], iteration 12 completed (1344.311 ms) ======\n====== log-regression (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 210.402 ms, heap usage 768.518 MB -> 276.105 MB.\n====== log-regression (apache-spark) [default], iteration 13 completed (1502.652 ms) ======\n====== log-regression (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 202.788 ms, heap usage 765.290 MB -> 276.190 MB.\n====== log-regression (apache-spark) [default], iteration 14 completed (1510.368 ms) ======\nNOTE: 'gauss-mix' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== gauss-mix (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 221.071 ms, heap usage 621.403 MB -> 212.611 MB.\nAccuracy (validation) = 0.97667 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99333 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.91556 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99444 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 0 completed (32765.783 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 226.149 ms, heap usage 448.175 MB -> 218.989 MB.\nAccuracy (validation) = 0.97667 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99333 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.91556 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99444 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 1 completed (28169.443 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 2 started ======\nGC before operation: completed in 233.916 ms, heap usage 284.299 MB -> 220.290 MB.\nAccuracy (validation) = 0.97667 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99333 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.91556 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99444 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 2 completed (26149.767 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 3 started ======\nGC before operation: completed in 236.760 ms, heap usage 516.075 MB -> 221.871 MB.\nAccuracy (validation) = 0.97667 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99333 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.91556 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99444 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 3 completed (26250.307 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 4 started ======\nGC before operation: completed in 230.692 ms, heap usage 313.653 MB -> 222.589 MB.\nAccuracy (validation) = 0.97667 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99333 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.91556 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99444 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 4 completed (24299.630 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 5 started ======\nGC before operation: completed in 239.420 ms, heap usage 604.554 MB -> 222.932 MB.\nAccuracy (validation) = 0.97667 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99333 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.91556 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99444 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 5 completed (23670.122 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 6 started ======\nGC before operation: completed in 229.737 ms, heap usage 527.090 MB -> 222.918 MB.\nAccuracy (validation) = 0.97667 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99333 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.91556 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99444 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 6 completed (19763.832 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 7 started ======\nGC before operation: completed in 236.395 ms, heap usage 270.964 MB -> 222.478 MB.\nAccuracy (validation) = 0.97667 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99333 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.91556 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99444 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 7 completed (20519.230 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 8 started ======\nGC before operation: completed in 235.480 ms, heap usage 392.699 MB -> 223.046 MB.\nAccuracy (validation) = 0.97667 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99333 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.91556 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99444 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 8 completed (19780.493 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 9 started ======\nGC before operation: completed in 228.126 ms, heap usage 389.397 MB -> 222.753 MB.\nAccuracy (validation) = 0.97667 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99333 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.91556 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99444 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 9 completed (18838.189 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 10 started ======\nGC before operation: completed in 232.057 ms, heap usage 268.377 MB -> 222.483 MB.\nAccuracy (validation) = 0.97667 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99333 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.91556 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99444 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 10 completed (25146.781 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 11 started ======\nGC before operation: completed in 233.811 ms, heap usage 385.081 MB -> 222.924 MB.\nAccuracy (validation) = 0.97667 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99333 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.91556 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99444 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 11 completed (18846.665 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 12 started ======\nGC before operation: completed in 233.190 ms, heap usage 268.234 MB -> 222.584 MB.\nAccuracy (validation) = 0.97667 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99333 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.91556 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99444 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 12 completed (22796.260 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 13 started ======\nGC before operation: completed in 236.535 ms, heap usage 508.599 MB -> 222.697 MB.\nAccuracy (validation) = 0.97667 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99333 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.91556 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99444 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 13 completed (23208.565 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 14 started ======\nGC before operation: completed in 240.926 ms, heap usage 257.352 MB -> 222.936 MB.\nAccuracy (validation) = 0.97667 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99333 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.91556 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99444 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 14 completed (19702.003 ms) ======\n====== mnemonics (functional) [default], iteration 0 started ======\nGC before operation: completed in 229.763 ms, heap usage 653.024 MB -> 215.285 MB.\n====== mnemonics (functional) [default], iteration 0 completed (4912.060 ms) ======\n====== mnemonics (functional) [default], iteration 1 started ======\nGC before operation: completed in 286.926 ms, heap usage 348.525 MB -> 212.374 MB.\n====== mnemonics (functional) [default], iteration 1 completed (4853.674 ms) ======\n====== mnemonics (functional) [default], iteration 2 started ======\nGC before operation: completed in 316.487 ms, heap usage 344.719 MB -> 212.375 MB.\n====== mnemonics (functional) [default], iteration 2 completed (4807.340 ms) ======\n====== mnemonics (functional) [default], iteration 3 started ======\nGC before operation: completed in 331.319 ms, heap usage 341.922 MB -> 212.388 MB.\n====== mnemonics (functional) [default], iteration 3 completed (4704.409 ms) ======\n====== mnemonics (functional) [default], iteration 4 started ======\nGC before operation: completed in 221.717 ms, heap usage 347.402 MB -> 212.385 MB.\n====== mnemonics (functional) [default], iteration 4 completed (4781.430 ms) ======\n====== mnemonics (functional) [default], iteration 5 started ======\nGC before operation: completed in 222.118 ms, heap usage 347.419 MB -> 211.812 MB.\n====== mnemonics (functional) [default], iteration 5 completed (4843.976 ms) ======\n====== mnemonics (functional) [default], iteration 6 started ======\nGC before operation: completed in 238.758 ms, heap usage 346.861 MB -> 211.848 MB.\n====== mnemonics (functional) [default], iteration 6 completed (4627.921 ms) ======\n====== mnemonics (functional) [default], iteration 7 started ======\nGC before operation: completed in 223.531 ms, heap usage 352.166 MB -> 211.830 MB.\n====== mnemonics (functional) [default], iteration 7 completed (4931.177 ms) ======\n====== mnemonics (functional) [default], iteration 8 started ======\nGC before operation: completed in 221.471 ms, heap usage 343.152 MB -> 211.835 MB.\n====== mnemonics (functional) [default], iteration 8 completed (4695.904 ms) ======\n====== mnemonics (functional) [default], iteration 9 started ======\nGC before operation: completed in 227.286 ms, heap usage 341.151 MB -> 211.833 MB.\n====== mnemonics (functional) [default], iteration 9 completed (4799.330 ms) ======\n====== mnemonics (functional) [default], iteration 10 started ======\nGC before operation: completed in 224.047 ms, heap usage 341.152 MB -> 211.833 MB.\n====== mnemonics (functional) [default], iteration 10 completed (4837.347 ms) ======\n====== mnemonics (functional) [default], iteration 11 started ======\nGC before operation: completed in 280.233 ms, heap usage 346.852 MB -> 211.833 MB.\n====== mnemonics (functional) [default], iteration 11 completed (4418.383 ms) ======\n====== mnemonics (functional) [default], iteration 12 started ======\nGC before operation: completed in 285.743 ms, heap usage 352.830 MB -> 210.688 MB.\n====== mnemonics (functional) [default], iteration 12 completed (4509.635 ms) ======\n====== mnemonics (functional) [default], iteration 13 started ======\nGC before operation: completed in 219.793 ms, heap usage 343.185 MB -> 210.702 MB.\n====== mnemonics (functional) [default], iteration 13 completed (4488.064 ms) ======\n====== mnemonics (functional) [default], iteration 14 started ======\nGC before operation: completed in 216.426 ms, heap usage 346.687 MB -> 210.689 MB.\n====== mnemonics (functional) [default], iteration 14 completed (4923.621 ms) ======\n====== dotty (scala) [default], iteration 0 started ======\nGC before operation: completed in 286.379 ms, heap usage 276.208 MB -> 213.304 MB.\n====== dotty (scala) [default], iteration 0 completed (14766.819 ms) ======\n====== dotty (scala) [default], iteration 1 started ======\nGC before operation: completed in 294.853 ms, heap usage 414.950 MB -> 229.993 MB.\n====== dotty (scala) [default], iteration 1 completed (5840.501 ms) ======\n====== dotty (scala) [default], iteration 2 started ======\nGC before operation: completed in 252.291 ms, heap usage 462.012 MB -> 229.984 MB.\n====== dotty (scala) [default], iteration 2 completed (4644.727 ms) ======\n====== dotty (scala) [default], iteration 3 started ======\nGC before operation: completed in 227.863 ms, heap usage 457.992 MB -> 229.999 MB.\n====== dotty (scala) [default], iteration 3 completed (4007.941 ms) ======\n====== dotty (scala) [default], iteration 4 started ======\nGC before operation: completed in 264.608 ms, heap usage 456.131 MB -> 230.003 MB.\n====== dotty (scala) [default], iteration 4 completed (3383.523 ms) ======\n====== dotty (scala) [default], iteration 5 started ======\nGC before operation: completed in 236.122 ms, heap usage 453.475 MB -> 230.005 MB.\n====== dotty (scala) [default], iteration 5 completed (3202.383 ms) ======\n====== dotty (scala) [default], iteration 6 started ======\nGC before operation: completed in 230.257 ms, heap usage 451.931 MB -> 230.013 MB.\n====== dotty (scala) [default], iteration 6 completed (3029.147 ms) ======\n====== dotty (scala) [default], iteration 7 started ======\nGC before operation: completed in 230.335 ms, heap usage 450.916 MB -> 230.036 MB.\n====== dotty (scala) [default], iteration 7 completed (2713.005 ms) ======\n====== dotty (scala) [default], iteration 8 started ======\nGC before operation: completed in 226.930 ms, heap usage 448.925 MB -> 230.032 MB.\n====== dotty (scala) [default], iteration 8 completed (2638.156 ms) ======\n====== dotty (scala) [default], iteration 9 started ======\nGC before operation: completed in 228.881 ms, heap usage 447.406 MB -> 230.053 MB.\n====== dotty (scala) [default], iteration 9 completed (2463.251 ms) ======\n====== dotty (scala) [default], iteration 10 started ======\nGC before operation: completed in 224.978 ms, heap usage 446.940 MB -> 230.041 MB.\n====== dotty (scala) [default], iteration 10 completed (2168.038 ms) ======\n====== dotty (scala) [default], iteration 11 started ======\nGC before operation: completed in 223.008 ms, heap usage 445.454 MB -> 230.049 MB.\n====== dotty (scala) [default], iteration 11 completed (2378.848 ms) ======\n====== dotty (scala) [default], iteration 12 started ======\nGC before operation: completed in 230.142 ms, heap usage 444.459 MB -> 230.049 MB.\n====== dotty (scala) [default], iteration 12 completed (2306.044 ms) ======\n====== dotty (scala) [default], iteration 13 started ======\nGC before operation: completed in 235.493 ms, heap usage 443.428 MB -> 230.079 MB.\n====== dotty (scala) [default], iteration 13 completed (1985.266 ms) ======\n====== dotty (scala) [default], iteration 14 started ======\nGC before operation: completed in 209.238 ms, heap usage 442.963 MB -> 230.084 MB.\n====== dotty (scala) [default], iteration 14 completed (1897.143 ms) ======\nMaster port: 34337\nCache ports: 40603, 33737\n====== finagle-chirper (web) [default], iteration 0 started ======\nResetting master, feed map size: 5000\nGC before operation: completed in 533.278 ms, heap usage 313.997 MB -> 223.043 MB.\n====== finagle-chirper (web) [default], iteration 0 completed (13405.769 ms) ======\n====== finagle-chirper (web) [default], iteration 1 started ======\nResetting master, feed map size: 5000\nGC before operation: completed in 378.664 ms, heap usage 570.119 MB -> 223.995 MB.\n====== finagle-chirper (web) [default], iteration 1 completed (6569.004 ms) ======\n====== finagle-chirper (web) [default], iteration 2 started ======\nResetting master, feed map size: 5000\nGC before operation: completed in 210.784 ms, heap usage 411.085 MB -> 224.100 MB.\n====== finagle-chirper (web) [default], iteration 2 completed (3658.695 ms) ======\n====== finagle-chirper (web) [default], iteration 3 started ======\nResetting master, feed map size: 5000\nGC before operation: completed in 190.674 ms, heap usage 293.098 MB -> 224.579 MB.\n====== finagle-chirper (web) [default], iteration 3 completed (3373.727 ms) ======\n====== finagle-chirper (web) [default], iteration 4 started ======\nResetting master, feed map size: 5000\nGC before operation: completed in 268.455 ms, heap usage 641.619 MB -> 223.662 MB.\n====== finagle-chirper (web) [default], iteration 4 completed (3326.246 ms) ======\n====== finagle-chirper (web) [default], iteration 5 started ======\nResetting master, feed map size: 5000\nGC before operation: completed in 277.220 ms, heap usage 605.573 MB -> 222.773 MB.\n====== finagle-chirper (web) [default], iteration 5 completed (3134.240 ms) ======\n====== finagle-chirper (web) [default], iteration 6 started ======\nResetting master, feed map size: 5000\nGC before operation: completed in 268.586 ms, heap usage 596.078 MB -> 220.804 MB.\n====== finagle-chirper (web) [default], iteration 6 completed (3217.832 ms) ======\n====== finagle-chirper (web) [default], iteration 7 started ======\nResetting master, feed map size: 5000\nGC before operation: completed in 258.128 ms, heap usage 595.682 MB -> 220.810 MB.\n====== finagle-chirper (web) [default], iteration 7 completed (3264.395 ms) ======\n====== finagle-chirper (web) [default], iteration 8 started ======\nResetting master, feed map size: 5000\nGC before operation: completed in 189.587 ms, heap usage 573.539 MB -> 220.821 MB.\n====== finagle-chirper (web) [default], iteration 8 completed (2910.089 ms) ======\n====== finagle-chirper (web) [default], iteration 9 started ======\nResetting master, feed map size: 5000\nGC before operation: completed in 224.940 ms, heap usage 575.816 MB -> 220.769 MB.\n====== finagle-chirper (web) [default], iteration 9 completed (2937.345 ms) ======\n====== finagle-chirper (web) [default], iteration 10 started ======\nResetting master, feed map size: 5000\nGC before operation: completed in 204.600 ms, heap usage 569.056 MB -> 220.783 MB.\n====== finagle-chirper (web) [default], iteration 10 completed (2883.745 ms) ======\n====== finagle-chirper (web) [default], iteration 11 started ======\nResetting master, feed map size: 5000\nGC before operation: completed in 195.209 ms, heap usage 577.991 MB -> 220.776 MB.\n====== finagle-chirper (web) [default], iteration 11 completed (2928.275 ms) ======\n====== finagle-chirper (web) [default], iteration 12 started ======\nResetting master, feed map size: 5000\nGC before operation: completed in 197.979 ms, heap usage 569.518 MB -> 221.279 MB.\n====== finagle-chirper (web) [default], iteration 12 completed (2989.815 ms) ======\n====== finagle-chirper (web) [default], iteration 13 started ======\nResetting master, feed map size: 5000\nGC before operation: completed in 203.937 ms, heap usage 570.233 MB -> 220.784 MB.\n====== finagle-chirper (web) [default], iteration 13 completed (2999.979 ms) ======\n====== finagle-chirper (web) [default], iteration 14 started ======\nResetting master, feed map size: 5000\nGC before operation: completed in 202.198 ms, heap usage 571.937 MB -> 220.805 MB.\n====== finagle-chirper (web) [default], iteration 14 completed (2938.448 ms) ======\n"
    },
    "times": [
        296729.44299999997,
        184578.203,
        166345.16,
        165405.994,
        159638.386,
        160438.517,
        152513.951,
        152538.767,
        150601.979,
        149318.523,
        154983.332,
        150848.604,
        153075.214,
        154595.044,
        150305.111
    ]
}