{
    "scrabble": {
        "times": [
            3560.185,
            2493.684
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 191.253 ms, heap usage 96.500 MB -> 75.965 MB.\n====== scrabble (functional) [default], iteration 0 completed (3560.185 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 244.046 ms, heap usage 238.482 MB -> 76.044 MB.\n====== scrabble (functional) [default], iteration 1 completed (2493.684 ms) ======\n"
    },
    "page-rank": {
        "times": [
            40014.7,
            14076.515
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 191.253 ms, heap usage 96.500 MB -> 75.965 MB.\n====== scrabble (functional) [default], iteration 0 completed (3560.185 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 244.046 ms, heap usage 238.482 MB -> 76.044 MB.\n====== scrabble (functional) [default], iteration 1 completed (2493.684 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 99.707 ms, heap usage 663.500 MB -> 29.674 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (40014.700 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 217.098 ms, heap usage 772.175 MB -> 149.103 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (14076.515 ms) ======\n"
    },
    "future-genetic": {
        "times": [
            19263.917,
            13758.726
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 191.253 ms, heap usage 96.500 MB -> 75.965 MB.\n====== scrabble (functional) [default], iteration 0 completed (3560.185 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 244.046 ms, heap usage 238.482 MB -> 76.044 MB.\n====== scrabble (functional) [default], iteration 1 completed (2493.684 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 99.707 ms, heap usage 663.500 MB -> 29.674 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (40014.700 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 217.098 ms, heap usage 772.175 MB -> 149.103 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (14076.515 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 54.827 ms, heap usage 722.287 MB -> 33.449 MB.\n====== future-genetic (functional) [default], iteration 0 completed (19263.917 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 69.327 ms, heap usage 43.523 MB -> 34.412 MB.\n====== future-genetic (functional) [default], iteration 1 completed (13758.726 ms) ======\n"
    },
    "akka-uct": {
        "times": [
            25088.817,
            17845.52
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 191.253 ms, heap usage 96.500 MB -> 75.965 MB.\n====== scrabble (functional) [default], iteration 0 completed (3560.185 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 244.046 ms, heap usage 238.482 MB -> 76.044 MB.\n====== scrabble (functional) [default], iteration 1 completed (2493.684 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 99.707 ms, heap usage 663.500 MB -> 29.674 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (40014.700 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 217.098 ms, heap usage 772.175 MB -> 149.103 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (14076.515 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 54.827 ms, heap usage 722.287 MB -> 33.449 MB.\n====== future-genetic (functional) [default], iteration 0 completed (19263.917 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 69.327 ms, heap usage 43.523 MB -> 34.412 MB.\n====== future-genetic (functional) [default], iteration 1 completed (13758.726 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 77.759 ms, heap usage 126.094 MB -> 35.223 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (25088.817 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 362.413 ms, heap usage 534.045 MB -> 126.538 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (17845.520 ms) ======\n"
    },
    "movie-lens": {
        "times": [
            27161.745,
            18352.728
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 191.253 ms, heap usage 96.500 MB -> 75.965 MB.\n====== scrabble (functional) [default], iteration 0 completed (3560.185 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 244.046 ms, heap usage 238.482 MB -> 76.044 MB.\n====== scrabble (functional) [default], iteration 1 completed (2493.684 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 99.707 ms, heap usage 663.500 MB -> 29.674 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (40014.700 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 217.098 ms, heap usage 772.175 MB -> 149.103 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (14076.515 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 54.827 ms, heap usage 722.287 MB -> 33.449 MB.\n====== future-genetic (functional) [default], iteration 0 completed (19263.917 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 69.327 ms, heap usage 43.523 MB -> 34.412 MB.\n====== future-genetic (functional) [default], iteration 1 completed (13758.726 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 77.759 ms, heap usage 126.094 MB -> 35.223 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (25088.817 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 362.413 ms, heap usage 534.045 MB -> 126.538 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (17845.520 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 2 (out of 2) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 153.630 ms, heap usage 249.379 MB -> 84.744 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (27161.745 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 137.960 ms, heap usage 163.749 MB -> 97.984 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (18352.728 ms) ======\n"
    },
    "scala-doku": {
        "times": [
            3448.281,
            2848.499
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 191.253 ms, heap usage 96.500 MB -> 75.965 MB.\n====== scrabble (functional) [default], iteration 0 completed (3560.185 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 244.046 ms, heap usage 238.482 MB -> 76.044 MB.\n====== scrabble (functional) [default], iteration 1 completed (2493.684 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 99.707 ms, heap usage 663.500 MB -> 29.674 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (40014.700 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 217.098 ms, heap usage 772.175 MB -> 149.103 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (14076.515 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 54.827 ms, heap usage 722.287 MB -> 33.449 MB.\n====== future-genetic (functional) [default], iteration 0 completed (19263.917 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 69.327 ms, heap usage 43.523 MB -> 34.412 MB.\n====== future-genetic (functional) [default], iteration 1 completed (13758.726 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 77.759 ms, heap usage 126.094 MB -> 35.223 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (25088.817 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 362.413 ms, heap usage 534.045 MB -> 126.538 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (17845.520 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 2 (out of 2) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 153.630 ms, heap usage 249.379 MB -> 84.744 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (27161.745 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 137.960 ms, heap usage 163.749 MB -> 97.984 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (18352.728 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 104.207 ms, heap usage 233.398 MB -> 57.193 MB.\n====== scala-doku (scala) [default], iteration 0 completed (3448.281 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 102.498 ms, heap usage 132.562 MB -> 57.386 MB.\n====== scala-doku (scala) [default], iteration 1 completed (2848.499 ms) ======\n"
    },
    "chi-square": {
        "times": [
            5894.506,
            2280.07
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 191.253 ms, heap usage 96.500 MB -> 75.965 MB.\n====== scrabble (functional) [default], iteration 0 completed (3560.185 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 244.046 ms, heap usage 238.482 MB -> 76.044 MB.\n====== scrabble (functional) [default], iteration 1 completed (2493.684 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 99.707 ms, heap usage 663.500 MB -> 29.674 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (40014.700 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 217.098 ms, heap usage 772.175 MB -> 149.103 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (14076.515 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 54.827 ms, heap usage 722.287 MB -> 33.449 MB.\n====== future-genetic (functional) [default], iteration 0 completed (19263.917 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 69.327 ms, heap usage 43.523 MB -> 34.412 MB.\n====== future-genetic (functional) [default], iteration 1 completed (13758.726 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 77.759 ms, heap usage 126.094 MB -> 35.223 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (25088.817 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 362.413 ms, heap usage 534.045 MB -> 126.538 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (17845.520 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 2 (out of 2) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 153.630 ms, heap usage 249.379 MB -> 84.744 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (27161.745 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 137.960 ms, heap usage 163.749 MB -> 97.984 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (18352.728 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 104.207 ms, heap usage 233.398 MB -> 57.193 MB.\n====== scala-doku (scala) [default], iteration 0 completed (3448.281 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 102.498 ms, heap usage 132.562 MB -> 57.386 MB.\n====== scala-doku (scala) [default], iteration 1 completed (2848.499 ms) ======\nNOTE: 'chi-square' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== chi-square (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 138.001 ms, heap usage 195.299 MB -> 62.614 MB.\n====== chi-square (apache-spark) [default], iteration 0 completed (5894.506 ms) ======\n====== chi-square (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 209.390 ms, heap usage 219.724 MB -> 208.633 MB.\n====== chi-square (apache-spark) [default], iteration 1 completed (2280.070 ms) ======\n"
    },
    "fj-kmeans": {
        "times": [
            11207.103,
            10484.657
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 191.253 ms, heap usage 96.500 MB -> 75.965 MB.\n====== scrabble (functional) [default], iteration 0 completed (3560.185 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 244.046 ms, heap usage 238.482 MB -> 76.044 MB.\n====== scrabble (functional) [default], iteration 1 completed (2493.684 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 99.707 ms, heap usage 663.500 MB -> 29.674 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (40014.700 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 217.098 ms, heap usage 772.175 MB -> 149.103 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (14076.515 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 54.827 ms, heap usage 722.287 MB -> 33.449 MB.\n====== future-genetic (functional) [default], iteration 0 completed (19263.917 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 69.327 ms, heap usage 43.523 MB -> 34.412 MB.\n====== future-genetic (functional) [default], iteration 1 completed (13758.726 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 77.759 ms, heap usage 126.094 MB -> 35.223 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (25088.817 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 362.413 ms, heap usage 534.045 MB -> 126.538 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (17845.520 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 2 (out of 2) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 153.630 ms, heap usage 249.379 MB -> 84.744 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (27161.745 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 137.960 ms, heap usage 163.749 MB -> 97.984 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (18352.728 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 104.207 ms, heap usage 233.398 MB -> 57.193 MB.\n====== scala-doku (scala) [default], iteration 0 completed (3448.281 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 102.498 ms, heap usage 132.562 MB -> 57.386 MB.\n====== scala-doku (scala) [default], iteration 1 completed (2848.499 ms) ======\nNOTE: 'chi-square' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== chi-square (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 138.001 ms, heap usage 195.299 MB -> 62.614 MB.\n====== chi-square (apache-spark) [default], iteration 0 completed (5894.506 ms) ======\n====== chi-square (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 209.390 ms, heap usage 219.724 MB -> 208.633 MB.\n====== chi-square (apache-spark) [default], iteration 1 completed (2280.070 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 223.785 ms, heap usage 374.614 MB -> 148.091 MB.\n====== fj-kmeans (concurrency) [default], iteration 0 completed (11207.103 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 180.338 ms, heap usage 188.855 MB -> 145.379 MB.\n====== fj-kmeans (concurrency) [default], iteration 1 completed (10484.657 ms) ======\n"
    },
    "rx-scrabble": {
        "times": [
            821.78,
            265.179
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 191.253 ms, heap usage 96.500 MB -> 75.965 MB.\n====== scrabble (functional) [default], iteration 0 completed (3560.185 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 244.046 ms, heap usage 238.482 MB -> 76.044 MB.\n====== scrabble (functional) [default], iteration 1 completed (2493.684 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 99.707 ms, heap usage 663.500 MB -> 29.674 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (40014.700 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 217.098 ms, heap usage 772.175 MB -> 149.103 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (14076.515 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 54.827 ms, heap usage 722.287 MB -> 33.449 MB.\n====== future-genetic (functional) [default], iteration 0 completed (19263.917 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 69.327 ms, heap usage 43.523 MB -> 34.412 MB.\n====== future-genetic (functional) [default], iteration 1 completed (13758.726 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 77.759 ms, heap usage 126.094 MB -> 35.223 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (25088.817 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 362.413 ms, heap usage 534.045 MB -> 126.538 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (17845.520 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 2 (out of 2) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 153.630 ms, heap usage 249.379 MB -> 84.744 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (27161.745 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 137.960 ms, heap usage 163.749 MB -> 97.984 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (18352.728 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 104.207 ms, heap usage 233.398 MB -> 57.193 MB.\n====== scala-doku (scala) [default], iteration 0 completed (3448.281 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 102.498 ms, heap usage 132.562 MB -> 57.386 MB.\n====== scala-doku (scala) [default], iteration 1 completed (2848.499 ms) ======\nNOTE: 'chi-square' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== chi-square (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 138.001 ms, heap usage 195.299 MB -> 62.614 MB.\n====== chi-square (apache-spark) [default], iteration 0 completed (5894.506 ms) ======\n====== chi-square (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 209.390 ms, heap usage 219.724 MB -> 208.633 MB.\n====== chi-square (apache-spark) [default], iteration 1 completed (2280.070 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 223.785 ms, heap usage 374.614 MB -> 148.091 MB.\n====== fj-kmeans (concurrency) [default], iteration 0 completed (11207.103 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 180.338 ms, heap usage 188.855 MB -> 145.379 MB.\n====== fj-kmeans (concurrency) [default], iteration 1 completed (10484.657 ms) ======\n====== rx-scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 150.350 ms, heap usage 151.409 MB -> 96.376 MB.\n====== rx-scrabble (functional) [default], iteration 0 completed (821.780 ms) ======\n====== rx-scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 169.949 ms, heap usage 249.376 MB -> 97.010 MB.\n====== rx-scrabble (functional) [default], iteration 1 completed (265.179 ms) ======\n"
    },
    "db-shootout": {
        "times": [
            10877.332,
            10013.218
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 191.253 ms, heap usage 96.500 MB -> 75.965 MB.\n====== scrabble (functional) [default], iteration 0 completed (3560.185 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 244.046 ms, heap usage 238.482 MB -> 76.044 MB.\n====== scrabble (functional) [default], iteration 1 completed (2493.684 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 99.707 ms, heap usage 663.500 MB -> 29.674 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (40014.700 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 217.098 ms, heap usage 772.175 MB -> 149.103 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (14076.515 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 54.827 ms, heap usage 722.287 MB -> 33.449 MB.\n====== future-genetic (functional) [default], iteration 0 completed (19263.917 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 69.327 ms, heap usage 43.523 MB -> 34.412 MB.\n====== future-genetic (functional) [default], iteration 1 completed (13758.726 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 77.759 ms, heap usage 126.094 MB -> 35.223 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (25088.817 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 362.413 ms, heap usage 534.045 MB -> 126.538 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (17845.520 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 2 (out of 2) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 153.630 ms, heap usage 249.379 MB -> 84.744 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (27161.745 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 137.960 ms, heap usage 163.749 MB -> 97.984 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (18352.728 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 104.207 ms, heap usage 233.398 MB -> 57.193 MB.\n====== scala-doku (scala) [default], iteration 0 completed (3448.281 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 102.498 ms, heap usage 132.562 MB -> 57.386 MB.\n====== scala-doku (scala) [default], iteration 1 completed (2848.499 ms) ======\nNOTE: 'chi-square' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== chi-square (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 138.001 ms, heap usage 195.299 MB -> 62.614 MB.\n====== chi-square (apache-spark) [default], iteration 0 completed (5894.506 ms) ======\n====== chi-square (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 209.390 ms, heap usage 219.724 MB -> 208.633 MB.\n====== chi-square (apache-spark) [default], iteration 1 completed (2280.070 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 223.785 ms, heap usage 374.614 MB -> 148.091 MB.\n====== fj-kmeans (concurrency) [default], iteration 0 completed (11207.103 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 180.338 ms, heap usage 188.855 MB -> 145.379 MB.\n====== fj-kmeans (concurrency) [default], iteration 1 completed (10484.657 ms) ======\n====== rx-scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 150.350 ms, heap usage 151.409 MB -> 96.376 MB.\n====== rx-scrabble (functional) [default], iteration 0 completed (821.780 ms) ======\n====== rx-scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 169.949 ms, heap usage 249.376 MB -> 97.010 MB.\n====== rx-scrabble (functional) [default], iteration 1 completed (265.179 ms) ======\n====== db-shootout (database) [default], iteration 0 started ======\nGC before operation: completed in 138.717 ms, heap usage 207.711 MB -> 99.723 MB.\n====== db-shootout (database) [default], iteration 0 completed (10877.332 ms) ======\n====== db-shootout (database) [default], iteration 1 started ======\nGC before operation: completed in 205.558 ms, heap usage 287.189 MB -> 172.127 MB.\n====== db-shootout (database) [default], iteration 1 completed (10013.218 ms) ======\n"
    },
    "finagle-http": {
        "times": [
            19726.299,
            8415.521
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 191.253 ms, heap usage 96.500 MB -> 75.965 MB.\n====== scrabble (functional) [default], iteration 0 completed (3560.185 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 244.046 ms, heap usage 238.482 MB -> 76.044 MB.\n====== scrabble (functional) [default], iteration 1 completed (2493.684 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 99.707 ms, heap usage 663.500 MB -> 29.674 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (40014.700 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 217.098 ms, heap usage 772.175 MB -> 149.103 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (14076.515 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 54.827 ms, heap usage 722.287 MB -> 33.449 MB.\n====== future-genetic (functional) [default], iteration 0 completed (19263.917 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 69.327 ms, heap usage 43.523 MB -> 34.412 MB.\n====== future-genetic (functional) [default], iteration 1 completed (13758.726 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 77.759 ms, heap usage 126.094 MB -> 35.223 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (25088.817 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 362.413 ms, heap usage 534.045 MB -> 126.538 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (17845.520 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 2 (out of 2) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 153.630 ms, heap usage 249.379 MB -> 84.744 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (27161.745 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 137.960 ms, heap usage 163.749 MB -> 97.984 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (18352.728 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 104.207 ms, heap usage 233.398 MB -> 57.193 MB.\n====== scala-doku (scala) [default], iteration 0 completed (3448.281 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 102.498 ms, heap usage 132.562 MB -> 57.386 MB.\n====== scala-doku (scala) [default], iteration 1 completed (2848.499 ms) ======\nNOTE: 'chi-square' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== chi-square (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 138.001 ms, heap usage 195.299 MB -> 62.614 MB.\n====== chi-square (apache-spark) [default], iteration 0 completed (5894.506 ms) ======\n====== chi-square (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 209.390 ms, heap usage 219.724 MB -> 208.633 MB.\n====== chi-square (apache-spark) [default], iteration 1 completed (2280.070 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 223.785 ms, heap usage 374.614 MB -> 148.091 MB.\n====== fj-kmeans (concurrency) [default], iteration 0 completed (11207.103 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 180.338 ms, heap usage 188.855 MB -> 145.379 MB.\n====== fj-kmeans (concurrency) [default], iteration 1 completed (10484.657 ms) ======\n====== rx-scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 150.350 ms, heap usage 151.409 MB -> 96.376 MB.\n====== rx-scrabble (functional) [default], iteration 0 completed (821.780 ms) ======\n====== rx-scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 169.949 ms, heap usage 249.376 MB -> 97.010 MB.\n====== rx-scrabble (functional) [default], iteration 1 completed (265.179 ms) ======\n====== db-shootout (database) [default], iteration 0 started ======\nGC before operation: completed in 138.717 ms, heap usage 207.711 MB -> 99.723 MB.\n====== db-shootout (database) [default], iteration 0 completed (10877.332 ms) ======\n====== db-shootout (database) [default], iteration 1 started ======\nGC before operation: completed in 205.558 ms, heap usage 287.189 MB -> 172.127 MB.\n====== db-shootout (database) [default], iteration 1 completed (10013.218 ms) ======\nCreating graph database...\nLoading resources...\nPopulating database...\nfinagle-http on :35857 spawning 2 client and default number of server workers.\n====== finagle-http (web) [default], iteration 0 started ======\nGC before operation: completed in 144.852 ms, heap usage 759.649 MB -> 111.324 MB.\n====== finagle-http (web) [default], iteration 0 completed (19726.299 ms) ======\n====== finagle-http (web) [default], iteration 1 started ======\nGC before operation: completed in 156.422 ms, heap usage 289.654 MB -> 113.053 MB.\n====== finagle-http (web) [default], iteration 1 completed (8415.521 ms) ======\n"
    },
    "reactors": {
        "times": [
            17091.666,
            13429.071
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 191.253 ms, heap usage 96.500 MB -> 75.965 MB.\n====== scrabble (functional) [default], iteration 0 completed (3560.185 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 244.046 ms, heap usage 238.482 MB -> 76.044 MB.\n====== scrabble (functional) [default], iteration 1 completed (2493.684 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 99.707 ms, heap usage 663.500 MB -> 29.674 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (40014.700 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 217.098 ms, heap usage 772.175 MB -> 149.103 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (14076.515 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 54.827 ms, heap usage 722.287 MB -> 33.449 MB.\n====== future-genetic (functional) [default], iteration 0 completed (19263.917 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 69.327 ms, heap usage 43.523 MB -> 34.412 MB.\n====== future-genetic (functional) [default], iteration 1 completed (13758.726 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 77.759 ms, heap usage 126.094 MB -> 35.223 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (25088.817 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 362.413 ms, heap usage 534.045 MB -> 126.538 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (17845.520 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 2 (out of 2) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 153.630 ms, heap usage 249.379 MB -> 84.744 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (27161.745 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 137.960 ms, heap usage 163.749 MB -> 97.984 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (18352.728 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 104.207 ms, heap usage 233.398 MB -> 57.193 MB.\n====== scala-doku (scala) [default], iteration 0 completed (3448.281 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 102.498 ms, heap usage 132.562 MB -> 57.386 MB.\n====== scala-doku (scala) [default], iteration 1 completed (2848.499 ms) ======\nNOTE: 'chi-square' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== chi-square (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 138.001 ms, heap usage 195.299 MB -> 62.614 MB.\n====== chi-square (apache-spark) [default], iteration 0 completed (5894.506 ms) ======\n====== chi-square (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 209.390 ms, heap usage 219.724 MB -> 208.633 MB.\n====== chi-square (apache-spark) [default], iteration 1 completed (2280.070 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 223.785 ms, heap usage 374.614 MB -> 148.091 MB.\n====== fj-kmeans (concurrency) [default], iteration 0 completed (11207.103 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 180.338 ms, heap usage 188.855 MB -> 145.379 MB.\n====== fj-kmeans (concurrency) [default], iteration 1 completed (10484.657 ms) ======\n====== rx-scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 150.350 ms, heap usage 151.409 MB -> 96.376 MB.\n====== rx-scrabble (functional) [default], iteration 0 completed (821.780 ms) ======\n====== rx-scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 169.949 ms, heap usage 249.376 MB -> 97.010 MB.\n====== rx-scrabble (functional) [default], iteration 1 completed (265.179 ms) ======\n====== db-shootout (database) [default], iteration 0 started ======\nGC before operation: completed in 138.717 ms, heap usage 207.711 MB -> 99.723 MB.\n====== db-shootout (database) [default], iteration 0 completed (10877.332 ms) ======\n====== db-shootout (database) [default], iteration 1 started ======\nGC before operation: completed in 205.558 ms, heap usage 287.189 MB -> 172.127 MB.\n====== db-shootout (database) [default], iteration 1 completed (10013.218 ms) ======\nCreating graph database...\nLoading resources...\nPopulating database...\nfinagle-http on :35857 spawning 2 client and default number of server workers.\n====== finagle-http (web) [default], iteration 0 started ======\nGC before operation: completed in 144.852 ms, heap usage 759.649 MB -> 111.324 MB.\n====== finagle-http (web) [default], iteration 0 completed (19726.299 ms) ======\n====== finagle-http (web) [default], iteration 1 started ======\nGC before operation: completed in 156.422 ms, heap usage 289.654 MB -> 113.053 MB.\n====== finagle-http (web) [default], iteration 1 completed (8415.521 ms) ======\n====== reactors (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 186.885 ms, heap usage 166.919 MB -> 114.818 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 0 completed (17091.666 ms) ======\n====== reactors (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 177.681 ms, heap usage 699.915 MB -> 116.015 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 1 completed (13429.071 ms) ======\n"
    },
    "dec-tree": {
        "times": [
            12092.498,
            3091.755
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 191.253 ms, heap usage 96.500 MB -> 75.965 MB.\n====== scrabble (functional) [default], iteration 0 completed (3560.185 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 244.046 ms, heap usage 238.482 MB -> 76.044 MB.\n====== scrabble (functional) [default], iteration 1 completed (2493.684 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 99.707 ms, heap usage 663.500 MB -> 29.674 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (40014.700 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 217.098 ms, heap usage 772.175 MB -> 149.103 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (14076.515 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 54.827 ms, heap usage 722.287 MB -> 33.449 MB.\n====== future-genetic (functional) [default], iteration 0 completed (19263.917 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 69.327 ms, heap usage 43.523 MB -> 34.412 MB.\n====== future-genetic (functional) [default], iteration 1 completed (13758.726 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 77.759 ms, heap usage 126.094 MB -> 35.223 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (25088.817 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 362.413 ms, heap usage 534.045 MB -> 126.538 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (17845.520 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 2 (out of 2) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 153.630 ms, heap usage 249.379 MB -> 84.744 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (27161.745 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 137.960 ms, heap usage 163.749 MB -> 97.984 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (18352.728 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 104.207 ms, heap usage 233.398 MB -> 57.193 MB.\n====== scala-doku (scala) [default], iteration 0 completed (3448.281 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 102.498 ms, heap usage 132.562 MB -> 57.386 MB.\n====== scala-doku (scala) [default], iteration 1 completed (2848.499 ms) ======\nNOTE: 'chi-square' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== chi-square (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 138.001 ms, heap usage 195.299 MB -> 62.614 MB.\n====== chi-square (apache-spark) [default], iteration 0 completed (5894.506 ms) ======\n====== chi-square (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 209.390 ms, heap usage 219.724 MB -> 208.633 MB.\n====== chi-square (apache-spark) [default], iteration 1 completed (2280.070 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 223.785 ms, heap usage 374.614 MB -> 148.091 MB.\n====== fj-kmeans (concurrency) [default], iteration 0 completed (11207.103 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 180.338 ms, heap usage 188.855 MB -> 145.379 MB.\n====== fj-kmeans (concurrency) [default], iteration 1 completed (10484.657 ms) ======\n====== rx-scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 150.350 ms, heap usage 151.409 MB -> 96.376 MB.\n====== rx-scrabble (functional) [default], iteration 0 completed (821.780 ms) ======\n====== rx-scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 169.949 ms, heap usage 249.376 MB -> 97.010 MB.\n====== rx-scrabble (functional) [default], iteration 1 completed (265.179 ms) ======\n====== db-shootout (database) [default], iteration 0 started ======\nGC before operation: completed in 138.717 ms, heap usage 207.711 MB -> 99.723 MB.\n====== db-shootout (database) [default], iteration 0 completed (10877.332 ms) ======\n====== db-shootout (database) [default], iteration 1 started ======\nGC before operation: completed in 205.558 ms, heap usage 287.189 MB -> 172.127 MB.\n====== db-shootout (database) [default], iteration 1 completed (10013.218 ms) ======\nCreating graph database...\nLoading resources...\nPopulating database...\nfinagle-http on :35857 spawning 2 client and default number of server workers.\n====== finagle-http (web) [default], iteration 0 started ======\nGC before operation: completed in 144.852 ms, heap usage 759.649 MB -> 111.324 MB.\n====== finagle-http (web) [default], iteration 0 completed (19726.299 ms) ======\n====== finagle-http (web) [default], iteration 1 started ======\nGC before operation: completed in 156.422 ms, heap usage 289.654 MB -> 113.053 MB.\n====== finagle-http (web) [default], iteration 1 completed (8415.521 ms) ======\n====== reactors (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 186.885 ms, heap usage 166.919 MB -> 114.818 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 0 completed (17091.666 ms) ======\n====== reactors (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 177.681 ms, heap usage 699.915 MB -> 116.015 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 1 completed (13429.071 ms) ======\nNOTE: 'dec-tree' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== dec-tree (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 151.692 ms, heap usage 214.251 MB -> 129.325 MB.\n====== dec-tree (apache-spark) [default], iteration 0 completed (12092.498 ms) ======\n====== dec-tree (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 307.824 ms, heap usage 220.070 MB -> 160.980 MB.\n====== dec-tree (apache-spark) [default], iteration 1 completed (3091.755 ms) ======\n"
    },
    "scala-stm-bench7": {
        "times": [
            2967.065,
            2464.977
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 191.253 ms, heap usage 96.500 MB -> 75.965 MB.\n====== scrabble (functional) [default], iteration 0 completed (3560.185 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 244.046 ms, heap usage 238.482 MB -> 76.044 MB.\n====== scrabble (functional) [default], iteration 1 completed (2493.684 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 99.707 ms, heap usage 663.500 MB -> 29.674 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (40014.700 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 217.098 ms, heap usage 772.175 MB -> 149.103 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (14076.515 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 54.827 ms, heap usage 722.287 MB -> 33.449 MB.\n====== future-genetic (functional) [default], iteration 0 completed (19263.917 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 69.327 ms, heap usage 43.523 MB -> 34.412 MB.\n====== future-genetic (functional) [default], iteration 1 completed (13758.726 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 77.759 ms, heap usage 126.094 MB -> 35.223 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (25088.817 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 362.413 ms, heap usage 534.045 MB -> 126.538 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (17845.520 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 2 (out of 2) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 153.630 ms, heap usage 249.379 MB -> 84.744 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (27161.745 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 137.960 ms, heap usage 163.749 MB -> 97.984 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (18352.728 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 104.207 ms, heap usage 233.398 MB -> 57.193 MB.\n====== scala-doku (scala) [default], iteration 0 completed (3448.281 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 102.498 ms, heap usage 132.562 MB -> 57.386 MB.\n====== scala-doku (scala) [default], iteration 1 completed (2848.499 ms) ======\nNOTE: 'chi-square' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== chi-square (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 138.001 ms, heap usage 195.299 MB -> 62.614 MB.\n====== chi-square (apache-spark) [default], iteration 0 completed (5894.506 ms) ======\n====== chi-square (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 209.390 ms, heap usage 219.724 MB -> 208.633 MB.\n====== chi-square (apache-spark) [default], iteration 1 completed (2280.070 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 223.785 ms, heap usage 374.614 MB -> 148.091 MB.\n====== fj-kmeans (concurrency) [default], iteration 0 completed (11207.103 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 180.338 ms, heap usage 188.855 MB -> 145.379 MB.\n====== fj-kmeans (concurrency) [default], iteration 1 completed (10484.657 ms) ======\n====== rx-scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 150.350 ms, heap usage 151.409 MB -> 96.376 MB.\n====== rx-scrabble (functional) [default], iteration 0 completed (821.780 ms) ======\n====== rx-scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 169.949 ms, heap usage 249.376 MB -> 97.010 MB.\n====== rx-scrabble (functional) [default], iteration 1 completed (265.179 ms) ======\n====== db-shootout (database) [default], iteration 0 started ======\nGC before operation: completed in 138.717 ms, heap usage 207.711 MB -> 99.723 MB.\n====== db-shootout (database) [default], iteration 0 completed (10877.332 ms) ======\n====== db-shootout (database) [default], iteration 1 started ======\nGC before operation: completed in 205.558 ms, heap usage 287.189 MB -> 172.127 MB.\n====== db-shootout (database) [default], iteration 1 completed (10013.218 ms) ======\nCreating graph database...\nLoading resources...\nPopulating database...\nfinagle-http on :35857 spawning 2 client and default number of server workers.\n====== finagle-http (web) [default], iteration 0 started ======\nGC before operation: completed in 144.852 ms, heap usage 759.649 MB -> 111.324 MB.\n====== finagle-http (web) [default], iteration 0 completed (19726.299 ms) ======\n====== finagle-http (web) [default], iteration 1 started ======\nGC before operation: completed in 156.422 ms, heap usage 289.654 MB -> 113.053 MB.\n====== finagle-http (web) [default], iteration 1 completed (8415.521 ms) ======\n====== reactors (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 186.885 ms, heap usage 166.919 MB -> 114.818 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 0 completed (17091.666 ms) ======\n====== reactors (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 177.681 ms, heap usage 699.915 MB -> 116.015 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 1 completed (13429.071 ms) ======\nNOTE: 'dec-tree' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== dec-tree (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 151.692 ms, heap usage 214.251 MB -> 129.325 MB.\n====== dec-tree (apache-spark) [default], iteration 0 completed (12092.498 ms) ======\n====== dec-tree (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 307.824 ms, heap usage 220.070 MB -> 160.980 MB.\n====== dec-tree (apache-spark) [default], iteration 1 completed (3091.755 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 0 started ======\nGC before operation: completed in 205.119 ms, heap usage 286.065 MB -> 143.537 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 688\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 32\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 6\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 9\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 13\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 13\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 7\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 7\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 9\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 12\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 4\tmaxttc = 688\tfailed = 0\ttotal = 4\nSHORT_TRAVERSAL:  successful = 6\tmaxttc = 13\tfailed = 0\ttotal = 6\nSHORT_TRAVERSAL_RO:  successful = 10\tmaxttc = 13\tfailed = 0\ttotal = 10\nOPERATION:  successful = 8\tmaxttc = 12\tfailed = 0\ttotal = 8\nOPERATION_RO:  successful = 12\tmaxttc = 9\tfailed = 0\ttotal = 12\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 51.61 op/s (51.61 op/s including failed)\nElapsed time: 0.78 s\n====== scala-stm-bench7 (scala) [default], iteration 0 completed (2967.065 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 1 started ======\nGC before operation: completed in 201.141 ms, heap usage 508.608 MB -> 143.848 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 570\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 19\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 9\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 6\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 6\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 8\tmaxttc = 688\tfailed = 0\ttotal = 8\nSHORT_TRAVERSAL:  successful = 12\tmaxttc = 13\tfailed = 0\ttotal = 12\nSHORT_TRAVERSAL_RO:  successful = 20\tmaxttc = 13\tfailed = 0\ttotal = 20\nOPERATION:  successful = 16\tmaxttc = 12\tfailed = 0\ttotal = 16\nOPERATION_RO:  successful = 24\tmaxttc = 9\tfailed = 0\ttotal = 24\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 128.00 op/s (128.00 op/s including failed)\nElapsed time: 0.63 s\n====== scala-stm-bench7 (scala) [default], iteration 1 completed (2464.977 ms) ======\n"
    },
    "naive-bayes": {
        "times": [
            47453.348,
            24642.773
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 191.253 ms, heap usage 96.500 MB -> 75.965 MB.\n====== scrabble (functional) [default], iteration 0 completed (3560.185 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 244.046 ms, heap usage 238.482 MB -> 76.044 MB.\n====== scrabble (functional) [default], iteration 1 completed (2493.684 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 99.707 ms, heap usage 663.500 MB -> 29.674 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (40014.700 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 217.098 ms, heap usage 772.175 MB -> 149.103 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (14076.515 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 54.827 ms, heap usage 722.287 MB -> 33.449 MB.\n====== future-genetic (functional) [default], iteration 0 completed (19263.917 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 69.327 ms, heap usage 43.523 MB -> 34.412 MB.\n====== future-genetic (functional) [default], iteration 1 completed (13758.726 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 77.759 ms, heap usage 126.094 MB -> 35.223 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (25088.817 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 362.413 ms, heap usage 534.045 MB -> 126.538 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (17845.520 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 2 (out of 2) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 153.630 ms, heap usage 249.379 MB -> 84.744 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (27161.745 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 137.960 ms, heap usage 163.749 MB -> 97.984 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (18352.728 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 104.207 ms, heap usage 233.398 MB -> 57.193 MB.\n====== scala-doku (scala) [default], iteration 0 completed (3448.281 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 102.498 ms, heap usage 132.562 MB -> 57.386 MB.\n====== scala-doku (scala) [default], iteration 1 completed (2848.499 ms) ======\nNOTE: 'chi-square' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== chi-square (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 138.001 ms, heap usage 195.299 MB -> 62.614 MB.\n====== chi-square (apache-spark) [default], iteration 0 completed (5894.506 ms) ======\n====== chi-square (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 209.390 ms, heap usage 219.724 MB -> 208.633 MB.\n====== chi-square (apache-spark) [default], iteration 1 completed (2280.070 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 223.785 ms, heap usage 374.614 MB -> 148.091 MB.\n====== fj-kmeans (concurrency) [default], iteration 0 completed (11207.103 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 180.338 ms, heap usage 188.855 MB -> 145.379 MB.\n====== fj-kmeans (concurrency) [default], iteration 1 completed (10484.657 ms) ======\n====== rx-scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 150.350 ms, heap usage 151.409 MB -> 96.376 MB.\n====== rx-scrabble (functional) [default], iteration 0 completed (821.780 ms) ======\n====== rx-scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 169.949 ms, heap usage 249.376 MB -> 97.010 MB.\n====== rx-scrabble (functional) [default], iteration 1 completed (265.179 ms) ======\n====== db-shootout (database) [default], iteration 0 started ======\nGC before operation: completed in 138.717 ms, heap usage 207.711 MB -> 99.723 MB.\n====== db-shootout (database) [default], iteration 0 completed (10877.332 ms) ======\n====== db-shootout (database) [default], iteration 1 started ======\nGC before operation: completed in 205.558 ms, heap usage 287.189 MB -> 172.127 MB.\n====== db-shootout (database) [default], iteration 1 completed (10013.218 ms) ======\nCreating graph database...\nLoading resources...\nPopulating database...\nfinagle-http on :35857 spawning 2 client and default number of server workers.\n====== finagle-http (web) [default], iteration 0 started ======\nGC before operation: completed in 144.852 ms, heap usage 759.649 MB -> 111.324 MB.\n====== finagle-http (web) [default], iteration 0 completed (19726.299 ms) ======\n====== finagle-http (web) [default], iteration 1 started ======\nGC before operation: completed in 156.422 ms, heap usage 289.654 MB -> 113.053 MB.\n====== finagle-http (web) [default], iteration 1 completed (8415.521 ms) ======\n====== reactors (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 186.885 ms, heap usage 166.919 MB -> 114.818 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 0 completed (17091.666 ms) ======\n====== reactors (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 177.681 ms, heap usage 699.915 MB -> 116.015 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 1 completed (13429.071 ms) ======\nNOTE: 'dec-tree' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== dec-tree (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 151.692 ms, heap usage 214.251 MB -> 129.325 MB.\n====== dec-tree (apache-spark) [default], iteration 0 completed (12092.498 ms) ======\n====== dec-tree (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 307.824 ms, heap usage 220.070 MB -> 160.980 MB.\n====== dec-tree (apache-spark) [default], iteration 1 completed (3091.755 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 0 started ======\nGC before operation: completed in 205.119 ms, heap usage 286.065 MB -> 143.537 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 688\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 32\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 6\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 9\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 13\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 13\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 7\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 7\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 9\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 12\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 4\tmaxttc = 688\tfailed = 0\ttotal = 4\nSHORT_TRAVERSAL:  successful = 6\tmaxttc = 13\tfailed = 0\ttotal = 6\nSHORT_TRAVERSAL_RO:  successful = 10\tmaxttc = 13\tfailed = 0\ttotal = 10\nOPERATION:  successful = 8\tmaxttc = 12\tfailed = 0\ttotal = 8\nOPERATION_RO:  successful = 12\tmaxttc = 9\tfailed = 0\ttotal = 12\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 51.61 op/s (51.61 op/s including failed)\nElapsed time: 0.78 s\n====== scala-stm-bench7 (scala) [default], iteration 0 completed (2967.065 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 1 started ======\nGC before operation: completed in 201.141 ms, heap usage 508.608 MB -> 143.848 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 570\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 19\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 9\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 6\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 6\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 8\tmaxttc = 688\tfailed = 0\ttotal = 8\nSHORT_TRAVERSAL:  successful = 12\tmaxttc = 13\tfailed = 0\ttotal = 12\nSHORT_TRAVERSAL_RO:  successful = 20\tmaxttc = 13\tfailed = 0\ttotal = 20\nOPERATION:  successful = 16\tmaxttc = 12\tfailed = 0\ttotal = 16\nOPERATION_RO:  successful = 24\tmaxttc = 9\tfailed = 0\ttotal = 24\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 128.00 op/s (128.00 op/s including failed)\nElapsed time: 0.63 s\n====== scala-stm-bench7 (scala) [default], iteration 1 completed (2464.977 ms) ======\nNOTE: 'naive-bayes' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== naive-bayes (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 200.159 ms, heap usage 305.238 MB -> 154.698 MB.\n====== naive-bayes (apache-spark) [default], iteration 0 completed (47453.348 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 218.181 ms, heap usage 650.418 MB -> 378.429 MB.\n====== naive-bayes (apache-spark) [default], iteration 1 completed (24642.773 ms) ======\n"
    },
    "als": {
        "times": [
            20508.285,
            10387.567
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 191.253 ms, heap usage 96.500 MB -> 75.965 MB.\n====== scrabble (functional) [default], iteration 0 completed (3560.185 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 244.046 ms, heap usage 238.482 MB -> 76.044 MB.\n====== scrabble (functional) [default], iteration 1 completed (2493.684 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 99.707 ms, heap usage 663.500 MB -> 29.674 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (40014.700 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 217.098 ms, heap usage 772.175 MB -> 149.103 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (14076.515 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 54.827 ms, heap usage 722.287 MB -> 33.449 MB.\n====== future-genetic (functional) [default], iteration 0 completed (19263.917 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 69.327 ms, heap usage 43.523 MB -> 34.412 MB.\n====== future-genetic (functional) [default], iteration 1 completed (13758.726 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 77.759 ms, heap usage 126.094 MB -> 35.223 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (25088.817 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 362.413 ms, heap usage 534.045 MB -> 126.538 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (17845.520 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 2 (out of 2) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 153.630 ms, heap usage 249.379 MB -> 84.744 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (27161.745 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 137.960 ms, heap usage 163.749 MB -> 97.984 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (18352.728 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 104.207 ms, heap usage 233.398 MB -> 57.193 MB.\n====== scala-doku (scala) [default], iteration 0 completed (3448.281 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 102.498 ms, heap usage 132.562 MB -> 57.386 MB.\n====== scala-doku (scala) [default], iteration 1 completed (2848.499 ms) ======\nNOTE: 'chi-square' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== chi-square (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 138.001 ms, heap usage 195.299 MB -> 62.614 MB.\n====== chi-square (apache-spark) [default], iteration 0 completed (5894.506 ms) ======\n====== chi-square (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 209.390 ms, heap usage 219.724 MB -> 208.633 MB.\n====== chi-square (apache-spark) [default], iteration 1 completed (2280.070 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 223.785 ms, heap usage 374.614 MB -> 148.091 MB.\n====== fj-kmeans (concurrency) [default], iteration 0 completed (11207.103 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 180.338 ms, heap usage 188.855 MB -> 145.379 MB.\n====== fj-kmeans (concurrency) [default], iteration 1 completed (10484.657 ms) ======\n====== rx-scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 150.350 ms, heap usage 151.409 MB -> 96.376 MB.\n====== rx-scrabble (functional) [default], iteration 0 completed (821.780 ms) ======\n====== rx-scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 169.949 ms, heap usage 249.376 MB -> 97.010 MB.\n====== rx-scrabble (functional) [default], iteration 1 completed (265.179 ms) ======\n====== db-shootout (database) [default], iteration 0 started ======\nGC before operation: completed in 138.717 ms, heap usage 207.711 MB -> 99.723 MB.\n====== db-shootout (database) [default], iteration 0 completed (10877.332 ms) ======\n====== db-shootout (database) [default], iteration 1 started ======\nGC before operation: completed in 205.558 ms, heap usage 287.189 MB -> 172.127 MB.\n====== db-shootout (database) [default], iteration 1 completed (10013.218 ms) ======\nCreating graph database...\nLoading resources...\nPopulating database...\nfinagle-http on :35857 spawning 2 client and default number of server workers.\n====== finagle-http (web) [default], iteration 0 started ======\nGC before operation: completed in 144.852 ms, heap usage 759.649 MB -> 111.324 MB.\n====== finagle-http (web) [default], iteration 0 completed (19726.299 ms) ======\n====== finagle-http (web) [default], iteration 1 started ======\nGC before operation: completed in 156.422 ms, heap usage 289.654 MB -> 113.053 MB.\n====== finagle-http (web) [default], iteration 1 completed (8415.521 ms) ======\n====== reactors (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 186.885 ms, heap usage 166.919 MB -> 114.818 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 0 completed (17091.666 ms) ======\n====== reactors (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 177.681 ms, heap usage 699.915 MB -> 116.015 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 1 completed (13429.071 ms) ======\nNOTE: 'dec-tree' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== dec-tree (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 151.692 ms, heap usage 214.251 MB -> 129.325 MB.\n====== dec-tree (apache-spark) [default], iteration 0 completed (12092.498 ms) ======\n====== dec-tree (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 307.824 ms, heap usage 220.070 MB -> 160.980 MB.\n====== dec-tree (apache-spark) [default], iteration 1 completed (3091.755 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 0 started ======\nGC before operation: completed in 205.119 ms, heap usage 286.065 MB -> 143.537 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 688\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 32\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 6\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 9\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 13\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 13\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 7\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 7\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 9\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 12\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 4\tmaxttc = 688\tfailed = 0\ttotal = 4\nSHORT_TRAVERSAL:  successful = 6\tmaxttc = 13\tfailed = 0\ttotal = 6\nSHORT_TRAVERSAL_RO:  successful = 10\tmaxttc = 13\tfailed = 0\ttotal = 10\nOPERATION:  successful = 8\tmaxttc = 12\tfailed = 0\ttotal = 8\nOPERATION_RO:  successful = 12\tmaxttc = 9\tfailed = 0\ttotal = 12\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 51.61 op/s (51.61 op/s including failed)\nElapsed time: 0.78 s\n====== scala-stm-bench7 (scala) [default], iteration 0 completed (2967.065 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 1 started ======\nGC before operation: completed in 201.141 ms, heap usage 508.608 MB -> 143.848 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 570\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 19\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 9\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 6\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 6\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 8\tmaxttc = 688\tfailed = 0\ttotal = 8\nSHORT_TRAVERSAL:  successful = 12\tmaxttc = 13\tfailed = 0\ttotal = 12\nSHORT_TRAVERSAL_RO:  successful = 20\tmaxttc = 13\tfailed = 0\ttotal = 20\nOPERATION:  successful = 16\tmaxttc = 12\tfailed = 0\ttotal = 16\nOPERATION_RO:  successful = 24\tmaxttc = 9\tfailed = 0\ttotal = 24\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 128.00 op/s (128.00 op/s including failed)\nElapsed time: 0.63 s\n====== scala-stm-bench7 (scala) [default], iteration 1 completed (2464.977 ms) ======\nNOTE: 'naive-bayes' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== naive-bayes (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 200.159 ms, heap usage 305.238 MB -> 154.698 MB.\n====== naive-bayes (apache-spark) [default], iteration 0 completed (47453.348 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 218.181 ms, heap usage 650.418 MB -> 378.429 MB.\n====== naive-bayes (apache-spark) [default], iteration 1 completed (24642.773 ms) ======\nNOTE: 'als' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== als (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 340.422 ms, heap usage 583.236 MB -> 176.402 MB.\n====== als (apache-spark) [default], iteration 0 completed (20508.285 ms) ======\n====== als (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 343.712 ms, heap usage 813.796 MB -> 201.083 MB.\n====== als (apache-spark) [default], iteration 1 completed (10387.567 ms) ======\n"
    },
    "par-mnemonics": {
        "times": [
            5433.868,
            5493.787
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 191.253 ms, heap usage 96.500 MB -> 75.965 MB.\n====== scrabble (functional) [default], iteration 0 completed (3560.185 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 244.046 ms, heap usage 238.482 MB -> 76.044 MB.\n====== scrabble (functional) [default], iteration 1 completed (2493.684 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 99.707 ms, heap usage 663.500 MB -> 29.674 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (40014.700 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 217.098 ms, heap usage 772.175 MB -> 149.103 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (14076.515 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 54.827 ms, heap usage 722.287 MB -> 33.449 MB.\n====== future-genetic (functional) [default], iteration 0 completed (19263.917 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 69.327 ms, heap usage 43.523 MB -> 34.412 MB.\n====== future-genetic (functional) [default], iteration 1 completed (13758.726 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 77.759 ms, heap usage 126.094 MB -> 35.223 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (25088.817 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 362.413 ms, heap usage 534.045 MB -> 126.538 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (17845.520 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 2 (out of 2) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 153.630 ms, heap usage 249.379 MB -> 84.744 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (27161.745 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 137.960 ms, heap usage 163.749 MB -> 97.984 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (18352.728 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 104.207 ms, heap usage 233.398 MB -> 57.193 MB.\n====== scala-doku (scala) [default], iteration 0 completed (3448.281 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 102.498 ms, heap usage 132.562 MB -> 57.386 MB.\n====== scala-doku (scala) [default], iteration 1 completed (2848.499 ms) ======\nNOTE: 'chi-square' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== chi-square (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 138.001 ms, heap usage 195.299 MB -> 62.614 MB.\n====== chi-square (apache-spark) [default], iteration 0 completed (5894.506 ms) ======\n====== chi-square (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 209.390 ms, heap usage 219.724 MB -> 208.633 MB.\n====== chi-square (apache-spark) [default], iteration 1 completed (2280.070 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 223.785 ms, heap usage 374.614 MB -> 148.091 MB.\n====== fj-kmeans (concurrency) [default], iteration 0 completed (11207.103 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 180.338 ms, heap usage 188.855 MB -> 145.379 MB.\n====== fj-kmeans (concurrency) [default], iteration 1 completed (10484.657 ms) ======\n====== rx-scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 150.350 ms, heap usage 151.409 MB -> 96.376 MB.\n====== rx-scrabble (functional) [default], iteration 0 completed (821.780 ms) ======\n====== rx-scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 169.949 ms, heap usage 249.376 MB -> 97.010 MB.\n====== rx-scrabble (functional) [default], iteration 1 completed (265.179 ms) ======\n====== db-shootout (database) [default], iteration 0 started ======\nGC before operation: completed in 138.717 ms, heap usage 207.711 MB -> 99.723 MB.\n====== db-shootout (database) [default], iteration 0 completed (10877.332 ms) ======\n====== db-shootout (database) [default], iteration 1 started ======\nGC before operation: completed in 205.558 ms, heap usage 287.189 MB -> 172.127 MB.\n====== db-shootout (database) [default], iteration 1 completed (10013.218 ms) ======\nCreating graph database...\nLoading resources...\nPopulating database...\nfinagle-http on :35857 spawning 2 client and default number of server workers.\n====== finagle-http (web) [default], iteration 0 started ======\nGC before operation: completed in 144.852 ms, heap usage 759.649 MB -> 111.324 MB.\n====== finagle-http (web) [default], iteration 0 completed (19726.299 ms) ======\n====== finagle-http (web) [default], iteration 1 started ======\nGC before operation: completed in 156.422 ms, heap usage 289.654 MB -> 113.053 MB.\n====== finagle-http (web) [default], iteration 1 completed (8415.521 ms) ======\n====== reactors (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 186.885 ms, heap usage 166.919 MB -> 114.818 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 0 completed (17091.666 ms) ======\n====== reactors (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 177.681 ms, heap usage 699.915 MB -> 116.015 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 1 completed (13429.071 ms) ======\nNOTE: 'dec-tree' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== dec-tree (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 151.692 ms, heap usage 214.251 MB -> 129.325 MB.\n====== dec-tree (apache-spark) [default], iteration 0 completed (12092.498 ms) ======\n====== dec-tree (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 307.824 ms, heap usage 220.070 MB -> 160.980 MB.\n====== dec-tree (apache-spark) [default], iteration 1 completed (3091.755 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 0 started ======\nGC before operation: completed in 205.119 ms, heap usage 286.065 MB -> 143.537 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 688\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 32\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 6\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 9\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 13\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 13\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 7\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 7\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 9\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 12\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 4\tmaxttc = 688\tfailed = 0\ttotal = 4\nSHORT_TRAVERSAL:  successful = 6\tmaxttc = 13\tfailed = 0\ttotal = 6\nSHORT_TRAVERSAL_RO:  successful = 10\tmaxttc = 13\tfailed = 0\ttotal = 10\nOPERATION:  successful = 8\tmaxttc = 12\tfailed = 0\ttotal = 8\nOPERATION_RO:  successful = 12\tmaxttc = 9\tfailed = 0\ttotal = 12\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 51.61 op/s (51.61 op/s including failed)\nElapsed time: 0.78 s\n====== scala-stm-bench7 (scala) [default], iteration 0 completed (2967.065 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 1 started ======\nGC before operation: completed in 201.141 ms, heap usage 508.608 MB -> 143.848 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 570\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 19\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 9\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 6\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 6\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 8\tmaxttc = 688\tfailed = 0\ttotal = 8\nSHORT_TRAVERSAL:  successful = 12\tmaxttc = 13\tfailed = 0\ttotal = 12\nSHORT_TRAVERSAL_RO:  successful = 20\tmaxttc = 13\tfailed = 0\ttotal = 20\nOPERATION:  successful = 16\tmaxttc = 12\tfailed = 0\ttotal = 16\nOPERATION_RO:  successful = 24\tmaxttc = 9\tfailed = 0\ttotal = 24\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 128.00 op/s (128.00 op/s including failed)\nElapsed time: 0.63 s\n====== scala-stm-bench7 (scala) [default], iteration 1 completed (2464.977 ms) ======\nNOTE: 'naive-bayes' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== naive-bayes (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 200.159 ms, heap usage 305.238 MB -> 154.698 MB.\n====== naive-bayes (apache-spark) [default], iteration 0 completed (47453.348 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 218.181 ms, heap usage 650.418 MB -> 378.429 MB.\n====== naive-bayes (apache-spark) [default], iteration 1 completed (24642.773 ms) ======\nNOTE: 'als' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== als (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 340.422 ms, heap usage 583.236 MB -> 176.402 MB.\n====== als (apache-spark) [default], iteration 0 completed (20508.285 ms) ======\n====== als (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 343.712 ms, heap usage 813.796 MB -> 201.083 MB.\n====== als (apache-spark) [default], iteration 1 completed (10387.567 ms) ======\n====== par-mnemonics (functional) [default], iteration 0 started ======\nGC before operation: completed in 212.525 ms, heap usage 459.381 MB -> 187.525 MB.\n====== par-mnemonics (functional) [default], iteration 0 completed (5433.868 ms) ======\n====== par-mnemonics (functional) [default], iteration 1 started ======\nGC before operation: completed in 203.588 ms, heap usage 287.713 MB -> 187.467 MB.\n====== par-mnemonics (functional) [default], iteration 1 completed (5493.787 ms) ======\n"
    },
    "scala-kmeans": {
        "times": [
            500.333,
            195.527
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 191.253 ms, heap usage 96.500 MB -> 75.965 MB.\n====== scrabble (functional) [default], iteration 0 completed (3560.185 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 244.046 ms, heap usage 238.482 MB -> 76.044 MB.\n====== scrabble (functional) [default], iteration 1 completed (2493.684 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 99.707 ms, heap usage 663.500 MB -> 29.674 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (40014.700 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 217.098 ms, heap usage 772.175 MB -> 149.103 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (14076.515 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 54.827 ms, heap usage 722.287 MB -> 33.449 MB.\n====== future-genetic (functional) [default], iteration 0 completed (19263.917 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 69.327 ms, heap usage 43.523 MB -> 34.412 MB.\n====== future-genetic (functional) [default], iteration 1 completed (13758.726 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 77.759 ms, heap usage 126.094 MB -> 35.223 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (25088.817 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 362.413 ms, heap usage 534.045 MB -> 126.538 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (17845.520 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 2 (out of 2) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 153.630 ms, heap usage 249.379 MB -> 84.744 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (27161.745 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 137.960 ms, heap usage 163.749 MB -> 97.984 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (18352.728 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 104.207 ms, heap usage 233.398 MB -> 57.193 MB.\n====== scala-doku (scala) [default], iteration 0 completed (3448.281 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 102.498 ms, heap usage 132.562 MB -> 57.386 MB.\n====== scala-doku (scala) [default], iteration 1 completed (2848.499 ms) ======\nNOTE: 'chi-square' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== chi-square (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 138.001 ms, heap usage 195.299 MB -> 62.614 MB.\n====== chi-square (apache-spark) [default], iteration 0 completed (5894.506 ms) ======\n====== chi-square (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 209.390 ms, heap usage 219.724 MB -> 208.633 MB.\n====== chi-square (apache-spark) [default], iteration 1 completed (2280.070 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 223.785 ms, heap usage 374.614 MB -> 148.091 MB.\n====== fj-kmeans (concurrency) [default], iteration 0 completed (11207.103 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 180.338 ms, heap usage 188.855 MB -> 145.379 MB.\n====== fj-kmeans (concurrency) [default], iteration 1 completed (10484.657 ms) ======\n====== rx-scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 150.350 ms, heap usage 151.409 MB -> 96.376 MB.\n====== rx-scrabble (functional) [default], iteration 0 completed (821.780 ms) ======\n====== rx-scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 169.949 ms, heap usage 249.376 MB -> 97.010 MB.\n====== rx-scrabble (functional) [default], iteration 1 completed (265.179 ms) ======\n====== db-shootout (database) [default], iteration 0 started ======\nGC before operation: completed in 138.717 ms, heap usage 207.711 MB -> 99.723 MB.\n====== db-shootout (database) [default], iteration 0 completed (10877.332 ms) ======\n====== db-shootout (database) [default], iteration 1 started ======\nGC before operation: completed in 205.558 ms, heap usage 287.189 MB -> 172.127 MB.\n====== db-shootout (database) [default], iteration 1 completed (10013.218 ms) ======\nCreating graph database...\nLoading resources...\nPopulating database...\nfinagle-http on :35857 spawning 2 client and default number of server workers.\n====== finagle-http (web) [default], iteration 0 started ======\nGC before operation: completed in 144.852 ms, heap usage 759.649 MB -> 111.324 MB.\n====== finagle-http (web) [default], iteration 0 completed (19726.299 ms) ======\n====== finagle-http (web) [default], iteration 1 started ======\nGC before operation: completed in 156.422 ms, heap usage 289.654 MB -> 113.053 MB.\n====== finagle-http (web) [default], iteration 1 completed (8415.521 ms) ======\n====== reactors (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 186.885 ms, heap usage 166.919 MB -> 114.818 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 0 completed (17091.666 ms) ======\n====== reactors (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 177.681 ms, heap usage 699.915 MB -> 116.015 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 1 completed (13429.071 ms) ======\nNOTE: 'dec-tree' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== dec-tree (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 151.692 ms, heap usage 214.251 MB -> 129.325 MB.\n====== dec-tree (apache-spark) [default], iteration 0 completed (12092.498 ms) ======\n====== dec-tree (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 307.824 ms, heap usage 220.070 MB -> 160.980 MB.\n====== dec-tree (apache-spark) [default], iteration 1 completed (3091.755 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 0 started ======\nGC before operation: completed in 205.119 ms, heap usage 286.065 MB -> 143.537 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 688\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 32\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 6\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 9\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 13\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 13\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 7\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 7\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 9\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 12\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 4\tmaxttc = 688\tfailed = 0\ttotal = 4\nSHORT_TRAVERSAL:  successful = 6\tmaxttc = 13\tfailed = 0\ttotal = 6\nSHORT_TRAVERSAL_RO:  successful = 10\tmaxttc = 13\tfailed = 0\ttotal = 10\nOPERATION:  successful = 8\tmaxttc = 12\tfailed = 0\ttotal = 8\nOPERATION_RO:  successful = 12\tmaxttc = 9\tfailed = 0\ttotal = 12\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 51.61 op/s (51.61 op/s including failed)\nElapsed time: 0.78 s\n====== scala-stm-bench7 (scala) [default], iteration 0 completed (2967.065 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 1 started ======\nGC before operation: completed in 201.141 ms, heap usage 508.608 MB -> 143.848 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 570\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 19\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 9\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 6\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 6\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 8\tmaxttc = 688\tfailed = 0\ttotal = 8\nSHORT_TRAVERSAL:  successful = 12\tmaxttc = 13\tfailed = 0\ttotal = 12\nSHORT_TRAVERSAL_RO:  successful = 20\tmaxttc = 13\tfailed = 0\ttotal = 20\nOPERATION:  successful = 16\tmaxttc = 12\tfailed = 0\ttotal = 16\nOPERATION_RO:  successful = 24\tmaxttc = 9\tfailed = 0\ttotal = 24\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 128.00 op/s (128.00 op/s including failed)\nElapsed time: 0.63 s\n====== scala-stm-bench7 (scala) [default], iteration 1 completed (2464.977 ms) ======\nNOTE: 'naive-bayes' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== naive-bayes (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 200.159 ms, heap usage 305.238 MB -> 154.698 MB.\n====== naive-bayes (apache-spark) [default], iteration 0 completed (47453.348 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 218.181 ms, heap usage 650.418 MB -> 378.429 MB.\n====== naive-bayes (apache-spark) [default], iteration 1 completed (24642.773 ms) ======\nNOTE: 'als' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== als (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 340.422 ms, heap usage 583.236 MB -> 176.402 MB.\n====== als (apache-spark) [default], iteration 0 completed (20508.285 ms) ======\n====== als (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 343.712 ms, heap usage 813.796 MB -> 201.083 MB.\n====== als (apache-spark) [default], iteration 1 completed (10387.567 ms) ======\n====== par-mnemonics (functional) [default], iteration 0 started ======\nGC before operation: completed in 212.525 ms, heap usage 459.381 MB -> 187.525 MB.\n====== par-mnemonics (functional) [default], iteration 0 completed (5433.868 ms) ======\n====== par-mnemonics (functional) [default], iteration 1 started ======\nGC before operation: completed in 203.588 ms, heap usage 287.713 MB -> 187.467 MB.\n====== par-mnemonics (functional) [default], iteration 1 completed (5493.787 ms) ======\n====== scala-kmeans (scala) [default], iteration 0 started ======\nGC before operation: completed in 281.718 ms, heap usage 351.213 MB -> 209.766 MB.\n====== scala-kmeans (scala) [default], iteration 0 completed (500.333 ms) ======\n====== scala-kmeans (scala) [default], iteration 1 started ======\nGC before operation: completed in 245.958 ms, heap usage 238.766 MB -> 209.803 MB.\n====== scala-kmeans (scala) [default], iteration 1 completed (195.527 ms) ======\n"
    },
    "philosophers": {
        "times": [
            1835.63,
            846.321
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 191.253 ms, heap usage 96.500 MB -> 75.965 MB.\n====== scrabble (functional) [default], iteration 0 completed (3560.185 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 244.046 ms, heap usage 238.482 MB -> 76.044 MB.\n====== scrabble (functional) [default], iteration 1 completed (2493.684 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 99.707 ms, heap usage 663.500 MB -> 29.674 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (40014.700 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 217.098 ms, heap usage 772.175 MB -> 149.103 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (14076.515 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 54.827 ms, heap usage 722.287 MB -> 33.449 MB.\n====== future-genetic (functional) [default], iteration 0 completed (19263.917 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 69.327 ms, heap usage 43.523 MB -> 34.412 MB.\n====== future-genetic (functional) [default], iteration 1 completed (13758.726 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 77.759 ms, heap usage 126.094 MB -> 35.223 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (25088.817 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 362.413 ms, heap usage 534.045 MB -> 126.538 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (17845.520 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 2 (out of 2) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 153.630 ms, heap usage 249.379 MB -> 84.744 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (27161.745 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 137.960 ms, heap usage 163.749 MB -> 97.984 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (18352.728 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 104.207 ms, heap usage 233.398 MB -> 57.193 MB.\n====== scala-doku (scala) [default], iteration 0 completed (3448.281 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 102.498 ms, heap usage 132.562 MB -> 57.386 MB.\n====== scala-doku (scala) [default], iteration 1 completed (2848.499 ms) ======\nNOTE: 'chi-square' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== chi-square (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 138.001 ms, heap usage 195.299 MB -> 62.614 MB.\n====== chi-square (apache-spark) [default], iteration 0 completed (5894.506 ms) ======\n====== chi-square (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 209.390 ms, heap usage 219.724 MB -> 208.633 MB.\n====== chi-square (apache-spark) [default], iteration 1 completed (2280.070 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 223.785 ms, heap usage 374.614 MB -> 148.091 MB.\n====== fj-kmeans (concurrency) [default], iteration 0 completed (11207.103 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 180.338 ms, heap usage 188.855 MB -> 145.379 MB.\n====== fj-kmeans (concurrency) [default], iteration 1 completed (10484.657 ms) ======\n====== rx-scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 150.350 ms, heap usage 151.409 MB -> 96.376 MB.\n====== rx-scrabble (functional) [default], iteration 0 completed (821.780 ms) ======\n====== rx-scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 169.949 ms, heap usage 249.376 MB -> 97.010 MB.\n====== rx-scrabble (functional) [default], iteration 1 completed (265.179 ms) ======\n====== db-shootout (database) [default], iteration 0 started ======\nGC before operation: completed in 138.717 ms, heap usage 207.711 MB -> 99.723 MB.\n====== db-shootout (database) [default], iteration 0 completed (10877.332 ms) ======\n====== db-shootout (database) [default], iteration 1 started ======\nGC before operation: completed in 205.558 ms, heap usage 287.189 MB -> 172.127 MB.\n====== db-shootout (database) [default], iteration 1 completed (10013.218 ms) ======\nCreating graph database...\nLoading resources...\nPopulating database...\nfinagle-http on :35857 spawning 2 client and default number of server workers.\n====== finagle-http (web) [default], iteration 0 started ======\nGC before operation: completed in 144.852 ms, heap usage 759.649 MB -> 111.324 MB.\n====== finagle-http (web) [default], iteration 0 completed (19726.299 ms) ======\n====== finagle-http (web) [default], iteration 1 started ======\nGC before operation: completed in 156.422 ms, heap usage 289.654 MB -> 113.053 MB.\n====== finagle-http (web) [default], iteration 1 completed (8415.521 ms) ======\n====== reactors (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 186.885 ms, heap usage 166.919 MB -> 114.818 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 0 completed (17091.666 ms) ======\n====== reactors (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 177.681 ms, heap usage 699.915 MB -> 116.015 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 1 completed (13429.071 ms) ======\nNOTE: 'dec-tree' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== dec-tree (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 151.692 ms, heap usage 214.251 MB -> 129.325 MB.\n====== dec-tree (apache-spark) [default], iteration 0 completed (12092.498 ms) ======\n====== dec-tree (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 307.824 ms, heap usage 220.070 MB -> 160.980 MB.\n====== dec-tree (apache-spark) [default], iteration 1 completed (3091.755 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 0 started ======\nGC before operation: completed in 205.119 ms, heap usage 286.065 MB -> 143.537 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 688\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 32\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 6\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 9\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 13\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 13\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 7\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 7\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 9\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 12\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 4\tmaxttc = 688\tfailed = 0\ttotal = 4\nSHORT_TRAVERSAL:  successful = 6\tmaxttc = 13\tfailed = 0\ttotal = 6\nSHORT_TRAVERSAL_RO:  successful = 10\tmaxttc = 13\tfailed = 0\ttotal = 10\nOPERATION:  successful = 8\tmaxttc = 12\tfailed = 0\ttotal = 8\nOPERATION_RO:  successful = 12\tmaxttc = 9\tfailed = 0\ttotal = 12\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 51.61 op/s (51.61 op/s including failed)\nElapsed time: 0.78 s\n====== scala-stm-bench7 (scala) [default], iteration 0 completed (2967.065 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 1 started ======\nGC before operation: completed in 201.141 ms, heap usage 508.608 MB -> 143.848 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 570\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 19\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 9\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 6\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 6\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 8\tmaxttc = 688\tfailed = 0\ttotal = 8\nSHORT_TRAVERSAL:  successful = 12\tmaxttc = 13\tfailed = 0\ttotal = 12\nSHORT_TRAVERSAL_RO:  successful = 20\tmaxttc = 13\tfailed = 0\ttotal = 20\nOPERATION:  successful = 16\tmaxttc = 12\tfailed = 0\ttotal = 16\nOPERATION_RO:  successful = 24\tmaxttc = 9\tfailed = 0\ttotal = 24\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 128.00 op/s (128.00 op/s including failed)\nElapsed time: 0.63 s\n====== scala-stm-bench7 (scala) [default], iteration 1 completed (2464.977 ms) ======\nNOTE: 'naive-bayes' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== naive-bayes (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 200.159 ms, heap usage 305.238 MB -> 154.698 MB.\n====== naive-bayes (apache-spark) [default], iteration 0 completed (47453.348 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 218.181 ms, heap usage 650.418 MB -> 378.429 MB.\n====== naive-bayes (apache-spark) [default], iteration 1 completed (24642.773 ms) ======\nNOTE: 'als' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== als (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 340.422 ms, heap usage 583.236 MB -> 176.402 MB.\n====== als (apache-spark) [default], iteration 0 completed (20508.285 ms) ======\n====== als (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 343.712 ms, heap usage 813.796 MB -> 201.083 MB.\n====== als (apache-spark) [default], iteration 1 completed (10387.567 ms) ======\n====== par-mnemonics (functional) [default], iteration 0 started ======\nGC before operation: completed in 212.525 ms, heap usage 459.381 MB -> 187.525 MB.\n====== par-mnemonics (functional) [default], iteration 0 completed (5433.868 ms) ======\n====== par-mnemonics (functional) [default], iteration 1 started ======\nGC before operation: completed in 203.588 ms, heap usage 287.713 MB -> 187.467 MB.\n====== par-mnemonics (functional) [default], iteration 1 completed (5493.787 ms) ======\n====== scala-kmeans (scala) [default], iteration 0 started ======\nGC before operation: completed in 281.718 ms, heap usage 351.213 MB -> 209.766 MB.\n====== scala-kmeans (scala) [default], iteration 0 completed (500.333 ms) ======\n====== scala-kmeans (scala) [default], iteration 1 started ======\nGC before operation: completed in 245.958 ms, heap usage 238.766 MB -> 209.803 MB.\n====== scala-kmeans (scala) [default], iteration 1 completed (195.527 ms) ======\n====== philosophers (scala) [default], iteration 0 started ======\nGC before operation: completed in 287.449 ms, heap usage 241.798 MB -> 188.804 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 0 completed (1835.630 ms) ======\n====== philosophers (scala) [default], iteration 1 started ======\nGC before operation: completed in 298.706 ms, heap usage 538.799 MB -> 188.737 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 1 completed (846.321 ms) ======\n"
    },
    "log-regression": {
        "times": [
            12205.94,
            3327.872
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 191.253 ms, heap usage 96.500 MB -> 75.965 MB.\n====== scrabble (functional) [default], iteration 0 completed (3560.185 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 244.046 ms, heap usage 238.482 MB -> 76.044 MB.\n====== scrabble (functional) [default], iteration 1 completed (2493.684 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 99.707 ms, heap usage 663.500 MB -> 29.674 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (40014.700 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 217.098 ms, heap usage 772.175 MB -> 149.103 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (14076.515 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 54.827 ms, heap usage 722.287 MB -> 33.449 MB.\n====== future-genetic (functional) [default], iteration 0 completed (19263.917 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 69.327 ms, heap usage 43.523 MB -> 34.412 MB.\n====== future-genetic (functional) [default], iteration 1 completed (13758.726 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 77.759 ms, heap usage 126.094 MB -> 35.223 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (25088.817 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 362.413 ms, heap usage 534.045 MB -> 126.538 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (17845.520 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 2 (out of 2) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 153.630 ms, heap usage 249.379 MB -> 84.744 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (27161.745 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 137.960 ms, heap usage 163.749 MB -> 97.984 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (18352.728 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 104.207 ms, heap usage 233.398 MB -> 57.193 MB.\n====== scala-doku (scala) [default], iteration 0 completed (3448.281 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 102.498 ms, heap usage 132.562 MB -> 57.386 MB.\n====== scala-doku (scala) [default], iteration 1 completed (2848.499 ms) ======\nNOTE: 'chi-square' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== chi-square (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 138.001 ms, heap usage 195.299 MB -> 62.614 MB.\n====== chi-square (apache-spark) [default], iteration 0 completed (5894.506 ms) ======\n====== chi-square (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 209.390 ms, heap usage 219.724 MB -> 208.633 MB.\n====== chi-square (apache-spark) [default], iteration 1 completed (2280.070 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 223.785 ms, heap usage 374.614 MB -> 148.091 MB.\n====== fj-kmeans (concurrency) [default], iteration 0 completed (11207.103 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 180.338 ms, heap usage 188.855 MB -> 145.379 MB.\n====== fj-kmeans (concurrency) [default], iteration 1 completed (10484.657 ms) ======\n====== rx-scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 150.350 ms, heap usage 151.409 MB -> 96.376 MB.\n====== rx-scrabble (functional) [default], iteration 0 completed (821.780 ms) ======\n====== rx-scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 169.949 ms, heap usage 249.376 MB -> 97.010 MB.\n====== rx-scrabble (functional) [default], iteration 1 completed (265.179 ms) ======\n====== db-shootout (database) [default], iteration 0 started ======\nGC before operation: completed in 138.717 ms, heap usage 207.711 MB -> 99.723 MB.\n====== db-shootout (database) [default], iteration 0 completed (10877.332 ms) ======\n====== db-shootout (database) [default], iteration 1 started ======\nGC before operation: completed in 205.558 ms, heap usage 287.189 MB -> 172.127 MB.\n====== db-shootout (database) [default], iteration 1 completed (10013.218 ms) ======\nCreating graph database...\nLoading resources...\nPopulating database...\nfinagle-http on :35857 spawning 2 client and default number of server workers.\n====== finagle-http (web) [default], iteration 0 started ======\nGC before operation: completed in 144.852 ms, heap usage 759.649 MB -> 111.324 MB.\n====== finagle-http (web) [default], iteration 0 completed (19726.299 ms) ======\n====== finagle-http (web) [default], iteration 1 started ======\nGC before operation: completed in 156.422 ms, heap usage 289.654 MB -> 113.053 MB.\n====== finagle-http (web) [default], iteration 1 completed (8415.521 ms) ======\n====== reactors (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 186.885 ms, heap usage 166.919 MB -> 114.818 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 0 completed (17091.666 ms) ======\n====== reactors (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 177.681 ms, heap usage 699.915 MB -> 116.015 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 1 completed (13429.071 ms) ======\nNOTE: 'dec-tree' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== dec-tree (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 151.692 ms, heap usage 214.251 MB -> 129.325 MB.\n====== dec-tree (apache-spark) [default], iteration 0 completed (12092.498 ms) ======\n====== dec-tree (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 307.824 ms, heap usage 220.070 MB -> 160.980 MB.\n====== dec-tree (apache-spark) [default], iteration 1 completed (3091.755 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 0 started ======\nGC before operation: completed in 205.119 ms, heap usage 286.065 MB -> 143.537 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 688\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 32\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 6\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 9\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 13\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 13\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 7\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 7\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 9\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 12\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 4\tmaxttc = 688\tfailed = 0\ttotal = 4\nSHORT_TRAVERSAL:  successful = 6\tmaxttc = 13\tfailed = 0\ttotal = 6\nSHORT_TRAVERSAL_RO:  successful = 10\tmaxttc = 13\tfailed = 0\ttotal = 10\nOPERATION:  successful = 8\tmaxttc = 12\tfailed = 0\ttotal = 8\nOPERATION_RO:  successful = 12\tmaxttc = 9\tfailed = 0\ttotal = 12\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 51.61 op/s (51.61 op/s including failed)\nElapsed time: 0.78 s\n====== scala-stm-bench7 (scala) [default], iteration 0 completed (2967.065 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 1 started ======\nGC before operation: completed in 201.141 ms, heap usage 508.608 MB -> 143.848 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 570\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 19\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 9\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 6\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 6\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 8\tmaxttc = 688\tfailed = 0\ttotal = 8\nSHORT_TRAVERSAL:  successful = 12\tmaxttc = 13\tfailed = 0\ttotal = 12\nSHORT_TRAVERSAL_RO:  successful = 20\tmaxttc = 13\tfailed = 0\ttotal = 20\nOPERATION:  successful = 16\tmaxttc = 12\tfailed = 0\ttotal = 16\nOPERATION_RO:  successful = 24\tmaxttc = 9\tfailed = 0\ttotal = 24\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 128.00 op/s (128.00 op/s including failed)\nElapsed time: 0.63 s\n====== scala-stm-bench7 (scala) [default], iteration 1 completed (2464.977 ms) ======\nNOTE: 'naive-bayes' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== naive-bayes (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 200.159 ms, heap usage 305.238 MB -> 154.698 MB.\n====== naive-bayes (apache-spark) [default], iteration 0 completed (47453.348 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 218.181 ms, heap usage 650.418 MB -> 378.429 MB.\n====== naive-bayes (apache-spark) [default], iteration 1 completed (24642.773 ms) ======\nNOTE: 'als' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== als (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 340.422 ms, heap usage 583.236 MB -> 176.402 MB.\n====== als (apache-spark) [default], iteration 0 completed (20508.285 ms) ======\n====== als (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 343.712 ms, heap usage 813.796 MB -> 201.083 MB.\n====== als (apache-spark) [default], iteration 1 completed (10387.567 ms) ======\n====== par-mnemonics (functional) [default], iteration 0 started ======\nGC before operation: completed in 212.525 ms, heap usage 459.381 MB -> 187.525 MB.\n====== par-mnemonics (functional) [default], iteration 0 completed (5433.868 ms) ======\n====== par-mnemonics (functional) [default], iteration 1 started ======\nGC before operation: completed in 203.588 ms, heap usage 287.713 MB -> 187.467 MB.\n====== par-mnemonics (functional) [default], iteration 1 completed (5493.787 ms) ======\n====== scala-kmeans (scala) [default], iteration 0 started ======\nGC before operation: completed in 281.718 ms, heap usage 351.213 MB -> 209.766 MB.\n====== scala-kmeans (scala) [default], iteration 0 completed (500.333 ms) ======\n====== scala-kmeans (scala) [default], iteration 1 started ======\nGC before operation: completed in 245.958 ms, heap usage 238.766 MB -> 209.803 MB.\n====== scala-kmeans (scala) [default], iteration 1 completed (195.527 ms) ======\n====== philosophers (scala) [default], iteration 0 started ======\nGC before operation: completed in 287.449 ms, heap usage 241.798 MB -> 188.804 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 0 completed (1835.630 ms) ======\n====== philosophers (scala) [default], iteration 1 started ======\nGC before operation: completed in 298.706 ms, heap usage 538.799 MB -> 188.737 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 1 completed (846.321 ms) ======\nNOTE: 'log-regression' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== log-regression (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 239.968 ms, heap usage 424.222 MB -> 201.142 MB.\n====== log-regression (apache-spark) [default], iteration 0 completed (12205.940 ms) ======\n====== log-regression (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 343.603 ms, heap usage 714.708 MB -> 281.076 MB.\n====== log-regression (apache-spark) [default], iteration 1 completed (3327.872 ms) ======\n"
    },
    "gauss-mix": {
        "times": [
            26173.274,
            18587.491
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 191.253 ms, heap usage 96.500 MB -> 75.965 MB.\n====== scrabble (functional) [default], iteration 0 completed (3560.185 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 244.046 ms, heap usage 238.482 MB -> 76.044 MB.\n====== scrabble (functional) [default], iteration 1 completed (2493.684 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 99.707 ms, heap usage 663.500 MB -> 29.674 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (40014.700 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 217.098 ms, heap usage 772.175 MB -> 149.103 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (14076.515 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 54.827 ms, heap usage 722.287 MB -> 33.449 MB.\n====== future-genetic (functional) [default], iteration 0 completed (19263.917 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 69.327 ms, heap usage 43.523 MB -> 34.412 MB.\n====== future-genetic (functional) [default], iteration 1 completed (13758.726 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 77.759 ms, heap usage 126.094 MB -> 35.223 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (25088.817 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 362.413 ms, heap usage 534.045 MB -> 126.538 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (17845.520 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 2 (out of 2) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 153.630 ms, heap usage 249.379 MB -> 84.744 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (27161.745 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 137.960 ms, heap usage 163.749 MB -> 97.984 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (18352.728 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 104.207 ms, heap usage 233.398 MB -> 57.193 MB.\n====== scala-doku (scala) [default], iteration 0 completed (3448.281 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 102.498 ms, heap usage 132.562 MB -> 57.386 MB.\n====== scala-doku (scala) [default], iteration 1 completed (2848.499 ms) ======\nNOTE: 'chi-square' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== chi-square (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 138.001 ms, heap usage 195.299 MB -> 62.614 MB.\n====== chi-square (apache-spark) [default], iteration 0 completed (5894.506 ms) ======\n====== chi-square (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 209.390 ms, heap usage 219.724 MB -> 208.633 MB.\n====== chi-square (apache-spark) [default], iteration 1 completed (2280.070 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 223.785 ms, heap usage 374.614 MB -> 148.091 MB.\n====== fj-kmeans (concurrency) [default], iteration 0 completed (11207.103 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 180.338 ms, heap usage 188.855 MB -> 145.379 MB.\n====== fj-kmeans (concurrency) [default], iteration 1 completed (10484.657 ms) ======\n====== rx-scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 150.350 ms, heap usage 151.409 MB -> 96.376 MB.\n====== rx-scrabble (functional) [default], iteration 0 completed (821.780 ms) ======\n====== rx-scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 169.949 ms, heap usage 249.376 MB -> 97.010 MB.\n====== rx-scrabble (functional) [default], iteration 1 completed (265.179 ms) ======\n====== db-shootout (database) [default], iteration 0 started ======\nGC before operation: completed in 138.717 ms, heap usage 207.711 MB -> 99.723 MB.\n====== db-shootout (database) [default], iteration 0 completed (10877.332 ms) ======\n====== db-shootout (database) [default], iteration 1 started ======\nGC before operation: completed in 205.558 ms, heap usage 287.189 MB -> 172.127 MB.\n====== db-shootout (database) [default], iteration 1 completed (10013.218 ms) ======\nCreating graph database...\nLoading resources...\nPopulating database...\nfinagle-http on :35857 spawning 2 client and default number of server workers.\n====== finagle-http (web) [default], iteration 0 started ======\nGC before operation: completed in 144.852 ms, heap usage 759.649 MB -> 111.324 MB.\n====== finagle-http (web) [default], iteration 0 completed (19726.299 ms) ======\n====== finagle-http (web) [default], iteration 1 started ======\nGC before operation: completed in 156.422 ms, heap usage 289.654 MB -> 113.053 MB.\n====== finagle-http (web) [default], iteration 1 completed (8415.521 ms) ======\n====== reactors (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 186.885 ms, heap usage 166.919 MB -> 114.818 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 0 completed (17091.666 ms) ======\n====== reactors (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 177.681 ms, heap usage 699.915 MB -> 116.015 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 1 completed (13429.071 ms) ======\nNOTE: 'dec-tree' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== dec-tree (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 151.692 ms, heap usage 214.251 MB -> 129.325 MB.\n====== dec-tree (apache-spark) [default], iteration 0 completed (12092.498 ms) ======\n====== dec-tree (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 307.824 ms, heap usage 220.070 MB -> 160.980 MB.\n====== dec-tree (apache-spark) [default], iteration 1 completed (3091.755 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 0 started ======\nGC before operation: completed in 205.119 ms, heap usage 286.065 MB -> 143.537 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 688\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 32\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 6\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 9\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 13\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 13\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 7\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 7\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 9\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 12\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 4\tmaxttc = 688\tfailed = 0\ttotal = 4\nSHORT_TRAVERSAL:  successful = 6\tmaxttc = 13\tfailed = 0\ttotal = 6\nSHORT_TRAVERSAL_RO:  successful = 10\tmaxttc = 13\tfailed = 0\ttotal = 10\nOPERATION:  successful = 8\tmaxttc = 12\tfailed = 0\ttotal = 8\nOPERATION_RO:  successful = 12\tmaxttc = 9\tfailed = 0\ttotal = 12\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 51.61 op/s (51.61 op/s including failed)\nElapsed time: 0.78 s\n====== scala-stm-bench7 (scala) [default], iteration 0 completed (2967.065 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 1 started ======\nGC before operation: completed in 201.141 ms, heap usage 508.608 MB -> 143.848 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 570\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 19\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 9\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 6\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 6\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 8\tmaxttc = 688\tfailed = 0\ttotal = 8\nSHORT_TRAVERSAL:  successful = 12\tmaxttc = 13\tfailed = 0\ttotal = 12\nSHORT_TRAVERSAL_RO:  successful = 20\tmaxttc = 13\tfailed = 0\ttotal = 20\nOPERATION:  successful = 16\tmaxttc = 12\tfailed = 0\ttotal = 16\nOPERATION_RO:  successful = 24\tmaxttc = 9\tfailed = 0\ttotal = 24\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 128.00 op/s (128.00 op/s including failed)\nElapsed time: 0.63 s\n====== scala-stm-bench7 (scala) [default], iteration 1 completed (2464.977 ms) ======\nNOTE: 'naive-bayes' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== naive-bayes (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 200.159 ms, heap usage 305.238 MB -> 154.698 MB.\n====== naive-bayes (apache-spark) [default], iteration 0 completed (47453.348 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 218.181 ms, heap usage 650.418 MB -> 378.429 MB.\n====== naive-bayes (apache-spark) [default], iteration 1 completed (24642.773 ms) ======\nNOTE: 'als' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== als (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 340.422 ms, heap usage 583.236 MB -> 176.402 MB.\n====== als (apache-spark) [default], iteration 0 completed (20508.285 ms) ======\n====== als (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 343.712 ms, heap usage 813.796 MB -> 201.083 MB.\n====== als (apache-spark) [default], iteration 1 completed (10387.567 ms) ======\n====== par-mnemonics (functional) [default], iteration 0 started ======\nGC before operation: completed in 212.525 ms, heap usage 459.381 MB -> 187.525 MB.\n====== par-mnemonics (functional) [default], iteration 0 completed (5433.868 ms) ======\n====== par-mnemonics (functional) [default], iteration 1 started ======\nGC before operation: completed in 203.588 ms, heap usage 287.713 MB -> 187.467 MB.\n====== par-mnemonics (functional) [default], iteration 1 completed (5493.787 ms) ======\n====== scala-kmeans (scala) [default], iteration 0 started ======\nGC before operation: completed in 281.718 ms, heap usage 351.213 MB -> 209.766 MB.\n====== scala-kmeans (scala) [default], iteration 0 completed (500.333 ms) ======\n====== scala-kmeans (scala) [default], iteration 1 started ======\nGC before operation: completed in 245.958 ms, heap usage 238.766 MB -> 209.803 MB.\n====== scala-kmeans (scala) [default], iteration 1 completed (195.527 ms) ======\n====== philosophers (scala) [default], iteration 0 started ======\nGC before operation: completed in 287.449 ms, heap usage 241.798 MB -> 188.804 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 0 completed (1835.630 ms) ======\n====== philosophers (scala) [default], iteration 1 started ======\nGC before operation: completed in 298.706 ms, heap usage 538.799 MB -> 188.737 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 1 completed (846.321 ms) ======\nNOTE: 'log-regression' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== log-regression (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 239.968 ms, heap usage 424.222 MB -> 201.142 MB.\n====== log-regression (apache-spark) [default], iteration 0 completed (12205.940 ms) ======\n====== log-regression (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 343.603 ms, heap usage 714.708 MB -> 281.076 MB.\n====== log-regression (apache-spark) [default], iteration 1 completed (3327.872 ms) ======\nNOTE: 'gauss-mix' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== gauss-mix (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 291.420 ms, heap usage 602.317 MB -> 221.711 MB.\nAccuracy (validation) = 0.97667 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99333 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.91556 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99444 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 0 completed (26173.274 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 294.224 ms, heap usage 439.012 MB -> 226.594 MB.\nAccuracy (validation) = 0.97667 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99333 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.91556 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99444 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 1 completed (18587.491 ms) ======\n"
    },
    "mnemonics": {
        "times": [
            5978.804,
            5617.437
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 191.253 ms, heap usage 96.500 MB -> 75.965 MB.\n====== scrabble (functional) [default], iteration 0 completed (3560.185 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 244.046 ms, heap usage 238.482 MB -> 76.044 MB.\n====== scrabble (functional) [default], iteration 1 completed (2493.684 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 99.707 ms, heap usage 663.500 MB -> 29.674 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (40014.700 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 217.098 ms, heap usage 772.175 MB -> 149.103 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (14076.515 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 54.827 ms, heap usage 722.287 MB -> 33.449 MB.\n====== future-genetic (functional) [default], iteration 0 completed (19263.917 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 69.327 ms, heap usage 43.523 MB -> 34.412 MB.\n====== future-genetic (functional) [default], iteration 1 completed (13758.726 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 77.759 ms, heap usage 126.094 MB -> 35.223 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (25088.817 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 362.413 ms, heap usage 534.045 MB -> 126.538 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (17845.520 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 2 (out of 2) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 153.630 ms, heap usage 249.379 MB -> 84.744 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (27161.745 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 137.960 ms, heap usage 163.749 MB -> 97.984 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (18352.728 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 104.207 ms, heap usage 233.398 MB -> 57.193 MB.\n====== scala-doku (scala) [default], iteration 0 completed (3448.281 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 102.498 ms, heap usage 132.562 MB -> 57.386 MB.\n====== scala-doku (scala) [default], iteration 1 completed (2848.499 ms) ======\nNOTE: 'chi-square' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== chi-square (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 138.001 ms, heap usage 195.299 MB -> 62.614 MB.\n====== chi-square (apache-spark) [default], iteration 0 completed (5894.506 ms) ======\n====== chi-square (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 209.390 ms, heap usage 219.724 MB -> 208.633 MB.\n====== chi-square (apache-spark) [default], iteration 1 completed (2280.070 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 223.785 ms, heap usage 374.614 MB -> 148.091 MB.\n====== fj-kmeans (concurrency) [default], iteration 0 completed (11207.103 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 180.338 ms, heap usage 188.855 MB -> 145.379 MB.\n====== fj-kmeans (concurrency) [default], iteration 1 completed (10484.657 ms) ======\n====== rx-scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 150.350 ms, heap usage 151.409 MB -> 96.376 MB.\n====== rx-scrabble (functional) [default], iteration 0 completed (821.780 ms) ======\n====== rx-scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 169.949 ms, heap usage 249.376 MB -> 97.010 MB.\n====== rx-scrabble (functional) [default], iteration 1 completed (265.179 ms) ======\n====== db-shootout (database) [default], iteration 0 started ======\nGC before operation: completed in 138.717 ms, heap usage 207.711 MB -> 99.723 MB.\n====== db-shootout (database) [default], iteration 0 completed (10877.332 ms) ======\n====== db-shootout (database) [default], iteration 1 started ======\nGC before operation: completed in 205.558 ms, heap usage 287.189 MB -> 172.127 MB.\n====== db-shootout (database) [default], iteration 1 completed (10013.218 ms) ======\nCreating graph database...\nLoading resources...\nPopulating database...\nfinagle-http on :35857 spawning 2 client and default number of server workers.\n====== finagle-http (web) [default], iteration 0 started ======\nGC before operation: completed in 144.852 ms, heap usage 759.649 MB -> 111.324 MB.\n====== finagle-http (web) [default], iteration 0 completed (19726.299 ms) ======\n====== finagle-http (web) [default], iteration 1 started ======\nGC before operation: completed in 156.422 ms, heap usage 289.654 MB -> 113.053 MB.\n====== finagle-http (web) [default], iteration 1 completed (8415.521 ms) ======\n====== reactors (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 186.885 ms, heap usage 166.919 MB -> 114.818 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 0 completed (17091.666 ms) ======\n====== reactors (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 177.681 ms, heap usage 699.915 MB -> 116.015 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 1 completed (13429.071 ms) ======\nNOTE: 'dec-tree' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== dec-tree (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 151.692 ms, heap usage 214.251 MB -> 129.325 MB.\n====== dec-tree (apache-spark) [default], iteration 0 completed (12092.498 ms) ======\n====== dec-tree (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 307.824 ms, heap usage 220.070 MB -> 160.980 MB.\n====== dec-tree (apache-spark) [default], iteration 1 completed (3091.755 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 0 started ======\nGC before operation: completed in 205.119 ms, heap usage 286.065 MB -> 143.537 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 688\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 32\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 6\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 9\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 13\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 13\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 7\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 7\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 9\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 12\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 4\tmaxttc = 688\tfailed = 0\ttotal = 4\nSHORT_TRAVERSAL:  successful = 6\tmaxttc = 13\tfailed = 0\ttotal = 6\nSHORT_TRAVERSAL_RO:  successful = 10\tmaxttc = 13\tfailed = 0\ttotal = 10\nOPERATION:  successful = 8\tmaxttc = 12\tfailed = 0\ttotal = 8\nOPERATION_RO:  successful = 12\tmaxttc = 9\tfailed = 0\ttotal = 12\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 51.61 op/s (51.61 op/s including failed)\nElapsed time: 0.78 s\n====== scala-stm-bench7 (scala) [default], iteration 0 completed (2967.065 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 1 started ======\nGC before operation: completed in 201.141 ms, heap usage 508.608 MB -> 143.848 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 570\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 19\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 9\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 6\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 6\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 8\tmaxttc = 688\tfailed = 0\ttotal = 8\nSHORT_TRAVERSAL:  successful = 12\tmaxttc = 13\tfailed = 0\ttotal = 12\nSHORT_TRAVERSAL_RO:  successful = 20\tmaxttc = 13\tfailed = 0\ttotal = 20\nOPERATION:  successful = 16\tmaxttc = 12\tfailed = 0\ttotal = 16\nOPERATION_RO:  successful = 24\tmaxttc = 9\tfailed = 0\ttotal = 24\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 128.00 op/s (128.00 op/s including failed)\nElapsed time: 0.63 s\n====== scala-stm-bench7 (scala) [default], iteration 1 completed (2464.977 ms) ======\nNOTE: 'naive-bayes' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== naive-bayes (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 200.159 ms, heap usage 305.238 MB -> 154.698 MB.\n====== naive-bayes (apache-spark) [default], iteration 0 completed (47453.348 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 218.181 ms, heap usage 650.418 MB -> 378.429 MB.\n====== naive-bayes (apache-spark) [default], iteration 1 completed (24642.773 ms) ======\nNOTE: 'als' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== als (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 340.422 ms, heap usage 583.236 MB -> 176.402 MB.\n====== als (apache-spark) [default], iteration 0 completed (20508.285 ms) ======\n====== als (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 343.712 ms, heap usage 813.796 MB -> 201.083 MB.\n====== als (apache-spark) [default], iteration 1 completed (10387.567 ms) ======\n====== par-mnemonics (functional) [default], iteration 0 started ======\nGC before operation: completed in 212.525 ms, heap usage 459.381 MB -> 187.525 MB.\n====== par-mnemonics (functional) [default], iteration 0 completed (5433.868 ms) ======\n====== par-mnemonics (functional) [default], iteration 1 started ======\nGC before operation: completed in 203.588 ms, heap usage 287.713 MB -> 187.467 MB.\n====== par-mnemonics (functional) [default], iteration 1 completed (5493.787 ms) ======\n====== scala-kmeans (scala) [default], iteration 0 started ======\nGC before operation: completed in 281.718 ms, heap usage 351.213 MB -> 209.766 MB.\n====== scala-kmeans (scala) [default], iteration 0 completed (500.333 ms) ======\n====== scala-kmeans (scala) [default], iteration 1 started ======\nGC before operation: completed in 245.958 ms, heap usage 238.766 MB -> 209.803 MB.\n====== scala-kmeans (scala) [default], iteration 1 completed (195.527 ms) ======\n====== philosophers (scala) [default], iteration 0 started ======\nGC before operation: completed in 287.449 ms, heap usage 241.798 MB -> 188.804 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 0 completed (1835.630 ms) ======\n====== philosophers (scala) [default], iteration 1 started ======\nGC before operation: completed in 298.706 ms, heap usage 538.799 MB -> 188.737 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 1 completed (846.321 ms) ======\nNOTE: 'log-regression' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== log-regression (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 239.968 ms, heap usage 424.222 MB -> 201.142 MB.\n====== log-regression (apache-spark) [default], iteration 0 completed (12205.940 ms) ======\n====== log-regression (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 343.603 ms, heap usage 714.708 MB -> 281.076 MB.\n====== log-regression (apache-spark) [default], iteration 1 completed (3327.872 ms) ======\nNOTE: 'gauss-mix' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== gauss-mix (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 291.420 ms, heap usage 602.317 MB -> 221.711 MB.\nAccuracy (validation) = 0.97667 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99333 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.91556 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99444 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 0 completed (26173.274 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 294.224 ms, heap usage 439.012 MB -> 226.594 MB.\nAccuracy (validation) = 0.97667 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99333 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.91556 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99444 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 1 completed (18587.491 ms) ======\n====== mnemonics (functional) [default], iteration 0 started ======\nGC before operation: completed in 277.501 ms, heap usage 646.331 MB -> 223.298 MB.\n====== mnemonics (functional) [default], iteration 0 completed (5978.804 ms) ======\n====== mnemonics (functional) [default], iteration 1 started ======\nGC before operation: completed in 270.050 ms, heap usage 357.660 MB -> 222.705 MB.\n====== mnemonics (functional) [default], iteration 1 completed (5617.437 ms) ======\n"
    },
    "dotty": {
        "times": [
            17269.203,
            7243.5
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 191.253 ms, heap usage 96.500 MB -> 75.965 MB.\n====== scrabble (functional) [default], iteration 0 completed (3560.185 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 244.046 ms, heap usage 238.482 MB -> 76.044 MB.\n====== scrabble (functional) [default], iteration 1 completed (2493.684 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 99.707 ms, heap usage 663.500 MB -> 29.674 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (40014.700 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 217.098 ms, heap usage 772.175 MB -> 149.103 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (14076.515 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 54.827 ms, heap usage 722.287 MB -> 33.449 MB.\n====== future-genetic (functional) [default], iteration 0 completed (19263.917 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 69.327 ms, heap usage 43.523 MB -> 34.412 MB.\n====== future-genetic (functional) [default], iteration 1 completed (13758.726 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 77.759 ms, heap usage 126.094 MB -> 35.223 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (25088.817 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 362.413 ms, heap usage 534.045 MB -> 126.538 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (17845.520 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 2 (out of 2) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 153.630 ms, heap usage 249.379 MB -> 84.744 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (27161.745 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 137.960 ms, heap usage 163.749 MB -> 97.984 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (18352.728 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 104.207 ms, heap usage 233.398 MB -> 57.193 MB.\n====== scala-doku (scala) [default], iteration 0 completed (3448.281 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 102.498 ms, heap usage 132.562 MB -> 57.386 MB.\n====== scala-doku (scala) [default], iteration 1 completed (2848.499 ms) ======\nNOTE: 'chi-square' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== chi-square (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 138.001 ms, heap usage 195.299 MB -> 62.614 MB.\n====== chi-square (apache-spark) [default], iteration 0 completed (5894.506 ms) ======\n====== chi-square (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 209.390 ms, heap usage 219.724 MB -> 208.633 MB.\n====== chi-square (apache-spark) [default], iteration 1 completed (2280.070 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 223.785 ms, heap usage 374.614 MB -> 148.091 MB.\n====== fj-kmeans (concurrency) [default], iteration 0 completed (11207.103 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 180.338 ms, heap usage 188.855 MB -> 145.379 MB.\n====== fj-kmeans (concurrency) [default], iteration 1 completed (10484.657 ms) ======\n====== rx-scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 150.350 ms, heap usage 151.409 MB -> 96.376 MB.\n====== rx-scrabble (functional) [default], iteration 0 completed (821.780 ms) ======\n====== rx-scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 169.949 ms, heap usage 249.376 MB -> 97.010 MB.\n====== rx-scrabble (functional) [default], iteration 1 completed (265.179 ms) ======\n====== db-shootout (database) [default], iteration 0 started ======\nGC before operation: completed in 138.717 ms, heap usage 207.711 MB -> 99.723 MB.\n====== db-shootout (database) [default], iteration 0 completed (10877.332 ms) ======\n====== db-shootout (database) [default], iteration 1 started ======\nGC before operation: completed in 205.558 ms, heap usage 287.189 MB -> 172.127 MB.\n====== db-shootout (database) [default], iteration 1 completed (10013.218 ms) ======\nCreating graph database...\nLoading resources...\nPopulating database...\nfinagle-http on :35857 spawning 2 client and default number of server workers.\n====== finagle-http (web) [default], iteration 0 started ======\nGC before operation: completed in 144.852 ms, heap usage 759.649 MB -> 111.324 MB.\n====== finagle-http (web) [default], iteration 0 completed (19726.299 ms) ======\n====== finagle-http (web) [default], iteration 1 started ======\nGC before operation: completed in 156.422 ms, heap usage 289.654 MB -> 113.053 MB.\n====== finagle-http (web) [default], iteration 1 completed (8415.521 ms) ======\n====== reactors (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 186.885 ms, heap usage 166.919 MB -> 114.818 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 0 completed (17091.666 ms) ======\n====== reactors (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 177.681 ms, heap usage 699.915 MB -> 116.015 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 1 completed (13429.071 ms) ======\nNOTE: 'dec-tree' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== dec-tree (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 151.692 ms, heap usage 214.251 MB -> 129.325 MB.\n====== dec-tree (apache-spark) [default], iteration 0 completed (12092.498 ms) ======\n====== dec-tree (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 307.824 ms, heap usage 220.070 MB -> 160.980 MB.\n====== dec-tree (apache-spark) [default], iteration 1 completed (3091.755 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 0 started ======\nGC before operation: completed in 205.119 ms, heap usage 286.065 MB -> 143.537 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 688\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 32\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 6\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 9\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 13\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 13\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 7\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 7\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 9\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 12\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 4\tmaxttc = 688\tfailed = 0\ttotal = 4\nSHORT_TRAVERSAL:  successful = 6\tmaxttc = 13\tfailed = 0\ttotal = 6\nSHORT_TRAVERSAL_RO:  successful = 10\tmaxttc = 13\tfailed = 0\ttotal = 10\nOPERATION:  successful = 8\tmaxttc = 12\tfailed = 0\ttotal = 8\nOPERATION_RO:  successful = 12\tmaxttc = 9\tfailed = 0\ttotal = 12\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 51.61 op/s (51.61 op/s including failed)\nElapsed time: 0.78 s\n====== scala-stm-bench7 (scala) [default], iteration 0 completed (2967.065 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 1 started ======\nGC before operation: completed in 201.141 ms, heap usage 508.608 MB -> 143.848 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 570\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 19\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 9\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 6\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 6\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 8\tmaxttc = 688\tfailed = 0\ttotal = 8\nSHORT_TRAVERSAL:  successful = 12\tmaxttc = 13\tfailed = 0\ttotal = 12\nSHORT_TRAVERSAL_RO:  successful = 20\tmaxttc = 13\tfailed = 0\ttotal = 20\nOPERATION:  successful = 16\tmaxttc = 12\tfailed = 0\ttotal = 16\nOPERATION_RO:  successful = 24\tmaxttc = 9\tfailed = 0\ttotal = 24\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 128.00 op/s (128.00 op/s including failed)\nElapsed time: 0.63 s\n====== scala-stm-bench7 (scala) [default], iteration 1 completed (2464.977 ms) ======\nNOTE: 'naive-bayes' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== naive-bayes (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 200.159 ms, heap usage 305.238 MB -> 154.698 MB.\n====== naive-bayes (apache-spark) [default], iteration 0 completed (47453.348 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 218.181 ms, heap usage 650.418 MB -> 378.429 MB.\n====== naive-bayes (apache-spark) [default], iteration 1 completed (24642.773 ms) ======\nNOTE: 'als' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== als (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 340.422 ms, heap usage 583.236 MB -> 176.402 MB.\n====== als (apache-spark) [default], iteration 0 completed (20508.285 ms) ======\n====== als (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 343.712 ms, heap usage 813.796 MB -> 201.083 MB.\n====== als (apache-spark) [default], iteration 1 completed (10387.567 ms) ======\n====== par-mnemonics (functional) [default], iteration 0 started ======\nGC before operation: completed in 212.525 ms, heap usage 459.381 MB -> 187.525 MB.\n====== par-mnemonics (functional) [default], iteration 0 completed (5433.868 ms) ======\n====== par-mnemonics (functional) [default], iteration 1 started ======\nGC before operation: completed in 203.588 ms, heap usage 287.713 MB -> 187.467 MB.\n====== par-mnemonics (functional) [default], iteration 1 completed (5493.787 ms) ======\n====== scala-kmeans (scala) [default], iteration 0 started ======\nGC before operation: completed in 281.718 ms, heap usage 351.213 MB -> 209.766 MB.\n====== scala-kmeans (scala) [default], iteration 0 completed (500.333 ms) ======\n====== scala-kmeans (scala) [default], iteration 1 started ======\nGC before operation: completed in 245.958 ms, heap usage 238.766 MB -> 209.803 MB.\n====== scala-kmeans (scala) [default], iteration 1 completed (195.527 ms) ======\n====== philosophers (scala) [default], iteration 0 started ======\nGC before operation: completed in 287.449 ms, heap usage 241.798 MB -> 188.804 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 0 completed (1835.630 ms) ======\n====== philosophers (scala) [default], iteration 1 started ======\nGC before operation: completed in 298.706 ms, heap usage 538.799 MB -> 188.737 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 1 completed (846.321 ms) ======\nNOTE: 'log-regression' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== log-regression (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 239.968 ms, heap usage 424.222 MB -> 201.142 MB.\n====== log-regression (apache-spark) [default], iteration 0 completed (12205.940 ms) ======\n====== log-regression (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 343.603 ms, heap usage 714.708 MB -> 281.076 MB.\n====== log-regression (apache-spark) [default], iteration 1 completed (3327.872 ms) ======\nNOTE: 'gauss-mix' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== gauss-mix (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 291.420 ms, heap usage 602.317 MB -> 221.711 MB.\nAccuracy (validation) = 0.97667 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99333 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.91556 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99444 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 0 completed (26173.274 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 294.224 ms, heap usage 439.012 MB -> 226.594 MB.\nAccuracy (validation) = 0.97667 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99333 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.91556 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99444 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 1 completed (18587.491 ms) ======\n====== mnemonics (functional) [default], iteration 0 started ======\nGC before operation: completed in 277.501 ms, heap usage 646.331 MB -> 223.298 MB.\n====== mnemonics (functional) [default], iteration 0 completed (5978.804 ms) ======\n====== mnemonics (functional) [default], iteration 1 started ======\nGC before operation: completed in 270.050 ms, heap usage 357.660 MB -> 222.705 MB.\n====== mnemonics (functional) [default], iteration 1 completed (5617.437 ms) ======\n====== dotty (scala) [default], iteration 0 started ======\nGC before operation: completed in 311.225 ms, heap usage 353.606 MB -> 225.291 MB.\n====== dotty (scala) [default], iteration 0 completed (17269.203 ms) ======\n====== dotty (scala) [default], iteration 1 started ======\nGC before operation: completed in 367.605 ms, heap usage 304.291 MB -> 241.888 MB.\n====== dotty (scala) [default], iteration 1 completed (7243.500 ms) ======\n"
    },
    "finagle-chirper": {
        "times": [
            14471.541,
            6874.531
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 191.253 ms, heap usage 96.500 MB -> 75.965 MB.\n====== scrabble (functional) [default], iteration 0 completed (3560.185 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 244.046 ms, heap usage 238.482 MB -> 76.044 MB.\n====== scrabble (functional) [default], iteration 1 completed (2493.684 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 99.707 ms, heap usage 663.500 MB -> 29.674 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (40014.700 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 217.098 ms, heap usage 772.175 MB -> 149.103 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (14076.515 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 54.827 ms, heap usage 722.287 MB -> 33.449 MB.\n====== future-genetic (functional) [default], iteration 0 completed (19263.917 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 69.327 ms, heap usage 43.523 MB -> 34.412 MB.\n====== future-genetic (functional) [default], iteration 1 completed (13758.726 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 77.759 ms, heap usage 126.094 MB -> 35.223 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (25088.817 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 362.413 ms, heap usage 534.045 MB -> 126.538 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (17845.520 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 2 (out of 2) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 153.630 ms, heap usage 249.379 MB -> 84.744 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (27161.745 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 137.960 ms, heap usage 163.749 MB -> 97.984 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.134092321459638 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186097961345 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112263869625 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489569306759 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743270958185 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299248067019 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8979370339906045 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701964919572.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (18352.728 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 104.207 ms, heap usage 233.398 MB -> 57.193 MB.\n====== scala-doku (scala) [default], iteration 0 completed (3448.281 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 102.498 ms, heap usage 132.562 MB -> 57.386 MB.\n====== scala-doku (scala) [default], iteration 1 completed (2848.499 ms) ======\nNOTE: 'chi-square' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== chi-square (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 138.001 ms, heap usage 195.299 MB -> 62.614 MB.\n====== chi-square (apache-spark) [default], iteration 0 completed (5894.506 ms) ======\n====== chi-square (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 209.390 ms, heap usage 219.724 MB -> 208.633 MB.\n====== chi-square (apache-spark) [default], iteration 1 completed (2280.070 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 223.785 ms, heap usage 374.614 MB -> 148.091 MB.\n====== fj-kmeans (concurrency) [default], iteration 0 completed (11207.103 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 180.338 ms, heap usage 188.855 MB -> 145.379 MB.\n====== fj-kmeans (concurrency) [default], iteration 1 completed (10484.657 ms) ======\n====== rx-scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 150.350 ms, heap usage 151.409 MB -> 96.376 MB.\n====== rx-scrabble (functional) [default], iteration 0 completed (821.780 ms) ======\n====== rx-scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 169.949 ms, heap usage 249.376 MB -> 97.010 MB.\n====== rx-scrabble (functional) [default], iteration 1 completed (265.179 ms) ======\n====== db-shootout (database) [default], iteration 0 started ======\nGC before operation: completed in 138.717 ms, heap usage 207.711 MB -> 99.723 MB.\n====== db-shootout (database) [default], iteration 0 completed (10877.332 ms) ======\n====== db-shootout (database) [default], iteration 1 started ======\nGC before operation: completed in 205.558 ms, heap usage 287.189 MB -> 172.127 MB.\n====== db-shootout (database) [default], iteration 1 completed (10013.218 ms) ======\nCreating graph database...\nLoading resources...\nPopulating database...\nfinagle-http on :35857 spawning 2 client and default number of server workers.\n====== finagle-http (web) [default], iteration 0 started ======\nGC before operation: completed in 144.852 ms, heap usage 759.649 MB -> 111.324 MB.\n====== finagle-http (web) [default], iteration 0 completed (19726.299 ms) ======\n====== finagle-http (web) [default], iteration 1 started ======\nGC before operation: completed in 156.422 ms, heap usage 289.654 MB -> 113.053 MB.\n====== finagle-http (web) [default], iteration 1 completed (8415.521 ms) ======\n====== reactors (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 186.885 ms, heap usage 166.919 MB -> 114.818 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 0 completed (17091.666 ms) ======\n====== reactors (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 177.681 ms, heap usage 699.915 MB -> 116.015 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 1 completed (13429.071 ms) ======\nNOTE: 'dec-tree' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== dec-tree (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 151.692 ms, heap usage 214.251 MB -> 129.325 MB.\n====== dec-tree (apache-spark) [default], iteration 0 completed (12092.498 ms) ======\n====== dec-tree (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 307.824 ms, heap usage 220.070 MB -> 160.980 MB.\n====== dec-tree (apache-spark) [default], iteration 1 completed (3091.755 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 0 started ======\nGC before operation: completed in 205.119 ms, heap usage 286.065 MB -> 143.537 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 688\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 32\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 6\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 9\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 13\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 13\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 7\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 7\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 9\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 12\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 4\tmaxttc = 688\tfailed = 0\ttotal = 4\nSHORT_TRAVERSAL:  successful = 6\tmaxttc = 13\tfailed = 0\ttotal = 6\nSHORT_TRAVERSAL_RO:  successful = 10\tmaxttc = 13\tfailed = 0\ttotal = 10\nOPERATION:  successful = 8\tmaxttc = 12\tfailed = 0\ttotal = 8\nOPERATION_RO:  successful = 12\tmaxttc = 9\tfailed = 0\ttotal = 12\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 51.61 op/s (51.61 op/s including failed)\nElapsed time: 0.78 s\n====== scala-stm-bench7 (scala) [default], iteration 0 completed (2967.065 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 1 started ======\nGC before operation: completed in 201.141 ms, heap usage 508.608 MB -> 143.848 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 570\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 19\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 9\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 6\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 6\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 8\tmaxttc = 688\tfailed = 0\ttotal = 8\nSHORT_TRAVERSAL:  successful = 12\tmaxttc = 13\tfailed = 0\ttotal = 12\nSHORT_TRAVERSAL_RO:  successful = 20\tmaxttc = 13\tfailed = 0\ttotal = 20\nOPERATION:  successful = 16\tmaxttc = 12\tfailed = 0\ttotal = 16\nOPERATION_RO:  successful = 24\tmaxttc = 9\tfailed = 0\ttotal = 24\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 128.00 op/s (128.00 op/s including failed)\nElapsed time: 0.63 s\n====== scala-stm-bench7 (scala) [default], iteration 1 completed (2464.977 ms) ======\nNOTE: 'naive-bayes' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== naive-bayes (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 200.159 ms, heap usage 305.238 MB -> 154.698 MB.\n====== naive-bayes (apache-spark) [default], iteration 0 completed (47453.348 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 218.181 ms, heap usage 650.418 MB -> 378.429 MB.\n====== naive-bayes (apache-spark) [default], iteration 1 completed (24642.773 ms) ======\nNOTE: 'als' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== als (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 340.422 ms, heap usage 583.236 MB -> 176.402 MB.\n====== als (apache-spark) [default], iteration 0 completed (20508.285 ms) ======\n====== als (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 343.712 ms, heap usage 813.796 MB -> 201.083 MB.\n====== als (apache-spark) [default], iteration 1 completed (10387.567 ms) ======\n====== par-mnemonics (functional) [default], iteration 0 started ======\nGC before operation: completed in 212.525 ms, heap usage 459.381 MB -> 187.525 MB.\n====== par-mnemonics (functional) [default], iteration 0 completed (5433.868 ms) ======\n====== par-mnemonics (functional) [default], iteration 1 started ======\nGC before operation: completed in 203.588 ms, heap usage 287.713 MB -> 187.467 MB.\n====== par-mnemonics (functional) [default], iteration 1 completed (5493.787 ms) ======\n====== scala-kmeans (scala) [default], iteration 0 started ======\nGC before operation: completed in 281.718 ms, heap usage 351.213 MB -> 209.766 MB.\n====== scala-kmeans (scala) [default], iteration 0 completed (500.333 ms) ======\n====== scala-kmeans (scala) [default], iteration 1 started ======\nGC before operation: completed in 245.958 ms, heap usage 238.766 MB -> 209.803 MB.\n====== scala-kmeans (scala) [default], iteration 1 completed (195.527 ms) ======\n====== philosophers (scala) [default], iteration 0 started ======\nGC before operation: completed in 287.449 ms, heap usage 241.798 MB -> 188.804 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 0 completed (1835.630 ms) ======\n====== philosophers (scala) [default], iteration 1 started ======\nGC before operation: completed in 298.706 ms, heap usage 538.799 MB -> 188.737 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 1 completed (846.321 ms) ======\nNOTE: 'log-regression' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== log-regression (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 239.968 ms, heap usage 424.222 MB -> 201.142 MB.\n====== log-regression (apache-spark) [default], iteration 0 completed (12205.940 ms) ======\n====== log-regression (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 343.603 ms, heap usage 714.708 MB -> 281.076 MB.\n====== log-regression (apache-spark) [default], iteration 1 completed (3327.872 ms) ======\nNOTE: 'gauss-mix' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== gauss-mix (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 291.420 ms, heap usage 602.317 MB -> 221.711 MB.\nAccuracy (validation) = 0.97667 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99333 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.91556 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99444 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 0 completed (26173.274 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 294.224 ms, heap usage 439.012 MB -> 226.594 MB.\nAccuracy (validation) = 0.97667 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99333 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.91556 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99444 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 1 completed (18587.491 ms) ======\n====== mnemonics (functional) [default], iteration 0 started ======\nGC before operation: completed in 277.501 ms, heap usage 646.331 MB -> 223.298 MB.\n====== mnemonics (functional) [default], iteration 0 completed (5978.804 ms) ======\n====== mnemonics (functional) [default], iteration 1 started ======\nGC before operation: completed in 270.050 ms, heap usage 357.660 MB -> 222.705 MB.\n====== mnemonics (functional) [default], iteration 1 completed (5617.437 ms) ======\n====== dotty (scala) [default], iteration 0 started ======\nGC before operation: completed in 311.225 ms, heap usage 353.606 MB -> 225.291 MB.\n====== dotty (scala) [default], iteration 0 completed (17269.203 ms) ======\n====== dotty (scala) [default], iteration 1 started ======\nGC before operation: completed in 367.605 ms, heap usage 304.291 MB -> 241.888 MB.\n====== dotty (scala) [default], iteration 1 completed (7243.500 ms) ======\nMaster port: 42517\nCache ports: 36473, 41183\n====== finagle-chirper (web) [default], iteration 0 started ======\nResetting master, feed map size: 5000\nGC before operation: completed in 544.448 ms, heap usage 318.373 MB -> 234.991 MB.\n====== finagle-chirper (web) [default], iteration 0 completed (14471.541 ms) ======\n====== finagle-chirper (web) [default], iteration 1 started ======\nResetting master, feed map size: 5000\nGC before operation: completed in 503.626 ms, heap usage 454.226 MB -> 235.816 MB.\n====== finagle-chirper (web) [default], iteration 1 completed (6874.531 ms) ======\n"
    },
    "times": [
        351046.12,
        203036.926
    ]
}