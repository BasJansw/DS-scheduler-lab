{
    "scrabble": {
        "times": [
            1325.948,
            616.1
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 102.504 ms, heap usage 148.000 MB -> 75.908 MB.\n====== scrabble (functional) [default], iteration 0 completed (1325.948 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 88.050 ms, heap usage 323.286 MB -> 75.986 MB.\n====== scrabble (functional) [default], iteration 1 completed (616.100 ms) ======\n"
    },
    "page-rank": {
        "times": [
            19682.231,
            11144.73
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 102.504 ms, heap usage 148.000 MB -> 75.908 MB.\n====== scrabble (functional) [default], iteration 0 completed (1325.948 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 88.050 ms, heap usage 323.286 MB -> 75.986 MB.\n====== scrabble (functional) [default], iteration 1 completed (616.100 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 27.981 ms, heap usage 647.500 MB -> 29.629 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (19682.231 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 148.599 ms, heap usage 636.551 MB -> 148.832 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (11144.730 ms) ======\n"
    },
    "future-genetic": {
        "times": [
            9272.502,
            6467.272
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 102.504 ms, heap usage 148.000 MB -> 75.908 MB.\n====== scrabble (functional) [default], iteration 0 completed (1325.948 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 88.050 ms, heap usage 323.286 MB -> 75.986 MB.\n====== scrabble (functional) [default], iteration 1 completed (616.100 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 27.981 ms, heap usage 647.500 MB -> 29.629 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (19682.231 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 148.599 ms, heap usage 636.551 MB -> 148.832 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (11144.730 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 29.648 ms, heap usage 412.984 MB -> 33.579 MB.\n====== future-genetic (functional) [default], iteration 0 completed (9272.502 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 34.018 ms, heap usage 192.031 MB -> 34.354 MB.\n====== future-genetic (functional) [default], iteration 1 completed (6467.272 ms) ======\n"
    },
    "akka-uct": {
        "times": [
            17557.505,
            14029.363
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 102.504 ms, heap usage 148.000 MB -> 75.908 MB.\n====== scrabble (functional) [default], iteration 0 completed (1325.948 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 88.050 ms, heap usage 323.286 MB -> 75.986 MB.\n====== scrabble (functional) [default], iteration 1 completed (616.100 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 27.981 ms, heap usage 647.500 MB -> 29.629 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (19682.231 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 148.599 ms, heap usage 636.551 MB -> 148.832 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (11144.730 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 29.648 ms, heap usage 412.984 MB -> 33.579 MB.\n====== future-genetic (functional) [default], iteration 0 completed (9272.502 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 34.018 ms, heap usage 192.031 MB -> 34.354 MB.\n====== future-genetic (functional) [default], iteration 1 completed (6467.272 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 59.891 ms, heap usage 79.097 MB -> 35.249 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (17557.505 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 86.265 ms, heap usage 373.843 MB -> 66.974 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (14029.363 ms) ======\n"
    },
    "movie-lens": {
        "times": [
            20344.672,
            13437.705
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 102.504 ms, heap usage 148.000 MB -> 75.908 MB.\n====== scrabble (functional) [default], iteration 0 completed (1325.948 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 88.050 ms, heap usage 323.286 MB -> 75.986 MB.\n====== scrabble (functional) [default], iteration 1 completed (616.100 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 27.981 ms, heap usage 647.500 MB -> 29.629 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (19682.231 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 148.599 ms, heap usage 636.551 MB -> 148.832 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (11144.730 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 29.648 ms, heap usage 412.984 MB -> 33.579 MB.\n====== future-genetic (functional) [default], iteration 0 completed (9272.502 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 34.018 ms, heap usage 192.031 MB -> 34.354 MB.\n====== future-genetic (functional) [default], iteration 1 completed (6467.272 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 59.891 ms, heap usage 79.097 MB -> 35.249 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (17557.505 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 86.265 ms, heap usage 373.843 MB -> 66.974 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (14029.363 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 2 (out of 2) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 137.156 ms, heap usage 194.539 MB -> 88.683 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923222022363 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186103233526 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112280854148 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489559965613 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743266133333 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299259573378 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.897937035152542 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701958880671.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (20344.672 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 121.576 ms, heap usage 172.394 MB -> 104.696 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923222022363 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186103233526 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112280854148 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489559965613 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743266133333 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299259573378 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.897937035152542 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701958880671.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (13437.705 ms) ======\n"
    },
    "scala-doku": {
        "times": [
            3772.61,
            3181.526
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 102.504 ms, heap usage 148.000 MB -> 75.908 MB.\n====== scrabble (functional) [default], iteration 0 completed (1325.948 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 88.050 ms, heap usage 323.286 MB -> 75.986 MB.\n====== scrabble (functional) [default], iteration 1 completed (616.100 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 27.981 ms, heap usage 647.500 MB -> 29.629 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (19682.231 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 148.599 ms, heap usage 636.551 MB -> 148.832 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (11144.730 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 29.648 ms, heap usage 412.984 MB -> 33.579 MB.\n====== future-genetic (functional) [default], iteration 0 completed (9272.502 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 34.018 ms, heap usage 192.031 MB -> 34.354 MB.\n====== future-genetic (functional) [default], iteration 1 completed (6467.272 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 59.891 ms, heap usage 79.097 MB -> 35.249 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (17557.505 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 86.265 ms, heap usage 373.843 MB -> 66.974 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (14029.363 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 2 (out of 2) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 137.156 ms, heap usage 194.539 MB -> 88.683 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923222022363 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186103233526 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112280854148 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489559965613 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743266133333 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299259573378 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.897937035152542 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701958880671.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (20344.672 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 121.576 ms, heap usage 172.394 MB -> 104.696 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923222022363 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186103233526 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112280854148 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489559965613 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743266133333 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299259573378 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.897937035152542 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701958880671.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (13437.705 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 71.361 ms, heap usage 401.691 MB -> 61.235 MB.\n====== scala-doku (scala) [default], iteration 0 completed (3772.610 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 75.123 ms, heap usage 138.735 MB -> 61.274 MB.\n====== scala-doku (scala) [default], iteration 1 completed (3181.526 ms) ======\n"
    },
    "chi-square": {
        "times": [
            4336.2,
            1061.151
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 102.504 ms, heap usage 148.000 MB -> 75.908 MB.\n====== scrabble (functional) [default], iteration 0 completed (1325.948 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 88.050 ms, heap usage 323.286 MB -> 75.986 MB.\n====== scrabble (functional) [default], iteration 1 completed (616.100 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 27.981 ms, heap usage 647.500 MB -> 29.629 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (19682.231 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 148.599 ms, heap usage 636.551 MB -> 148.832 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (11144.730 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 29.648 ms, heap usage 412.984 MB -> 33.579 MB.\n====== future-genetic (functional) [default], iteration 0 completed (9272.502 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 34.018 ms, heap usage 192.031 MB -> 34.354 MB.\n====== future-genetic (functional) [default], iteration 1 completed (6467.272 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 59.891 ms, heap usage 79.097 MB -> 35.249 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (17557.505 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 86.265 ms, heap usage 373.843 MB -> 66.974 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (14029.363 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 2 (out of 2) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 137.156 ms, heap usage 194.539 MB -> 88.683 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923222022363 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186103233526 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112280854148 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489559965613 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743266133333 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299259573378 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.897937035152542 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701958880671.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (20344.672 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 121.576 ms, heap usage 172.394 MB -> 104.696 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923222022363 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186103233526 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112280854148 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489559965613 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743266133333 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299259573378 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.897937035152542 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701958880671.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (13437.705 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 71.361 ms, heap usage 401.691 MB -> 61.235 MB.\n====== scala-doku (scala) [default], iteration 0 completed (3772.610 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 75.123 ms, heap usage 138.735 MB -> 61.274 MB.\n====== scala-doku (scala) [default], iteration 1 completed (3181.526 ms) ======\nNOTE: 'chi-square' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== chi-square (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 153.320 ms, heap usage 306.961 MB -> 66.511 MB.\n====== chi-square (apache-spark) [default], iteration 0 completed (4336.200 ms) ======\n====== chi-square (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 199.334 ms, heap usage 478.443 MB -> 212.488 MB.\n====== chi-square (apache-spark) [default], iteration 1 completed (1061.151 ms) ======\n"
    },
    "fj-kmeans": {
        "times": [
            9005.351,
            10174.504
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 102.504 ms, heap usage 148.000 MB -> 75.908 MB.\n====== scrabble (functional) [default], iteration 0 completed (1325.948 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 88.050 ms, heap usage 323.286 MB -> 75.986 MB.\n====== scrabble (functional) [default], iteration 1 completed (616.100 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 27.981 ms, heap usage 647.500 MB -> 29.629 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (19682.231 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 148.599 ms, heap usage 636.551 MB -> 148.832 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (11144.730 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 29.648 ms, heap usage 412.984 MB -> 33.579 MB.\n====== future-genetic (functional) [default], iteration 0 completed (9272.502 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 34.018 ms, heap usage 192.031 MB -> 34.354 MB.\n====== future-genetic (functional) [default], iteration 1 completed (6467.272 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 59.891 ms, heap usage 79.097 MB -> 35.249 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (17557.505 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 86.265 ms, heap usage 373.843 MB -> 66.974 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (14029.363 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 2 (out of 2) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 137.156 ms, heap usage 194.539 MB -> 88.683 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923222022363 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186103233526 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112280854148 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489559965613 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743266133333 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299259573378 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.897937035152542 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701958880671.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (20344.672 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 121.576 ms, heap usage 172.394 MB -> 104.696 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923222022363 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186103233526 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112280854148 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489559965613 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743266133333 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299259573378 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.897937035152542 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701958880671.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (13437.705 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 71.361 ms, heap usage 401.691 MB -> 61.235 MB.\n====== scala-doku (scala) [default], iteration 0 completed (3772.610 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 75.123 ms, heap usage 138.735 MB -> 61.274 MB.\n====== scala-doku (scala) [default], iteration 1 completed (3181.526 ms) ======\nNOTE: 'chi-square' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== chi-square (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 153.320 ms, heap usage 306.961 MB -> 66.511 MB.\n====== chi-square (apache-spark) [default], iteration 0 completed (4336.200 ms) ======\n====== chi-square (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 199.334 ms, heap usage 478.443 MB -> 212.488 MB.\n====== chi-square (apache-spark) [default], iteration 1 completed (1061.151 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 234.375 ms, heap usage 520.283 MB -> 149.281 MB.\n====== fj-kmeans (concurrency) [default], iteration 0 completed (9005.351 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 174.017 ms, heap usage 213.204 MB -> 149.328 MB.\n====== fj-kmeans (concurrency) [default], iteration 1 completed (10174.504 ms) ======\n"
    },
    "rx-scrabble": {
        "times": [
            473.417,
            184.937
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 102.504 ms, heap usage 148.000 MB -> 75.908 MB.\n====== scrabble (functional) [default], iteration 0 completed (1325.948 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 88.050 ms, heap usage 323.286 MB -> 75.986 MB.\n====== scrabble (functional) [default], iteration 1 completed (616.100 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 27.981 ms, heap usage 647.500 MB -> 29.629 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (19682.231 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 148.599 ms, heap usage 636.551 MB -> 148.832 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (11144.730 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 29.648 ms, heap usage 412.984 MB -> 33.579 MB.\n====== future-genetic (functional) [default], iteration 0 completed (9272.502 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 34.018 ms, heap usage 192.031 MB -> 34.354 MB.\n====== future-genetic (functional) [default], iteration 1 completed (6467.272 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 59.891 ms, heap usage 79.097 MB -> 35.249 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (17557.505 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 86.265 ms, heap usage 373.843 MB -> 66.974 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (14029.363 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 2 (out of 2) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 137.156 ms, heap usage 194.539 MB -> 88.683 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923222022363 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186103233526 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112280854148 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489559965613 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743266133333 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299259573378 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.897937035152542 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701958880671.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (20344.672 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 121.576 ms, heap usage 172.394 MB -> 104.696 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923222022363 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186103233526 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112280854148 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489559965613 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743266133333 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299259573378 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.897937035152542 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701958880671.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (13437.705 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 71.361 ms, heap usage 401.691 MB -> 61.235 MB.\n====== scala-doku (scala) [default], iteration 0 completed (3772.610 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 75.123 ms, heap usage 138.735 MB -> 61.274 MB.\n====== scala-doku (scala) [default], iteration 1 completed (3181.526 ms) ======\nNOTE: 'chi-square' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== chi-square (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 153.320 ms, heap usage 306.961 MB -> 66.511 MB.\n====== chi-square (apache-spark) [default], iteration 0 completed (4336.200 ms) ======\n====== chi-square (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 199.334 ms, heap usage 478.443 MB -> 212.488 MB.\n====== chi-square (apache-spark) [default], iteration 1 completed (1061.151 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 234.375 ms, heap usage 520.283 MB -> 149.281 MB.\n====== fj-kmeans (concurrency) [default], iteration 0 completed (9005.351 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 174.017 ms, heap usage 213.204 MB -> 149.328 MB.\n====== fj-kmeans (concurrency) [default], iteration 1 completed (10174.504 ms) ======\n====== rx-scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 119.598 ms, heap usage 173.866 MB -> 100.311 MB.\n====== rx-scrabble (functional) [default], iteration 0 completed (473.417 ms) ======\n====== rx-scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 140.407 ms, heap usage 253.311 MB -> 100.977 MB.\n====== rx-scrabble (functional) [default], iteration 1 completed (184.937 ms) ======\n"
    },
    "db-shootout": {
        "times": [
            7306.584,
            7306.169
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 102.504 ms, heap usage 148.000 MB -> 75.908 MB.\n====== scrabble (functional) [default], iteration 0 completed (1325.948 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 88.050 ms, heap usage 323.286 MB -> 75.986 MB.\n====== scrabble (functional) [default], iteration 1 completed (616.100 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 27.981 ms, heap usage 647.500 MB -> 29.629 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (19682.231 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 148.599 ms, heap usage 636.551 MB -> 148.832 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (11144.730 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 29.648 ms, heap usage 412.984 MB -> 33.579 MB.\n====== future-genetic (functional) [default], iteration 0 completed (9272.502 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 34.018 ms, heap usage 192.031 MB -> 34.354 MB.\n====== future-genetic (functional) [default], iteration 1 completed (6467.272 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 59.891 ms, heap usage 79.097 MB -> 35.249 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (17557.505 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 86.265 ms, heap usage 373.843 MB -> 66.974 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (14029.363 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 2 (out of 2) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 137.156 ms, heap usage 194.539 MB -> 88.683 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923222022363 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186103233526 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112280854148 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489559965613 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743266133333 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299259573378 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.897937035152542 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701958880671.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (20344.672 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 121.576 ms, heap usage 172.394 MB -> 104.696 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923222022363 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186103233526 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112280854148 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489559965613 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743266133333 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299259573378 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.897937035152542 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701958880671.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (13437.705 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 71.361 ms, heap usage 401.691 MB -> 61.235 MB.\n====== scala-doku (scala) [default], iteration 0 completed (3772.610 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 75.123 ms, heap usage 138.735 MB -> 61.274 MB.\n====== scala-doku (scala) [default], iteration 1 completed (3181.526 ms) ======\nNOTE: 'chi-square' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== chi-square (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 153.320 ms, heap usage 306.961 MB -> 66.511 MB.\n====== chi-square (apache-spark) [default], iteration 0 completed (4336.200 ms) ======\n====== chi-square (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 199.334 ms, heap usage 478.443 MB -> 212.488 MB.\n====== chi-square (apache-spark) [default], iteration 1 completed (1061.151 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 234.375 ms, heap usage 520.283 MB -> 149.281 MB.\n====== fj-kmeans (concurrency) [default], iteration 0 completed (9005.351 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 174.017 ms, heap usage 213.204 MB -> 149.328 MB.\n====== fj-kmeans (concurrency) [default], iteration 1 completed (10174.504 ms) ======\n====== rx-scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 119.598 ms, heap usage 173.866 MB -> 100.311 MB.\n====== rx-scrabble (functional) [default], iteration 0 completed (473.417 ms) ======\n====== rx-scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 140.407 ms, heap usage 253.311 MB -> 100.977 MB.\n====== rx-scrabble (functional) [default], iteration 1 completed (184.937 ms) ======\n====== db-shootout (database) [default], iteration 0 started ======\nGC before operation: completed in 98.698 ms, heap usage 122.359 MB -> 103.088 MB.\n====== db-shootout (database) [default], iteration 0 completed (7306.584 ms) ======\n====== db-shootout (database) [default], iteration 1 started ======\nGC before operation: completed in 137.252 ms, heap usage 324.700 MB -> 173.488 MB.\n====== db-shootout (database) [default], iteration 1 completed (7306.169 ms) ======\n"
    },
    "finagle-http": {
        "times": [
            10148.061,
            4745.532
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 102.504 ms, heap usage 148.000 MB -> 75.908 MB.\n====== scrabble (functional) [default], iteration 0 completed (1325.948 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 88.050 ms, heap usage 323.286 MB -> 75.986 MB.\n====== scrabble (functional) [default], iteration 1 completed (616.100 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 27.981 ms, heap usage 647.500 MB -> 29.629 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (19682.231 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 148.599 ms, heap usage 636.551 MB -> 148.832 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (11144.730 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 29.648 ms, heap usage 412.984 MB -> 33.579 MB.\n====== future-genetic (functional) [default], iteration 0 completed (9272.502 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 34.018 ms, heap usage 192.031 MB -> 34.354 MB.\n====== future-genetic (functional) [default], iteration 1 completed (6467.272 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 59.891 ms, heap usage 79.097 MB -> 35.249 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (17557.505 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 86.265 ms, heap usage 373.843 MB -> 66.974 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (14029.363 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 2 (out of 2) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 137.156 ms, heap usage 194.539 MB -> 88.683 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923222022363 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186103233526 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112280854148 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489559965613 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743266133333 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299259573378 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.897937035152542 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701958880671.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (20344.672 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 121.576 ms, heap usage 172.394 MB -> 104.696 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923222022363 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186103233526 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112280854148 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489559965613 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743266133333 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299259573378 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.897937035152542 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701958880671.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (13437.705 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 71.361 ms, heap usage 401.691 MB -> 61.235 MB.\n====== scala-doku (scala) [default], iteration 0 completed (3772.610 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 75.123 ms, heap usage 138.735 MB -> 61.274 MB.\n====== scala-doku (scala) [default], iteration 1 completed (3181.526 ms) ======\nNOTE: 'chi-square' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== chi-square (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 153.320 ms, heap usage 306.961 MB -> 66.511 MB.\n====== chi-square (apache-spark) [default], iteration 0 completed (4336.200 ms) ======\n====== chi-square (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 199.334 ms, heap usage 478.443 MB -> 212.488 MB.\n====== chi-square (apache-spark) [default], iteration 1 completed (1061.151 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 234.375 ms, heap usage 520.283 MB -> 149.281 MB.\n====== fj-kmeans (concurrency) [default], iteration 0 completed (9005.351 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 174.017 ms, heap usage 213.204 MB -> 149.328 MB.\n====== fj-kmeans (concurrency) [default], iteration 1 completed (10174.504 ms) ======\n====== rx-scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 119.598 ms, heap usage 173.866 MB -> 100.311 MB.\n====== rx-scrabble (functional) [default], iteration 0 completed (473.417 ms) ======\n====== rx-scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 140.407 ms, heap usage 253.311 MB -> 100.977 MB.\n====== rx-scrabble (functional) [default], iteration 1 completed (184.937 ms) ======\n====== db-shootout (database) [default], iteration 0 started ======\nGC before operation: completed in 98.698 ms, heap usage 122.359 MB -> 103.088 MB.\n====== db-shootout (database) [default], iteration 0 completed (7306.584 ms) ======\n====== db-shootout (database) [default], iteration 1 started ======\nGC before operation: completed in 137.252 ms, heap usage 324.700 MB -> 173.488 MB.\n====== db-shootout (database) [default], iteration 1 completed (7306.169 ms) ======\nCreating graph database...\nLoading resources...\nPopulating database...\nfinagle-http on :45775 spawning 2 client and default number of server workers.\n====== finagle-http (web) [default], iteration 0 started ======\nGC before operation: completed in 96.401 ms, heap usage 293.434 MB -> 110.941 MB.\n====== finagle-http (web) [default], iteration 0 completed (10148.061 ms) ======\n====== finagle-http (web) [default], iteration 1 started ======\nGC before operation: completed in 161.326 ms, heap usage 253.576 MB -> 113.819 MB.\n====== finagle-http (web) [default], iteration 1 completed (4745.532 ms) ======\n"
    },
    "reactors": {
        "times": [
            14358.711,
            12322.901
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 102.504 ms, heap usage 148.000 MB -> 75.908 MB.\n====== scrabble (functional) [default], iteration 0 completed (1325.948 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 88.050 ms, heap usage 323.286 MB -> 75.986 MB.\n====== scrabble (functional) [default], iteration 1 completed (616.100 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 27.981 ms, heap usage 647.500 MB -> 29.629 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (19682.231 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 148.599 ms, heap usage 636.551 MB -> 148.832 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (11144.730 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 29.648 ms, heap usage 412.984 MB -> 33.579 MB.\n====== future-genetic (functional) [default], iteration 0 completed (9272.502 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 34.018 ms, heap usage 192.031 MB -> 34.354 MB.\n====== future-genetic (functional) [default], iteration 1 completed (6467.272 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 59.891 ms, heap usage 79.097 MB -> 35.249 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (17557.505 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 86.265 ms, heap usage 373.843 MB -> 66.974 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (14029.363 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 2 (out of 2) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 137.156 ms, heap usage 194.539 MB -> 88.683 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923222022363 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186103233526 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112280854148 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489559965613 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743266133333 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299259573378 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.897937035152542 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701958880671.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (20344.672 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 121.576 ms, heap usage 172.394 MB -> 104.696 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923222022363 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186103233526 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112280854148 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489559965613 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743266133333 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299259573378 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.897937035152542 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701958880671.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (13437.705 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 71.361 ms, heap usage 401.691 MB -> 61.235 MB.\n====== scala-doku (scala) [default], iteration 0 completed (3772.610 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 75.123 ms, heap usage 138.735 MB -> 61.274 MB.\n====== scala-doku (scala) [default], iteration 1 completed (3181.526 ms) ======\nNOTE: 'chi-square' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== chi-square (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 153.320 ms, heap usage 306.961 MB -> 66.511 MB.\n====== chi-square (apache-spark) [default], iteration 0 completed (4336.200 ms) ======\n====== chi-square (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 199.334 ms, heap usage 478.443 MB -> 212.488 MB.\n====== chi-square (apache-spark) [default], iteration 1 completed (1061.151 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 234.375 ms, heap usage 520.283 MB -> 149.281 MB.\n====== fj-kmeans (concurrency) [default], iteration 0 completed (9005.351 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 174.017 ms, heap usage 213.204 MB -> 149.328 MB.\n====== fj-kmeans (concurrency) [default], iteration 1 completed (10174.504 ms) ======\n====== rx-scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 119.598 ms, heap usage 173.866 MB -> 100.311 MB.\n====== rx-scrabble (functional) [default], iteration 0 completed (473.417 ms) ======\n====== rx-scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 140.407 ms, heap usage 253.311 MB -> 100.977 MB.\n====== rx-scrabble (functional) [default], iteration 1 completed (184.937 ms) ======\n====== db-shootout (database) [default], iteration 0 started ======\nGC before operation: completed in 98.698 ms, heap usage 122.359 MB -> 103.088 MB.\n====== db-shootout (database) [default], iteration 0 completed (7306.584 ms) ======\n====== db-shootout (database) [default], iteration 1 started ======\nGC before operation: completed in 137.252 ms, heap usage 324.700 MB -> 173.488 MB.\n====== db-shootout (database) [default], iteration 1 completed (7306.169 ms) ======\nCreating graph database...\nLoading resources...\nPopulating database...\nfinagle-http on :45775 spawning 2 client and default number of server workers.\n====== finagle-http (web) [default], iteration 0 started ======\nGC before operation: completed in 96.401 ms, heap usage 293.434 MB -> 110.941 MB.\n====== finagle-http (web) [default], iteration 0 completed (10148.061 ms) ======\n====== finagle-http (web) [default], iteration 1 started ======\nGC before operation: completed in 161.326 ms, heap usage 253.576 MB -> 113.819 MB.\n====== finagle-http (web) [default], iteration 1 completed (4745.532 ms) ======\n====== reactors (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 109.658 ms, heap usage 159.231 MB -> 115.585 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 0 completed (14358.711 ms) ======\n====== reactors (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 92.642 ms, heap usage 720.591 MB -> 116.771 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 1 completed (12322.901 ms) ======\n"
    },
    "dec-tree": {
        "times": [
            8414.467,
            2199.388
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 102.504 ms, heap usage 148.000 MB -> 75.908 MB.\n====== scrabble (functional) [default], iteration 0 completed (1325.948 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 88.050 ms, heap usage 323.286 MB -> 75.986 MB.\n====== scrabble (functional) [default], iteration 1 completed (616.100 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 27.981 ms, heap usage 647.500 MB -> 29.629 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (19682.231 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 148.599 ms, heap usage 636.551 MB -> 148.832 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (11144.730 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 29.648 ms, heap usage 412.984 MB -> 33.579 MB.\n====== future-genetic (functional) [default], iteration 0 completed (9272.502 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 34.018 ms, heap usage 192.031 MB -> 34.354 MB.\n====== future-genetic (functional) [default], iteration 1 completed (6467.272 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 59.891 ms, heap usage 79.097 MB -> 35.249 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (17557.505 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 86.265 ms, heap usage 373.843 MB -> 66.974 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (14029.363 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 2 (out of 2) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 137.156 ms, heap usage 194.539 MB -> 88.683 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923222022363 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186103233526 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112280854148 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489559965613 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743266133333 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299259573378 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.897937035152542 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701958880671.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (20344.672 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 121.576 ms, heap usage 172.394 MB -> 104.696 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923222022363 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186103233526 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112280854148 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489559965613 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743266133333 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299259573378 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.897937035152542 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701958880671.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (13437.705 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 71.361 ms, heap usage 401.691 MB -> 61.235 MB.\n====== scala-doku (scala) [default], iteration 0 completed (3772.610 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 75.123 ms, heap usage 138.735 MB -> 61.274 MB.\n====== scala-doku (scala) [default], iteration 1 completed (3181.526 ms) ======\nNOTE: 'chi-square' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== chi-square (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 153.320 ms, heap usage 306.961 MB -> 66.511 MB.\n====== chi-square (apache-spark) [default], iteration 0 completed (4336.200 ms) ======\n====== chi-square (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 199.334 ms, heap usage 478.443 MB -> 212.488 MB.\n====== chi-square (apache-spark) [default], iteration 1 completed (1061.151 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 234.375 ms, heap usage 520.283 MB -> 149.281 MB.\n====== fj-kmeans (concurrency) [default], iteration 0 completed (9005.351 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 174.017 ms, heap usage 213.204 MB -> 149.328 MB.\n====== fj-kmeans (concurrency) [default], iteration 1 completed (10174.504 ms) ======\n====== rx-scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 119.598 ms, heap usage 173.866 MB -> 100.311 MB.\n====== rx-scrabble (functional) [default], iteration 0 completed (473.417 ms) ======\n====== rx-scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 140.407 ms, heap usage 253.311 MB -> 100.977 MB.\n====== rx-scrabble (functional) [default], iteration 1 completed (184.937 ms) ======\n====== db-shootout (database) [default], iteration 0 started ======\nGC before operation: completed in 98.698 ms, heap usage 122.359 MB -> 103.088 MB.\n====== db-shootout (database) [default], iteration 0 completed (7306.584 ms) ======\n====== db-shootout (database) [default], iteration 1 started ======\nGC before operation: completed in 137.252 ms, heap usage 324.700 MB -> 173.488 MB.\n====== db-shootout (database) [default], iteration 1 completed (7306.169 ms) ======\nCreating graph database...\nLoading resources...\nPopulating database...\nfinagle-http on :45775 spawning 2 client and default number of server workers.\n====== finagle-http (web) [default], iteration 0 started ======\nGC before operation: completed in 96.401 ms, heap usage 293.434 MB -> 110.941 MB.\n====== finagle-http (web) [default], iteration 0 completed (10148.061 ms) ======\n====== finagle-http (web) [default], iteration 1 started ======\nGC before operation: completed in 161.326 ms, heap usage 253.576 MB -> 113.819 MB.\n====== finagle-http (web) [default], iteration 1 completed (4745.532 ms) ======\n====== reactors (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 109.658 ms, heap usage 159.231 MB -> 115.585 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 0 completed (14358.711 ms) ======\n====== reactors (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 92.642 ms, heap usage 720.591 MB -> 116.771 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 1 completed (12322.901 ms) ======\nNOTE: 'dec-tree' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== dec-tree (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 110.542 ms, heap usage 222.390 MB -> 129.888 MB.\n====== dec-tree (apache-spark) [default], iteration 0 completed (8414.467 ms) ======\n====== dec-tree (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 167.590 ms, heap usage 293.302 MB -> 161.154 MB.\n====== dec-tree (apache-spark) [default], iteration 1 completed (2199.388 ms) ======\n"
    },
    "scala-stm-bench7": {
        "times": [
            1965.254,
            1520.757
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 102.504 ms, heap usage 148.000 MB -> 75.908 MB.\n====== scrabble (functional) [default], iteration 0 completed (1325.948 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 88.050 ms, heap usage 323.286 MB -> 75.986 MB.\n====== scrabble (functional) [default], iteration 1 completed (616.100 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 27.981 ms, heap usage 647.500 MB -> 29.629 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (19682.231 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 148.599 ms, heap usage 636.551 MB -> 148.832 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (11144.730 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 29.648 ms, heap usage 412.984 MB -> 33.579 MB.\n====== future-genetic (functional) [default], iteration 0 completed (9272.502 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 34.018 ms, heap usage 192.031 MB -> 34.354 MB.\n====== future-genetic (functional) [default], iteration 1 completed (6467.272 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 59.891 ms, heap usage 79.097 MB -> 35.249 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (17557.505 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 86.265 ms, heap usage 373.843 MB -> 66.974 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (14029.363 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 2 (out of 2) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 137.156 ms, heap usage 194.539 MB -> 88.683 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923222022363 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186103233526 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112280854148 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489559965613 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743266133333 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299259573378 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.897937035152542 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701958880671.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (20344.672 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 121.576 ms, heap usage 172.394 MB -> 104.696 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923222022363 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186103233526 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112280854148 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489559965613 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743266133333 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299259573378 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.897937035152542 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701958880671.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (13437.705 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 71.361 ms, heap usage 401.691 MB -> 61.235 MB.\n====== scala-doku (scala) [default], iteration 0 completed (3772.610 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 75.123 ms, heap usage 138.735 MB -> 61.274 MB.\n====== scala-doku (scala) [default], iteration 1 completed (3181.526 ms) ======\nNOTE: 'chi-square' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== chi-square (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 153.320 ms, heap usage 306.961 MB -> 66.511 MB.\n====== chi-square (apache-spark) [default], iteration 0 completed (4336.200 ms) ======\n====== chi-square (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 199.334 ms, heap usage 478.443 MB -> 212.488 MB.\n====== chi-square (apache-spark) [default], iteration 1 completed (1061.151 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 234.375 ms, heap usage 520.283 MB -> 149.281 MB.\n====== fj-kmeans (concurrency) [default], iteration 0 completed (9005.351 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 174.017 ms, heap usage 213.204 MB -> 149.328 MB.\n====== fj-kmeans (concurrency) [default], iteration 1 completed (10174.504 ms) ======\n====== rx-scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 119.598 ms, heap usage 173.866 MB -> 100.311 MB.\n====== rx-scrabble (functional) [default], iteration 0 completed (473.417 ms) ======\n====== rx-scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 140.407 ms, heap usage 253.311 MB -> 100.977 MB.\n====== rx-scrabble (functional) [default], iteration 1 completed (184.937 ms) ======\n====== db-shootout (database) [default], iteration 0 started ======\nGC before operation: completed in 98.698 ms, heap usage 122.359 MB -> 103.088 MB.\n====== db-shootout (database) [default], iteration 0 completed (7306.584 ms) ======\n====== db-shootout (database) [default], iteration 1 started ======\nGC before operation: completed in 137.252 ms, heap usage 324.700 MB -> 173.488 MB.\n====== db-shootout (database) [default], iteration 1 completed (7306.169 ms) ======\nCreating graph database...\nLoading resources...\nPopulating database...\nfinagle-http on :45775 spawning 2 client and default number of server workers.\n====== finagle-http (web) [default], iteration 0 started ======\nGC before operation: completed in 96.401 ms, heap usage 293.434 MB -> 110.941 MB.\n====== finagle-http (web) [default], iteration 0 completed (10148.061 ms) ======\n====== finagle-http (web) [default], iteration 1 started ======\nGC before operation: completed in 161.326 ms, heap usage 253.576 MB -> 113.819 MB.\n====== finagle-http (web) [default], iteration 1 completed (4745.532 ms) ======\n====== reactors (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 109.658 ms, heap usage 159.231 MB -> 115.585 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 0 completed (14358.711 ms) ======\n====== reactors (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 92.642 ms, heap usage 720.591 MB -> 116.771 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 1 completed (12322.901 ms) ======\nNOTE: 'dec-tree' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== dec-tree (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 110.542 ms, heap usage 222.390 MB -> 129.888 MB.\n====== dec-tree (apache-spark) [default], iteration 0 completed (8414.467 ms) ======\n====== dec-tree (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 167.590 ms, heap usage 293.302 MB -> 161.154 MB.\n====== dec-tree (apache-spark) [default], iteration 1 completed (2199.388 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 0 started ======\nGC before operation: completed in 131.572 ms, heap usage 364.941 MB -> 144.116 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 262\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 42\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 4\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 13\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 12\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 8\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 4\tmaxttc = 262\tfailed = 0\ttotal = 4\nSHORT_TRAVERSAL:  successful = 6\tmaxttc = 13\tfailed = 0\ttotal = 6\nSHORT_TRAVERSAL_RO:  successful = 10\tmaxttc = 5\tfailed = 0\ttotal = 10\nOPERATION:  successful = 8\tmaxttc = 8\tfailed = 0\ttotal = 8\nOPERATION_RO:  successful = 12\tmaxttc = 2\tfailed = 0\ttotal = 12\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 119.05 op/s (119.05 op/s including failed)\nElapsed time: 0.34 s\n====== scala-stm-bench7 (scala) [default], iteration 0 completed (1965.254 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 1 started ======\nGC before operation: completed in 143.376 ms, heap usage 542.616 MB -> 144.416 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 355\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 6\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 21\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 8\tmaxttc = 355\tfailed = 0\ttotal = 8\nSHORT_TRAVERSAL:  successful = 12\tmaxttc = 13\tfailed = 0\ttotal = 12\nSHORT_TRAVERSAL_RO:  successful = 20\tmaxttc = 21\tfailed = 0\ttotal = 20\nOPERATION:  successful = 16\tmaxttc = 8\tfailed = 0\ttotal = 16\nOPERATION_RO:  successful = 24\tmaxttc = 2\tfailed = 0\ttotal = 24\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 184.76 op/s (184.76 op/s including failed)\nElapsed time: 0.43 s\n====== scala-stm-bench7 (scala) [default], iteration 1 completed (1520.757 ms) ======\n"
    },
    "naive-bayes": {
        "times": [
            38459.475,
            22443.402
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 102.504 ms, heap usage 148.000 MB -> 75.908 MB.\n====== scrabble (functional) [default], iteration 0 completed (1325.948 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 88.050 ms, heap usage 323.286 MB -> 75.986 MB.\n====== scrabble (functional) [default], iteration 1 completed (616.100 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 27.981 ms, heap usage 647.500 MB -> 29.629 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (19682.231 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 148.599 ms, heap usage 636.551 MB -> 148.832 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (11144.730 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 29.648 ms, heap usage 412.984 MB -> 33.579 MB.\n====== future-genetic (functional) [default], iteration 0 completed (9272.502 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 34.018 ms, heap usage 192.031 MB -> 34.354 MB.\n====== future-genetic (functional) [default], iteration 1 completed (6467.272 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 59.891 ms, heap usage 79.097 MB -> 35.249 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (17557.505 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 86.265 ms, heap usage 373.843 MB -> 66.974 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (14029.363 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 2 (out of 2) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 137.156 ms, heap usage 194.539 MB -> 88.683 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923222022363 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186103233526 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112280854148 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489559965613 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743266133333 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299259573378 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.897937035152542 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701958880671.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (20344.672 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 121.576 ms, heap usage 172.394 MB -> 104.696 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923222022363 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186103233526 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112280854148 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489559965613 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743266133333 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299259573378 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.897937035152542 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701958880671.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (13437.705 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 71.361 ms, heap usage 401.691 MB -> 61.235 MB.\n====== scala-doku (scala) [default], iteration 0 completed (3772.610 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 75.123 ms, heap usage 138.735 MB -> 61.274 MB.\n====== scala-doku (scala) [default], iteration 1 completed (3181.526 ms) ======\nNOTE: 'chi-square' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== chi-square (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 153.320 ms, heap usage 306.961 MB -> 66.511 MB.\n====== chi-square (apache-spark) [default], iteration 0 completed (4336.200 ms) ======\n====== chi-square (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 199.334 ms, heap usage 478.443 MB -> 212.488 MB.\n====== chi-square (apache-spark) [default], iteration 1 completed (1061.151 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 234.375 ms, heap usage 520.283 MB -> 149.281 MB.\n====== fj-kmeans (concurrency) [default], iteration 0 completed (9005.351 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 174.017 ms, heap usage 213.204 MB -> 149.328 MB.\n====== fj-kmeans (concurrency) [default], iteration 1 completed (10174.504 ms) ======\n====== rx-scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 119.598 ms, heap usage 173.866 MB -> 100.311 MB.\n====== rx-scrabble (functional) [default], iteration 0 completed (473.417 ms) ======\n====== rx-scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 140.407 ms, heap usage 253.311 MB -> 100.977 MB.\n====== rx-scrabble (functional) [default], iteration 1 completed (184.937 ms) ======\n====== db-shootout (database) [default], iteration 0 started ======\nGC before operation: completed in 98.698 ms, heap usage 122.359 MB -> 103.088 MB.\n====== db-shootout (database) [default], iteration 0 completed (7306.584 ms) ======\n====== db-shootout (database) [default], iteration 1 started ======\nGC before operation: completed in 137.252 ms, heap usage 324.700 MB -> 173.488 MB.\n====== db-shootout (database) [default], iteration 1 completed (7306.169 ms) ======\nCreating graph database...\nLoading resources...\nPopulating database...\nfinagle-http on :45775 spawning 2 client and default number of server workers.\n====== finagle-http (web) [default], iteration 0 started ======\nGC before operation: completed in 96.401 ms, heap usage 293.434 MB -> 110.941 MB.\n====== finagle-http (web) [default], iteration 0 completed (10148.061 ms) ======\n====== finagle-http (web) [default], iteration 1 started ======\nGC before operation: completed in 161.326 ms, heap usage 253.576 MB -> 113.819 MB.\n====== finagle-http (web) [default], iteration 1 completed (4745.532 ms) ======\n====== reactors (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 109.658 ms, heap usage 159.231 MB -> 115.585 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 0 completed (14358.711 ms) ======\n====== reactors (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 92.642 ms, heap usage 720.591 MB -> 116.771 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 1 completed (12322.901 ms) ======\nNOTE: 'dec-tree' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== dec-tree (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 110.542 ms, heap usage 222.390 MB -> 129.888 MB.\n====== dec-tree (apache-spark) [default], iteration 0 completed (8414.467 ms) ======\n====== dec-tree (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 167.590 ms, heap usage 293.302 MB -> 161.154 MB.\n====== dec-tree (apache-spark) [default], iteration 1 completed (2199.388 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 0 started ======\nGC before operation: completed in 131.572 ms, heap usage 364.941 MB -> 144.116 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 262\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 42\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 4\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 13\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 12\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 8\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 4\tmaxttc = 262\tfailed = 0\ttotal = 4\nSHORT_TRAVERSAL:  successful = 6\tmaxttc = 13\tfailed = 0\ttotal = 6\nSHORT_TRAVERSAL_RO:  successful = 10\tmaxttc = 5\tfailed = 0\ttotal = 10\nOPERATION:  successful = 8\tmaxttc = 8\tfailed = 0\ttotal = 8\nOPERATION_RO:  successful = 12\tmaxttc = 2\tfailed = 0\ttotal = 12\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 119.05 op/s (119.05 op/s including failed)\nElapsed time: 0.34 s\n====== scala-stm-bench7 (scala) [default], iteration 0 completed (1965.254 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 1 started ======\nGC before operation: completed in 143.376 ms, heap usage 542.616 MB -> 144.416 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 355\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 6\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 21\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 8\tmaxttc = 355\tfailed = 0\ttotal = 8\nSHORT_TRAVERSAL:  successful = 12\tmaxttc = 13\tfailed = 0\ttotal = 12\nSHORT_TRAVERSAL_RO:  successful = 20\tmaxttc = 21\tfailed = 0\ttotal = 20\nOPERATION:  successful = 16\tmaxttc = 8\tfailed = 0\ttotal = 16\nOPERATION_RO:  successful = 24\tmaxttc = 2\tfailed = 0\ttotal = 24\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 184.76 op/s (184.76 op/s including failed)\nElapsed time: 0.43 s\n====== scala-stm-bench7 (scala) [default], iteration 1 completed (1520.757 ms) ======\nNOTE: 'naive-bayes' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== naive-bayes (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 168.652 ms, heap usage 402.908 MB -> 155.665 MB.\n====== naive-bayes (apache-spark) [default], iteration 0 completed (38459.475 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 223.365 ms, heap usage 768.209 MB -> 379.081 MB.\n====== naive-bayes (apache-spark) [default], iteration 1 completed (22443.402 ms) ======\n"
    },
    "als": {
        "times": [
            17943.165,
            11371.264
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 102.504 ms, heap usage 148.000 MB -> 75.908 MB.\n====== scrabble (functional) [default], iteration 0 completed (1325.948 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 88.050 ms, heap usage 323.286 MB -> 75.986 MB.\n====== scrabble (functional) [default], iteration 1 completed (616.100 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 27.981 ms, heap usage 647.500 MB -> 29.629 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (19682.231 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 148.599 ms, heap usage 636.551 MB -> 148.832 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (11144.730 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 29.648 ms, heap usage 412.984 MB -> 33.579 MB.\n====== future-genetic (functional) [default], iteration 0 completed (9272.502 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 34.018 ms, heap usage 192.031 MB -> 34.354 MB.\n====== future-genetic (functional) [default], iteration 1 completed (6467.272 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 59.891 ms, heap usage 79.097 MB -> 35.249 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (17557.505 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 86.265 ms, heap usage 373.843 MB -> 66.974 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (14029.363 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 2 (out of 2) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 137.156 ms, heap usage 194.539 MB -> 88.683 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923222022363 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186103233526 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112280854148 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489559965613 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743266133333 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299259573378 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.897937035152542 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701958880671.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (20344.672 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 121.576 ms, heap usage 172.394 MB -> 104.696 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923222022363 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186103233526 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112280854148 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489559965613 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743266133333 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299259573378 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.897937035152542 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701958880671.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (13437.705 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 71.361 ms, heap usage 401.691 MB -> 61.235 MB.\n====== scala-doku (scala) [default], iteration 0 completed (3772.610 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 75.123 ms, heap usage 138.735 MB -> 61.274 MB.\n====== scala-doku (scala) [default], iteration 1 completed (3181.526 ms) ======\nNOTE: 'chi-square' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== chi-square (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 153.320 ms, heap usage 306.961 MB -> 66.511 MB.\n====== chi-square (apache-spark) [default], iteration 0 completed (4336.200 ms) ======\n====== chi-square (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 199.334 ms, heap usage 478.443 MB -> 212.488 MB.\n====== chi-square (apache-spark) [default], iteration 1 completed (1061.151 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 234.375 ms, heap usage 520.283 MB -> 149.281 MB.\n====== fj-kmeans (concurrency) [default], iteration 0 completed (9005.351 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 174.017 ms, heap usage 213.204 MB -> 149.328 MB.\n====== fj-kmeans (concurrency) [default], iteration 1 completed (10174.504 ms) ======\n====== rx-scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 119.598 ms, heap usage 173.866 MB -> 100.311 MB.\n====== rx-scrabble (functional) [default], iteration 0 completed (473.417 ms) ======\n====== rx-scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 140.407 ms, heap usage 253.311 MB -> 100.977 MB.\n====== rx-scrabble (functional) [default], iteration 1 completed (184.937 ms) ======\n====== db-shootout (database) [default], iteration 0 started ======\nGC before operation: completed in 98.698 ms, heap usage 122.359 MB -> 103.088 MB.\n====== db-shootout (database) [default], iteration 0 completed (7306.584 ms) ======\n====== db-shootout (database) [default], iteration 1 started ======\nGC before operation: completed in 137.252 ms, heap usage 324.700 MB -> 173.488 MB.\n====== db-shootout (database) [default], iteration 1 completed (7306.169 ms) ======\nCreating graph database...\nLoading resources...\nPopulating database...\nfinagle-http on :45775 spawning 2 client and default number of server workers.\n====== finagle-http (web) [default], iteration 0 started ======\nGC before operation: completed in 96.401 ms, heap usage 293.434 MB -> 110.941 MB.\n====== finagle-http (web) [default], iteration 0 completed (10148.061 ms) ======\n====== finagle-http (web) [default], iteration 1 started ======\nGC before operation: completed in 161.326 ms, heap usage 253.576 MB -> 113.819 MB.\n====== finagle-http (web) [default], iteration 1 completed (4745.532 ms) ======\n====== reactors (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 109.658 ms, heap usage 159.231 MB -> 115.585 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 0 completed (14358.711 ms) ======\n====== reactors (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 92.642 ms, heap usage 720.591 MB -> 116.771 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 1 completed (12322.901 ms) ======\nNOTE: 'dec-tree' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== dec-tree (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 110.542 ms, heap usage 222.390 MB -> 129.888 MB.\n====== dec-tree (apache-spark) [default], iteration 0 completed (8414.467 ms) ======\n====== dec-tree (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 167.590 ms, heap usage 293.302 MB -> 161.154 MB.\n====== dec-tree (apache-spark) [default], iteration 1 completed (2199.388 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 0 started ======\nGC before operation: completed in 131.572 ms, heap usage 364.941 MB -> 144.116 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 262\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 42\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 4\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 13\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 12\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 8\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 4\tmaxttc = 262\tfailed = 0\ttotal = 4\nSHORT_TRAVERSAL:  successful = 6\tmaxttc = 13\tfailed = 0\ttotal = 6\nSHORT_TRAVERSAL_RO:  successful = 10\tmaxttc = 5\tfailed = 0\ttotal = 10\nOPERATION:  successful = 8\tmaxttc = 8\tfailed = 0\ttotal = 8\nOPERATION_RO:  successful = 12\tmaxttc = 2\tfailed = 0\ttotal = 12\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 119.05 op/s (119.05 op/s including failed)\nElapsed time: 0.34 s\n====== scala-stm-bench7 (scala) [default], iteration 0 completed (1965.254 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 1 started ======\nGC before operation: completed in 143.376 ms, heap usage 542.616 MB -> 144.416 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 355\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 6\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 21\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 8\tmaxttc = 355\tfailed = 0\ttotal = 8\nSHORT_TRAVERSAL:  successful = 12\tmaxttc = 13\tfailed = 0\ttotal = 12\nSHORT_TRAVERSAL_RO:  successful = 20\tmaxttc = 21\tfailed = 0\ttotal = 20\nOPERATION:  successful = 16\tmaxttc = 8\tfailed = 0\ttotal = 16\nOPERATION_RO:  successful = 24\tmaxttc = 2\tfailed = 0\ttotal = 24\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 184.76 op/s (184.76 op/s including failed)\nElapsed time: 0.43 s\n====== scala-stm-bench7 (scala) [default], iteration 1 completed (1520.757 ms) ======\nNOTE: 'naive-bayes' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== naive-bayes (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 168.652 ms, heap usage 402.908 MB -> 155.665 MB.\n====== naive-bayes (apache-spark) [default], iteration 0 completed (38459.475 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 223.365 ms, heap usage 768.209 MB -> 379.081 MB.\n====== naive-bayes (apache-spark) [default], iteration 1 completed (22443.402 ms) ======\nNOTE: 'als' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== als (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 172.998 ms, heap usage 761.633 MB -> 177.000 MB.\n====== als (apache-spark) [default], iteration 0 completed (17943.165 ms) ======\n====== als (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 215.553 ms, heap usage 444.207 MB -> 201.906 MB.\n====== als (apache-spark) [default], iteration 1 completed (11371.264 ms) ======\n"
    },
    "par-mnemonics": {
        "times": [
            4686.56,
            4120.639
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 102.504 ms, heap usage 148.000 MB -> 75.908 MB.\n====== scrabble (functional) [default], iteration 0 completed (1325.948 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 88.050 ms, heap usage 323.286 MB -> 75.986 MB.\n====== scrabble (functional) [default], iteration 1 completed (616.100 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 27.981 ms, heap usage 647.500 MB -> 29.629 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (19682.231 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 148.599 ms, heap usage 636.551 MB -> 148.832 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (11144.730 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 29.648 ms, heap usage 412.984 MB -> 33.579 MB.\n====== future-genetic (functional) [default], iteration 0 completed (9272.502 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 34.018 ms, heap usage 192.031 MB -> 34.354 MB.\n====== future-genetic (functional) [default], iteration 1 completed (6467.272 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 59.891 ms, heap usage 79.097 MB -> 35.249 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (17557.505 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 86.265 ms, heap usage 373.843 MB -> 66.974 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (14029.363 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 2 (out of 2) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 137.156 ms, heap usage 194.539 MB -> 88.683 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923222022363 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186103233526 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112280854148 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489559965613 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743266133333 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299259573378 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.897937035152542 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701958880671.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (20344.672 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 121.576 ms, heap usage 172.394 MB -> 104.696 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923222022363 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186103233526 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112280854148 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489559965613 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743266133333 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299259573378 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.897937035152542 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701958880671.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (13437.705 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 71.361 ms, heap usage 401.691 MB -> 61.235 MB.\n====== scala-doku (scala) [default], iteration 0 completed (3772.610 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 75.123 ms, heap usage 138.735 MB -> 61.274 MB.\n====== scala-doku (scala) [default], iteration 1 completed (3181.526 ms) ======\nNOTE: 'chi-square' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== chi-square (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 153.320 ms, heap usage 306.961 MB -> 66.511 MB.\n====== chi-square (apache-spark) [default], iteration 0 completed (4336.200 ms) ======\n====== chi-square (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 199.334 ms, heap usage 478.443 MB -> 212.488 MB.\n====== chi-square (apache-spark) [default], iteration 1 completed (1061.151 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 234.375 ms, heap usage 520.283 MB -> 149.281 MB.\n====== fj-kmeans (concurrency) [default], iteration 0 completed (9005.351 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 174.017 ms, heap usage 213.204 MB -> 149.328 MB.\n====== fj-kmeans (concurrency) [default], iteration 1 completed (10174.504 ms) ======\n====== rx-scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 119.598 ms, heap usage 173.866 MB -> 100.311 MB.\n====== rx-scrabble (functional) [default], iteration 0 completed (473.417 ms) ======\n====== rx-scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 140.407 ms, heap usage 253.311 MB -> 100.977 MB.\n====== rx-scrabble (functional) [default], iteration 1 completed (184.937 ms) ======\n====== db-shootout (database) [default], iteration 0 started ======\nGC before operation: completed in 98.698 ms, heap usage 122.359 MB -> 103.088 MB.\n====== db-shootout (database) [default], iteration 0 completed (7306.584 ms) ======\n====== db-shootout (database) [default], iteration 1 started ======\nGC before operation: completed in 137.252 ms, heap usage 324.700 MB -> 173.488 MB.\n====== db-shootout (database) [default], iteration 1 completed (7306.169 ms) ======\nCreating graph database...\nLoading resources...\nPopulating database...\nfinagle-http on :45775 spawning 2 client and default number of server workers.\n====== finagle-http (web) [default], iteration 0 started ======\nGC before operation: completed in 96.401 ms, heap usage 293.434 MB -> 110.941 MB.\n====== finagle-http (web) [default], iteration 0 completed (10148.061 ms) ======\n====== finagle-http (web) [default], iteration 1 started ======\nGC before operation: completed in 161.326 ms, heap usage 253.576 MB -> 113.819 MB.\n====== finagle-http (web) [default], iteration 1 completed (4745.532 ms) ======\n====== reactors (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 109.658 ms, heap usage 159.231 MB -> 115.585 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 0 completed (14358.711 ms) ======\n====== reactors (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 92.642 ms, heap usage 720.591 MB -> 116.771 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 1 completed (12322.901 ms) ======\nNOTE: 'dec-tree' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== dec-tree (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 110.542 ms, heap usage 222.390 MB -> 129.888 MB.\n====== dec-tree (apache-spark) [default], iteration 0 completed (8414.467 ms) ======\n====== dec-tree (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 167.590 ms, heap usage 293.302 MB -> 161.154 MB.\n====== dec-tree (apache-spark) [default], iteration 1 completed (2199.388 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 0 started ======\nGC before operation: completed in 131.572 ms, heap usage 364.941 MB -> 144.116 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 262\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 42\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 4\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 13\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 12\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 8\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 4\tmaxttc = 262\tfailed = 0\ttotal = 4\nSHORT_TRAVERSAL:  successful = 6\tmaxttc = 13\tfailed = 0\ttotal = 6\nSHORT_TRAVERSAL_RO:  successful = 10\tmaxttc = 5\tfailed = 0\ttotal = 10\nOPERATION:  successful = 8\tmaxttc = 8\tfailed = 0\ttotal = 8\nOPERATION_RO:  successful = 12\tmaxttc = 2\tfailed = 0\ttotal = 12\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 119.05 op/s (119.05 op/s including failed)\nElapsed time: 0.34 s\n====== scala-stm-bench7 (scala) [default], iteration 0 completed (1965.254 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 1 started ======\nGC before operation: completed in 143.376 ms, heap usage 542.616 MB -> 144.416 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 355\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 6\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 21\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 8\tmaxttc = 355\tfailed = 0\ttotal = 8\nSHORT_TRAVERSAL:  successful = 12\tmaxttc = 13\tfailed = 0\ttotal = 12\nSHORT_TRAVERSAL_RO:  successful = 20\tmaxttc = 21\tfailed = 0\ttotal = 20\nOPERATION:  successful = 16\tmaxttc = 8\tfailed = 0\ttotal = 16\nOPERATION_RO:  successful = 24\tmaxttc = 2\tfailed = 0\ttotal = 24\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 184.76 op/s (184.76 op/s including failed)\nElapsed time: 0.43 s\n====== scala-stm-bench7 (scala) [default], iteration 1 completed (1520.757 ms) ======\nNOTE: 'naive-bayes' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== naive-bayes (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 168.652 ms, heap usage 402.908 MB -> 155.665 MB.\n====== naive-bayes (apache-spark) [default], iteration 0 completed (38459.475 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 223.365 ms, heap usage 768.209 MB -> 379.081 MB.\n====== naive-bayes (apache-spark) [default], iteration 1 completed (22443.402 ms) ======\nNOTE: 'als' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== als (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 172.998 ms, heap usage 761.633 MB -> 177.000 MB.\n====== als (apache-spark) [default], iteration 0 completed (17943.165 ms) ======\n====== als (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 215.553 ms, heap usage 444.207 MB -> 201.906 MB.\n====== als (apache-spark) [default], iteration 1 completed (11371.264 ms) ======\n====== par-mnemonics (functional) [default], iteration 0 started ======\nGC before operation: completed in 167.128 ms, heap usage 807.826 MB -> 188.115 MB.\n====== par-mnemonics (functional) [default], iteration 0 completed (4686.560 ms) ======\n====== par-mnemonics (functional) [default], iteration 1 started ======\nGC before operation: completed in 186.235 ms, heap usage 319.471 MB -> 187.992 MB.\n====== par-mnemonics (functional) [default], iteration 1 completed (4120.639 ms) ======\n"
    },
    "scala-kmeans": {
        "times": [
            310.795,
            157.114
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 102.504 ms, heap usage 148.000 MB -> 75.908 MB.\n====== scrabble (functional) [default], iteration 0 completed (1325.948 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 88.050 ms, heap usage 323.286 MB -> 75.986 MB.\n====== scrabble (functional) [default], iteration 1 completed (616.100 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 27.981 ms, heap usage 647.500 MB -> 29.629 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (19682.231 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 148.599 ms, heap usage 636.551 MB -> 148.832 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (11144.730 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 29.648 ms, heap usage 412.984 MB -> 33.579 MB.\n====== future-genetic (functional) [default], iteration 0 completed (9272.502 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 34.018 ms, heap usage 192.031 MB -> 34.354 MB.\n====== future-genetic (functional) [default], iteration 1 completed (6467.272 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 59.891 ms, heap usage 79.097 MB -> 35.249 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (17557.505 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 86.265 ms, heap usage 373.843 MB -> 66.974 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (14029.363 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 2 (out of 2) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 137.156 ms, heap usage 194.539 MB -> 88.683 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923222022363 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186103233526 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112280854148 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489559965613 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743266133333 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299259573378 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.897937035152542 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701958880671.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (20344.672 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 121.576 ms, heap usage 172.394 MB -> 104.696 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923222022363 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186103233526 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112280854148 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489559965613 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743266133333 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299259573378 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.897937035152542 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701958880671.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (13437.705 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 71.361 ms, heap usage 401.691 MB -> 61.235 MB.\n====== scala-doku (scala) [default], iteration 0 completed (3772.610 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 75.123 ms, heap usage 138.735 MB -> 61.274 MB.\n====== scala-doku (scala) [default], iteration 1 completed (3181.526 ms) ======\nNOTE: 'chi-square' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== chi-square (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 153.320 ms, heap usage 306.961 MB -> 66.511 MB.\n====== chi-square (apache-spark) [default], iteration 0 completed (4336.200 ms) ======\n====== chi-square (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 199.334 ms, heap usage 478.443 MB -> 212.488 MB.\n====== chi-square (apache-spark) [default], iteration 1 completed (1061.151 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 234.375 ms, heap usage 520.283 MB -> 149.281 MB.\n====== fj-kmeans (concurrency) [default], iteration 0 completed (9005.351 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 174.017 ms, heap usage 213.204 MB -> 149.328 MB.\n====== fj-kmeans (concurrency) [default], iteration 1 completed (10174.504 ms) ======\n====== rx-scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 119.598 ms, heap usage 173.866 MB -> 100.311 MB.\n====== rx-scrabble (functional) [default], iteration 0 completed (473.417 ms) ======\n====== rx-scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 140.407 ms, heap usage 253.311 MB -> 100.977 MB.\n====== rx-scrabble (functional) [default], iteration 1 completed (184.937 ms) ======\n====== db-shootout (database) [default], iteration 0 started ======\nGC before operation: completed in 98.698 ms, heap usage 122.359 MB -> 103.088 MB.\n====== db-shootout (database) [default], iteration 0 completed (7306.584 ms) ======\n====== db-shootout (database) [default], iteration 1 started ======\nGC before operation: completed in 137.252 ms, heap usage 324.700 MB -> 173.488 MB.\n====== db-shootout (database) [default], iteration 1 completed (7306.169 ms) ======\nCreating graph database...\nLoading resources...\nPopulating database...\nfinagle-http on :45775 spawning 2 client and default number of server workers.\n====== finagle-http (web) [default], iteration 0 started ======\nGC before operation: completed in 96.401 ms, heap usage 293.434 MB -> 110.941 MB.\n====== finagle-http (web) [default], iteration 0 completed (10148.061 ms) ======\n====== finagle-http (web) [default], iteration 1 started ======\nGC before operation: completed in 161.326 ms, heap usage 253.576 MB -> 113.819 MB.\n====== finagle-http (web) [default], iteration 1 completed (4745.532 ms) ======\n====== reactors (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 109.658 ms, heap usage 159.231 MB -> 115.585 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 0 completed (14358.711 ms) ======\n====== reactors (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 92.642 ms, heap usage 720.591 MB -> 116.771 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 1 completed (12322.901 ms) ======\nNOTE: 'dec-tree' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== dec-tree (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 110.542 ms, heap usage 222.390 MB -> 129.888 MB.\n====== dec-tree (apache-spark) [default], iteration 0 completed (8414.467 ms) ======\n====== dec-tree (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 167.590 ms, heap usage 293.302 MB -> 161.154 MB.\n====== dec-tree (apache-spark) [default], iteration 1 completed (2199.388 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 0 started ======\nGC before operation: completed in 131.572 ms, heap usage 364.941 MB -> 144.116 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 262\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 42\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 4\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 13\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 12\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 8\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 4\tmaxttc = 262\tfailed = 0\ttotal = 4\nSHORT_TRAVERSAL:  successful = 6\tmaxttc = 13\tfailed = 0\ttotal = 6\nSHORT_TRAVERSAL_RO:  successful = 10\tmaxttc = 5\tfailed = 0\ttotal = 10\nOPERATION:  successful = 8\tmaxttc = 8\tfailed = 0\ttotal = 8\nOPERATION_RO:  successful = 12\tmaxttc = 2\tfailed = 0\ttotal = 12\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 119.05 op/s (119.05 op/s including failed)\nElapsed time: 0.34 s\n====== scala-stm-bench7 (scala) [default], iteration 0 completed (1965.254 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 1 started ======\nGC before operation: completed in 143.376 ms, heap usage 542.616 MB -> 144.416 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 355\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 6\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 21\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 8\tmaxttc = 355\tfailed = 0\ttotal = 8\nSHORT_TRAVERSAL:  successful = 12\tmaxttc = 13\tfailed = 0\ttotal = 12\nSHORT_TRAVERSAL_RO:  successful = 20\tmaxttc = 21\tfailed = 0\ttotal = 20\nOPERATION:  successful = 16\tmaxttc = 8\tfailed = 0\ttotal = 16\nOPERATION_RO:  successful = 24\tmaxttc = 2\tfailed = 0\ttotal = 24\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 184.76 op/s (184.76 op/s including failed)\nElapsed time: 0.43 s\n====== scala-stm-bench7 (scala) [default], iteration 1 completed (1520.757 ms) ======\nNOTE: 'naive-bayes' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== naive-bayes (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 168.652 ms, heap usage 402.908 MB -> 155.665 MB.\n====== naive-bayes (apache-spark) [default], iteration 0 completed (38459.475 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 223.365 ms, heap usage 768.209 MB -> 379.081 MB.\n====== naive-bayes (apache-spark) [default], iteration 1 completed (22443.402 ms) ======\nNOTE: 'als' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== als (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 172.998 ms, heap usage 761.633 MB -> 177.000 MB.\n====== als (apache-spark) [default], iteration 0 completed (17943.165 ms) ======\n====== als (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 215.553 ms, heap usage 444.207 MB -> 201.906 MB.\n====== als (apache-spark) [default], iteration 1 completed (11371.264 ms) ======\n====== par-mnemonics (functional) [default], iteration 0 started ======\nGC before operation: completed in 167.128 ms, heap usage 807.826 MB -> 188.115 MB.\n====== par-mnemonics (functional) [default], iteration 0 completed (4686.560 ms) ======\n====== par-mnemonics (functional) [default], iteration 1 started ======\nGC before operation: completed in 186.235 ms, heap usage 319.471 MB -> 187.992 MB.\n====== par-mnemonics (functional) [default], iteration 1 completed (4120.639 ms) ======\n====== scala-kmeans (scala) [default], iteration 0 started ======\nGC before operation: completed in 270.290 ms, heap usage 552.479 MB -> 210.291 MB.\n====== scala-kmeans (scala) [default], iteration 0 completed (310.795 ms) ======\n====== scala-kmeans (scala) [default], iteration 1 started ======\nGC before operation: completed in 198.226 ms, heap usage 239.291 MB -> 210.323 MB.\n====== scala-kmeans (scala) [default], iteration 1 completed (157.114 ms) ======\n"
    },
    "philosophers": {
        "times": [
            1067.2,
            507.249
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 102.504 ms, heap usage 148.000 MB -> 75.908 MB.\n====== scrabble (functional) [default], iteration 0 completed (1325.948 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 88.050 ms, heap usage 323.286 MB -> 75.986 MB.\n====== scrabble (functional) [default], iteration 1 completed (616.100 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 27.981 ms, heap usage 647.500 MB -> 29.629 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (19682.231 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 148.599 ms, heap usage 636.551 MB -> 148.832 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (11144.730 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 29.648 ms, heap usage 412.984 MB -> 33.579 MB.\n====== future-genetic (functional) [default], iteration 0 completed (9272.502 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 34.018 ms, heap usage 192.031 MB -> 34.354 MB.\n====== future-genetic (functional) [default], iteration 1 completed (6467.272 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 59.891 ms, heap usage 79.097 MB -> 35.249 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (17557.505 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 86.265 ms, heap usage 373.843 MB -> 66.974 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (14029.363 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 2 (out of 2) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 137.156 ms, heap usage 194.539 MB -> 88.683 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923222022363 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186103233526 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112280854148 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489559965613 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743266133333 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299259573378 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.897937035152542 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701958880671.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (20344.672 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 121.576 ms, heap usage 172.394 MB -> 104.696 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923222022363 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186103233526 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112280854148 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489559965613 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743266133333 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299259573378 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.897937035152542 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701958880671.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (13437.705 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 71.361 ms, heap usage 401.691 MB -> 61.235 MB.\n====== scala-doku (scala) [default], iteration 0 completed (3772.610 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 75.123 ms, heap usage 138.735 MB -> 61.274 MB.\n====== scala-doku (scala) [default], iteration 1 completed (3181.526 ms) ======\nNOTE: 'chi-square' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== chi-square (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 153.320 ms, heap usage 306.961 MB -> 66.511 MB.\n====== chi-square (apache-spark) [default], iteration 0 completed (4336.200 ms) ======\n====== chi-square (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 199.334 ms, heap usage 478.443 MB -> 212.488 MB.\n====== chi-square (apache-spark) [default], iteration 1 completed (1061.151 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 234.375 ms, heap usage 520.283 MB -> 149.281 MB.\n====== fj-kmeans (concurrency) [default], iteration 0 completed (9005.351 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 174.017 ms, heap usage 213.204 MB -> 149.328 MB.\n====== fj-kmeans (concurrency) [default], iteration 1 completed (10174.504 ms) ======\n====== rx-scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 119.598 ms, heap usage 173.866 MB -> 100.311 MB.\n====== rx-scrabble (functional) [default], iteration 0 completed (473.417 ms) ======\n====== rx-scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 140.407 ms, heap usage 253.311 MB -> 100.977 MB.\n====== rx-scrabble (functional) [default], iteration 1 completed (184.937 ms) ======\n====== db-shootout (database) [default], iteration 0 started ======\nGC before operation: completed in 98.698 ms, heap usage 122.359 MB -> 103.088 MB.\n====== db-shootout (database) [default], iteration 0 completed (7306.584 ms) ======\n====== db-shootout (database) [default], iteration 1 started ======\nGC before operation: completed in 137.252 ms, heap usage 324.700 MB -> 173.488 MB.\n====== db-shootout (database) [default], iteration 1 completed (7306.169 ms) ======\nCreating graph database...\nLoading resources...\nPopulating database...\nfinagle-http on :45775 spawning 2 client and default number of server workers.\n====== finagle-http (web) [default], iteration 0 started ======\nGC before operation: completed in 96.401 ms, heap usage 293.434 MB -> 110.941 MB.\n====== finagle-http (web) [default], iteration 0 completed (10148.061 ms) ======\n====== finagle-http (web) [default], iteration 1 started ======\nGC before operation: completed in 161.326 ms, heap usage 253.576 MB -> 113.819 MB.\n====== finagle-http (web) [default], iteration 1 completed (4745.532 ms) ======\n====== reactors (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 109.658 ms, heap usage 159.231 MB -> 115.585 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 0 completed (14358.711 ms) ======\n====== reactors (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 92.642 ms, heap usage 720.591 MB -> 116.771 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 1 completed (12322.901 ms) ======\nNOTE: 'dec-tree' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== dec-tree (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 110.542 ms, heap usage 222.390 MB -> 129.888 MB.\n====== dec-tree (apache-spark) [default], iteration 0 completed (8414.467 ms) ======\n====== dec-tree (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 167.590 ms, heap usage 293.302 MB -> 161.154 MB.\n====== dec-tree (apache-spark) [default], iteration 1 completed (2199.388 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 0 started ======\nGC before operation: completed in 131.572 ms, heap usage 364.941 MB -> 144.116 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 262\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 42\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 4\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 13\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 12\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 8\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 4\tmaxttc = 262\tfailed = 0\ttotal = 4\nSHORT_TRAVERSAL:  successful = 6\tmaxttc = 13\tfailed = 0\ttotal = 6\nSHORT_TRAVERSAL_RO:  successful = 10\tmaxttc = 5\tfailed = 0\ttotal = 10\nOPERATION:  successful = 8\tmaxttc = 8\tfailed = 0\ttotal = 8\nOPERATION_RO:  successful = 12\tmaxttc = 2\tfailed = 0\ttotal = 12\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 119.05 op/s (119.05 op/s including failed)\nElapsed time: 0.34 s\n====== scala-stm-bench7 (scala) [default], iteration 0 completed (1965.254 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 1 started ======\nGC before operation: completed in 143.376 ms, heap usage 542.616 MB -> 144.416 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 355\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 6\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 21\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 8\tmaxttc = 355\tfailed = 0\ttotal = 8\nSHORT_TRAVERSAL:  successful = 12\tmaxttc = 13\tfailed = 0\ttotal = 12\nSHORT_TRAVERSAL_RO:  successful = 20\tmaxttc = 21\tfailed = 0\ttotal = 20\nOPERATION:  successful = 16\tmaxttc = 8\tfailed = 0\ttotal = 16\nOPERATION_RO:  successful = 24\tmaxttc = 2\tfailed = 0\ttotal = 24\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 184.76 op/s (184.76 op/s including failed)\nElapsed time: 0.43 s\n====== scala-stm-bench7 (scala) [default], iteration 1 completed (1520.757 ms) ======\nNOTE: 'naive-bayes' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== naive-bayes (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 168.652 ms, heap usage 402.908 MB -> 155.665 MB.\n====== naive-bayes (apache-spark) [default], iteration 0 completed (38459.475 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 223.365 ms, heap usage 768.209 MB -> 379.081 MB.\n====== naive-bayes (apache-spark) [default], iteration 1 completed (22443.402 ms) ======\nNOTE: 'als' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== als (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 172.998 ms, heap usage 761.633 MB -> 177.000 MB.\n====== als (apache-spark) [default], iteration 0 completed (17943.165 ms) ======\n====== als (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 215.553 ms, heap usage 444.207 MB -> 201.906 MB.\n====== als (apache-spark) [default], iteration 1 completed (11371.264 ms) ======\n====== par-mnemonics (functional) [default], iteration 0 started ======\nGC before operation: completed in 167.128 ms, heap usage 807.826 MB -> 188.115 MB.\n====== par-mnemonics (functional) [default], iteration 0 completed (4686.560 ms) ======\n====== par-mnemonics (functional) [default], iteration 1 started ======\nGC before operation: completed in 186.235 ms, heap usage 319.471 MB -> 187.992 MB.\n====== par-mnemonics (functional) [default], iteration 1 completed (4120.639 ms) ======\n====== scala-kmeans (scala) [default], iteration 0 started ======\nGC before operation: completed in 270.290 ms, heap usage 552.479 MB -> 210.291 MB.\n====== scala-kmeans (scala) [default], iteration 0 completed (310.795 ms) ======\n====== scala-kmeans (scala) [default], iteration 1 started ======\nGC before operation: completed in 198.226 ms, heap usage 239.291 MB -> 210.323 MB.\n====== scala-kmeans (scala) [default], iteration 1 completed (157.114 ms) ======\n====== philosophers (scala) [default], iteration 0 started ======\nGC before operation: completed in 212.293 ms, heap usage 241.823 MB -> 189.325 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 0 completed (1067.200 ms) ======\n====== philosophers (scala) [default], iteration 1 started ======\nGC before operation: completed in 214.823 ms, heap usage 515.825 MB -> 189.246 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 1 completed (507.249 ms) ======\n"
    },
    "log-regression": {
        "times": [
            8211.225,
            2022.986
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 102.504 ms, heap usage 148.000 MB -> 75.908 MB.\n====== scrabble (functional) [default], iteration 0 completed (1325.948 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 88.050 ms, heap usage 323.286 MB -> 75.986 MB.\n====== scrabble (functional) [default], iteration 1 completed (616.100 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 27.981 ms, heap usage 647.500 MB -> 29.629 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (19682.231 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 148.599 ms, heap usage 636.551 MB -> 148.832 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (11144.730 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 29.648 ms, heap usage 412.984 MB -> 33.579 MB.\n====== future-genetic (functional) [default], iteration 0 completed (9272.502 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 34.018 ms, heap usage 192.031 MB -> 34.354 MB.\n====== future-genetic (functional) [default], iteration 1 completed (6467.272 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 59.891 ms, heap usage 79.097 MB -> 35.249 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (17557.505 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 86.265 ms, heap usage 373.843 MB -> 66.974 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (14029.363 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 2 (out of 2) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 137.156 ms, heap usage 194.539 MB -> 88.683 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923222022363 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186103233526 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112280854148 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489559965613 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743266133333 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299259573378 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.897937035152542 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701958880671.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (20344.672 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 121.576 ms, heap usage 172.394 MB -> 104.696 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923222022363 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186103233526 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112280854148 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489559965613 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743266133333 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299259573378 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.897937035152542 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701958880671.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (13437.705 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 71.361 ms, heap usage 401.691 MB -> 61.235 MB.\n====== scala-doku (scala) [default], iteration 0 completed (3772.610 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 75.123 ms, heap usage 138.735 MB -> 61.274 MB.\n====== scala-doku (scala) [default], iteration 1 completed (3181.526 ms) ======\nNOTE: 'chi-square' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== chi-square (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 153.320 ms, heap usage 306.961 MB -> 66.511 MB.\n====== chi-square (apache-spark) [default], iteration 0 completed (4336.200 ms) ======\n====== chi-square (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 199.334 ms, heap usage 478.443 MB -> 212.488 MB.\n====== chi-square (apache-spark) [default], iteration 1 completed (1061.151 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 234.375 ms, heap usage 520.283 MB -> 149.281 MB.\n====== fj-kmeans (concurrency) [default], iteration 0 completed (9005.351 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 174.017 ms, heap usage 213.204 MB -> 149.328 MB.\n====== fj-kmeans (concurrency) [default], iteration 1 completed (10174.504 ms) ======\n====== rx-scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 119.598 ms, heap usage 173.866 MB -> 100.311 MB.\n====== rx-scrabble (functional) [default], iteration 0 completed (473.417 ms) ======\n====== rx-scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 140.407 ms, heap usage 253.311 MB -> 100.977 MB.\n====== rx-scrabble (functional) [default], iteration 1 completed (184.937 ms) ======\n====== db-shootout (database) [default], iteration 0 started ======\nGC before operation: completed in 98.698 ms, heap usage 122.359 MB -> 103.088 MB.\n====== db-shootout (database) [default], iteration 0 completed (7306.584 ms) ======\n====== db-shootout (database) [default], iteration 1 started ======\nGC before operation: completed in 137.252 ms, heap usage 324.700 MB -> 173.488 MB.\n====== db-shootout (database) [default], iteration 1 completed (7306.169 ms) ======\nCreating graph database...\nLoading resources...\nPopulating database...\nfinagle-http on :45775 spawning 2 client and default number of server workers.\n====== finagle-http (web) [default], iteration 0 started ======\nGC before operation: completed in 96.401 ms, heap usage 293.434 MB -> 110.941 MB.\n====== finagle-http (web) [default], iteration 0 completed (10148.061 ms) ======\n====== finagle-http (web) [default], iteration 1 started ======\nGC before operation: completed in 161.326 ms, heap usage 253.576 MB -> 113.819 MB.\n====== finagle-http (web) [default], iteration 1 completed (4745.532 ms) ======\n====== reactors (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 109.658 ms, heap usage 159.231 MB -> 115.585 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 0 completed (14358.711 ms) ======\n====== reactors (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 92.642 ms, heap usage 720.591 MB -> 116.771 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 1 completed (12322.901 ms) ======\nNOTE: 'dec-tree' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== dec-tree (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 110.542 ms, heap usage 222.390 MB -> 129.888 MB.\n====== dec-tree (apache-spark) [default], iteration 0 completed (8414.467 ms) ======\n====== dec-tree (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 167.590 ms, heap usage 293.302 MB -> 161.154 MB.\n====== dec-tree (apache-spark) [default], iteration 1 completed (2199.388 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 0 started ======\nGC before operation: completed in 131.572 ms, heap usage 364.941 MB -> 144.116 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 262\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 42\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 4\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 13\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 12\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 8\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 4\tmaxttc = 262\tfailed = 0\ttotal = 4\nSHORT_TRAVERSAL:  successful = 6\tmaxttc = 13\tfailed = 0\ttotal = 6\nSHORT_TRAVERSAL_RO:  successful = 10\tmaxttc = 5\tfailed = 0\ttotal = 10\nOPERATION:  successful = 8\tmaxttc = 8\tfailed = 0\ttotal = 8\nOPERATION_RO:  successful = 12\tmaxttc = 2\tfailed = 0\ttotal = 12\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 119.05 op/s (119.05 op/s including failed)\nElapsed time: 0.34 s\n====== scala-stm-bench7 (scala) [default], iteration 0 completed (1965.254 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 1 started ======\nGC before operation: completed in 143.376 ms, heap usage 542.616 MB -> 144.416 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 355\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 6\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 21\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 8\tmaxttc = 355\tfailed = 0\ttotal = 8\nSHORT_TRAVERSAL:  successful = 12\tmaxttc = 13\tfailed = 0\ttotal = 12\nSHORT_TRAVERSAL_RO:  successful = 20\tmaxttc = 21\tfailed = 0\ttotal = 20\nOPERATION:  successful = 16\tmaxttc = 8\tfailed = 0\ttotal = 16\nOPERATION_RO:  successful = 24\tmaxttc = 2\tfailed = 0\ttotal = 24\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 184.76 op/s (184.76 op/s including failed)\nElapsed time: 0.43 s\n====== scala-stm-bench7 (scala) [default], iteration 1 completed (1520.757 ms) ======\nNOTE: 'naive-bayes' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== naive-bayes (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 168.652 ms, heap usage 402.908 MB -> 155.665 MB.\n====== naive-bayes (apache-spark) [default], iteration 0 completed (38459.475 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 223.365 ms, heap usage 768.209 MB -> 379.081 MB.\n====== naive-bayes (apache-spark) [default], iteration 1 completed (22443.402 ms) ======\nNOTE: 'als' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== als (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 172.998 ms, heap usage 761.633 MB -> 177.000 MB.\n====== als (apache-spark) [default], iteration 0 completed (17943.165 ms) ======\n====== als (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 215.553 ms, heap usage 444.207 MB -> 201.906 MB.\n====== als (apache-spark) [default], iteration 1 completed (11371.264 ms) ======\n====== par-mnemonics (functional) [default], iteration 0 started ======\nGC before operation: completed in 167.128 ms, heap usage 807.826 MB -> 188.115 MB.\n====== par-mnemonics (functional) [default], iteration 0 completed (4686.560 ms) ======\n====== par-mnemonics (functional) [default], iteration 1 started ======\nGC before operation: completed in 186.235 ms, heap usage 319.471 MB -> 187.992 MB.\n====== par-mnemonics (functional) [default], iteration 1 completed (4120.639 ms) ======\n====== scala-kmeans (scala) [default], iteration 0 started ======\nGC before operation: completed in 270.290 ms, heap usage 552.479 MB -> 210.291 MB.\n====== scala-kmeans (scala) [default], iteration 0 completed (310.795 ms) ======\n====== scala-kmeans (scala) [default], iteration 1 started ======\nGC before operation: completed in 198.226 ms, heap usage 239.291 MB -> 210.323 MB.\n====== scala-kmeans (scala) [default], iteration 1 completed (157.114 ms) ======\n====== philosophers (scala) [default], iteration 0 started ======\nGC before operation: completed in 212.293 ms, heap usage 241.823 MB -> 189.325 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 0 completed (1067.200 ms) ======\n====== philosophers (scala) [default], iteration 1 started ======\nGC before operation: completed in 214.823 ms, heap usage 515.825 MB -> 189.246 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 1 completed (507.249 ms) ======\nNOTE: 'log-regression' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== log-regression (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 204.915 ms, heap usage 407.753 MB -> 201.115 MB.\n====== log-regression (apache-spark) [default], iteration 0 completed (8211.225 ms) ======\n====== log-regression (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 229.129 ms, heap usage 822.246 MB -> 281.884 MB.\n====== log-regression (apache-spark) [default], iteration 1 completed (2022.986 ms) ======\n"
    },
    "gauss-mix": {
        "times": [
            31857.003,
            27327.487
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 102.504 ms, heap usage 148.000 MB -> 75.908 MB.\n====== scrabble (functional) [default], iteration 0 completed (1325.948 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 88.050 ms, heap usage 323.286 MB -> 75.986 MB.\n====== scrabble (functional) [default], iteration 1 completed (616.100 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 27.981 ms, heap usage 647.500 MB -> 29.629 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (19682.231 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 148.599 ms, heap usage 636.551 MB -> 148.832 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (11144.730 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 29.648 ms, heap usage 412.984 MB -> 33.579 MB.\n====== future-genetic (functional) [default], iteration 0 completed (9272.502 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 34.018 ms, heap usage 192.031 MB -> 34.354 MB.\n====== future-genetic (functional) [default], iteration 1 completed (6467.272 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 59.891 ms, heap usage 79.097 MB -> 35.249 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (17557.505 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 86.265 ms, heap usage 373.843 MB -> 66.974 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (14029.363 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 2 (out of 2) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 137.156 ms, heap usage 194.539 MB -> 88.683 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923222022363 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186103233526 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112280854148 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489559965613 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743266133333 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299259573378 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.897937035152542 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701958880671.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (20344.672 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 121.576 ms, heap usage 172.394 MB -> 104.696 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923222022363 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186103233526 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112280854148 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489559965613 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743266133333 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299259573378 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.897937035152542 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701958880671.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (13437.705 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 71.361 ms, heap usage 401.691 MB -> 61.235 MB.\n====== scala-doku (scala) [default], iteration 0 completed (3772.610 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 75.123 ms, heap usage 138.735 MB -> 61.274 MB.\n====== scala-doku (scala) [default], iteration 1 completed (3181.526 ms) ======\nNOTE: 'chi-square' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== chi-square (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 153.320 ms, heap usage 306.961 MB -> 66.511 MB.\n====== chi-square (apache-spark) [default], iteration 0 completed (4336.200 ms) ======\n====== chi-square (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 199.334 ms, heap usage 478.443 MB -> 212.488 MB.\n====== chi-square (apache-spark) [default], iteration 1 completed (1061.151 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 234.375 ms, heap usage 520.283 MB -> 149.281 MB.\n====== fj-kmeans (concurrency) [default], iteration 0 completed (9005.351 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 174.017 ms, heap usage 213.204 MB -> 149.328 MB.\n====== fj-kmeans (concurrency) [default], iteration 1 completed (10174.504 ms) ======\n====== rx-scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 119.598 ms, heap usage 173.866 MB -> 100.311 MB.\n====== rx-scrabble (functional) [default], iteration 0 completed (473.417 ms) ======\n====== rx-scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 140.407 ms, heap usage 253.311 MB -> 100.977 MB.\n====== rx-scrabble (functional) [default], iteration 1 completed (184.937 ms) ======\n====== db-shootout (database) [default], iteration 0 started ======\nGC before operation: completed in 98.698 ms, heap usage 122.359 MB -> 103.088 MB.\n====== db-shootout (database) [default], iteration 0 completed (7306.584 ms) ======\n====== db-shootout (database) [default], iteration 1 started ======\nGC before operation: completed in 137.252 ms, heap usage 324.700 MB -> 173.488 MB.\n====== db-shootout (database) [default], iteration 1 completed (7306.169 ms) ======\nCreating graph database...\nLoading resources...\nPopulating database...\nfinagle-http on :45775 spawning 2 client and default number of server workers.\n====== finagle-http (web) [default], iteration 0 started ======\nGC before operation: completed in 96.401 ms, heap usage 293.434 MB -> 110.941 MB.\n====== finagle-http (web) [default], iteration 0 completed (10148.061 ms) ======\n====== finagle-http (web) [default], iteration 1 started ======\nGC before operation: completed in 161.326 ms, heap usage 253.576 MB -> 113.819 MB.\n====== finagle-http (web) [default], iteration 1 completed (4745.532 ms) ======\n====== reactors (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 109.658 ms, heap usage 159.231 MB -> 115.585 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 0 completed (14358.711 ms) ======\n====== reactors (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 92.642 ms, heap usage 720.591 MB -> 116.771 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 1 completed (12322.901 ms) ======\nNOTE: 'dec-tree' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== dec-tree (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 110.542 ms, heap usage 222.390 MB -> 129.888 MB.\n====== dec-tree (apache-spark) [default], iteration 0 completed (8414.467 ms) ======\n====== dec-tree (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 167.590 ms, heap usage 293.302 MB -> 161.154 MB.\n====== dec-tree (apache-spark) [default], iteration 1 completed (2199.388 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 0 started ======\nGC before operation: completed in 131.572 ms, heap usage 364.941 MB -> 144.116 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 262\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 42\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 4\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 13\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 12\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 8\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 4\tmaxttc = 262\tfailed = 0\ttotal = 4\nSHORT_TRAVERSAL:  successful = 6\tmaxttc = 13\tfailed = 0\ttotal = 6\nSHORT_TRAVERSAL_RO:  successful = 10\tmaxttc = 5\tfailed = 0\ttotal = 10\nOPERATION:  successful = 8\tmaxttc = 8\tfailed = 0\ttotal = 8\nOPERATION_RO:  successful = 12\tmaxttc = 2\tfailed = 0\ttotal = 12\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 119.05 op/s (119.05 op/s including failed)\nElapsed time: 0.34 s\n====== scala-stm-bench7 (scala) [default], iteration 0 completed (1965.254 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 1 started ======\nGC before operation: completed in 143.376 ms, heap usage 542.616 MB -> 144.416 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 355\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 6\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 21\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 8\tmaxttc = 355\tfailed = 0\ttotal = 8\nSHORT_TRAVERSAL:  successful = 12\tmaxttc = 13\tfailed = 0\ttotal = 12\nSHORT_TRAVERSAL_RO:  successful = 20\tmaxttc = 21\tfailed = 0\ttotal = 20\nOPERATION:  successful = 16\tmaxttc = 8\tfailed = 0\ttotal = 16\nOPERATION_RO:  successful = 24\tmaxttc = 2\tfailed = 0\ttotal = 24\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 184.76 op/s (184.76 op/s including failed)\nElapsed time: 0.43 s\n====== scala-stm-bench7 (scala) [default], iteration 1 completed (1520.757 ms) ======\nNOTE: 'naive-bayes' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== naive-bayes (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 168.652 ms, heap usage 402.908 MB -> 155.665 MB.\n====== naive-bayes (apache-spark) [default], iteration 0 completed (38459.475 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 223.365 ms, heap usage 768.209 MB -> 379.081 MB.\n====== naive-bayes (apache-spark) [default], iteration 1 completed (22443.402 ms) ======\nNOTE: 'als' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== als (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 172.998 ms, heap usage 761.633 MB -> 177.000 MB.\n====== als (apache-spark) [default], iteration 0 completed (17943.165 ms) ======\n====== als (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 215.553 ms, heap usage 444.207 MB -> 201.906 MB.\n====== als (apache-spark) [default], iteration 1 completed (11371.264 ms) ======\n====== par-mnemonics (functional) [default], iteration 0 started ======\nGC before operation: completed in 167.128 ms, heap usage 807.826 MB -> 188.115 MB.\n====== par-mnemonics (functional) [default], iteration 0 completed (4686.560 ms) ======\n====== par-mnemonics (functional) [default], iteration 1 started ======\nGC before operation: completed in 186.235 ms, heap usage 319.471 MB -> 187.992 MB.\n====== par-mnemonics (functional) [default], iteration 1 completed (4120.639 ms) ======\n====== scala-kmeans (scala) [default], iteration 0 started ======\nGC before operation: completed in 270.290 ms, heap usage 552.479 MB -> 210.291 MB.\n====== scala-kmeans (scala) [default], iteration 0 completed (310.795 ms) ======\n====== scala-kmeans (scala) [default], iteration 1 started ======\nGC before operation: completed in 198.226 ms, heap usage 239.291 MB -> 210.323 MB.\n====== scala-kmeans (scala) [default], iteration 1 completed (157.114 ms) ======\n====== philosophers (scala) [default], iteration 0 started ======\nGC before operation: completed in 212.293 ms, heap usage 241.823 MB -> 189.325 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 0 completed (1067.200 ms) ======\n====== philosophers (scala) [default], iteration 1 started ======\nGC before operation: completed in 214.823 ms, heap usage 515.825 MB -> 189.246 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 1 completed (507.249 ms) ======\nNOTE: 'log-regression' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== log-regression (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 204.915 ms, heap usage 407.753 MB -> 201.115 MB.\n====== log-regression (apache-spark) [default], iteration 0 completed (8211.225 ms) ======\n====== log-regression (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 229.129 ms, heap usage 822.246 MB -> 281.884 MB.\n====== log-regression (apache-spark) [default], iteration 1 completed (2022.986 ms) ======\nNOTE: 'gauss-mix' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== gauss-mix (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 224.490 ms, heap usage 604.816 MB -> 220.445 MB.\nAccuracy (validation) = 0.97667 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99333 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.91556 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99444 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 0 completed (31857.003 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 283.267 ms, heap usage 240.223 MB -> 227.140 MB.\nAccuracy (validation) = 0.97667 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99333 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.91556 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99444 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 1 completed (27327.487 ms) ======\n"
    },
    "mnemonics": {
        "times": [
            5294.098,
            5201.483
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 102.504 ms, heap usage 148.000 MB -> 75.908 MB.\n====== scrabble (functional) [default], iteration 0 completed (1325.948 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 88.050 ms, heap usage 323.286 MB -> 75.986 MB.\n====== scrabble (functional) [default], iteration 1 completed (616.100 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 27.981 ms, heap usage 647.500 MB -> 29.629 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (19682.231 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 148.599 ms, heap usage 636.551 MB -> 148.832 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (11144.730 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 29.648 ms, heap usage 412.984 MB -> 33.579 MB.\n====== future-genetic (functional) [default], iteration 0 completed (9272.502 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 34.018 ms, heap usage 192.031 MB -> 34.354 MB.\n====== future-genetic (functional) [default], iteration 1 completed (6467.272 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 59.891 ms, heap usage 79.097 MB -> 35.249 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (17557.505 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 86.265 ms, heap usage 373.843 MB -> 66.974 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (14029.363 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 2 (out of 2) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 137.156 ms, heap usage 194.539 MB -> 88.683 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923222022363 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186103233526 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112280854148 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489559965613 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743266133333 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299259573378 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.897937035152542 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701958880671.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (20344.672 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 121.576 ms, heap usage 172.394 MB -> 104.696 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923222022363 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186103233526 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112280854148 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489559965613 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743266133333 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299259573378 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.897937035152542 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701958880671.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (13437.705 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 71.361 ms, heap usage 401.691 MB -> 61.235 MB.\n====== scala-doku (scala) [default], iteration 0 completed (3772.610 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 75.123 ms, heap usage 138.735 MB -> 61.274 MB.\n====== scala-doku (scala) [default], iteration 1 completed (3181.526 ms) ======\nNOTE: 'chi-square' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== chi-square (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 153.320 ms, heap usage 306.961 MB -> 66.511 MB.\n====== chi-square (apache-spark) [default], iteration 0 completed (4336.200 ms) ======\n====== chi-square (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 199.334 ms, heap usage 478.443 MB -> 212.488 MB.\n====== chi-square (apache-spark) [default], iteration 1 completed (1061.151 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 234.375 ms, heap usage 520.283 MB -> 149.281 MB.\n====== fj-kmeans (concurrency) [default], iteration 0 completed (9005.351 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 174.017 ms, heap usage 213.204 MB -> 149.328 MB.\n====== fj-kmeans (concurrency) [default], iteration 1 completed (10174.504 ms) ======\n====== rx-scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 119.598 ms, heap usage 173.866 MB -> 100.311 MB.\n====== rx-scrabble (functional) [default], iteration 0 completed (473.417 ms) ======\n====== rx-scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 140.407 ms, heap usage 253.311 MB -> 100.977 MB.\n====== rx-scrabble (functional) [default], iteration 1 completed (184.937 ms) ======\n====== db-shootout (database) [default], iteration 0 started ======\nGC before operation: completed in 98.698 ms, heap usage 122.359 MB -> 103.088 MB.\n====== db-shootout (database) [default], iteration 0 completed (7306.584 ms) ======\n====== db-shootout (database) [default], iteration 1 started ======\nGC before operation: completed in 137.252 ms, heap usage 324.700 MB -> 173.488 MB.\n====== db-shootout (database) [default], iteration 1 completed (7306.169 ms) ======\nCreating graph database...\nLoading resources...\nPopulating database...\nfinagle-http on :45775 spawning 2 client and default number of server workers.\n====== finagle-http (web) [default], iteration 0 started ======\nGC before operation: completed in 96.401 ms, heap usage 293.434 MB -> 110.941 MB.\n====== finagle-http (web) [default], iteration 0 completed (10148.061 ms) ======\n====== finagle-http (web) [default], iteration 1 started ======\nGC before operation: completed in 161.326 ms, heap usage 253.576 MB -> 113.819 MB.\n====== finagle-http (web) [default], iteration 1 completed (4745.532 ms) ======\n====== reactors (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 109.658 ms, heap usage 159.231 MB -> 115.585 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 0 completed (14358.711 ms) ======\n====== reactors (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 92.642 ms, heap usage 720.591 MB -> 116.771 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 1 completed (12322.901 ms) ======\nNOTE: 'dec-tree' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== dec-tree (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 110.542 ms, heap usage 222.390 MB -> 129.888 MB.\n====== dec-tree (apache-spark) [default], iteration 0 completed (8414.467 ms) ======\n====== dec-tree (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 167.590 ms, heap usage 293.302 MB -> 161.154 MB.\n====== dec-tree (apache-spark) [default], iteration 1 completed (2199.388 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 0 started ======\nGC before operation: completed in 131.572 ms, heap usage 364.941 MB -> 144.116 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 262\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 42\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 4\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 13\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 12\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 8\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 4\tmaxttc = 262\tfailed = 0\ttotal = 4\nSHORT_TRAVERSAL:  successful = 6\tmaxttc = 13\tfailed = 0\ttotal = 6\nSHORT_TRAVERSAL_RO:  successful = 10\tmaxttc = 5\tfailed = 0\ttotal = 10\nOPERATION:  successful = 8\tmaxttc = 8\tfailed = 0\ttotal = 8\nOPERATION_RO:  successful = 12\tmaxttc = 2\tfailed = 0\ttotal = 12\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 119.05 op/s (119.05 op/s including failed)\nElapsed time: 0.34 s\n====== scala-stm-bench7 (scala) [default], iteration 0 completed (1965.254 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 1 started ======\nGC before operation: completed in 143.376 ms, heap usage 542.616 MB -> 144.416 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 355\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 6\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 21\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 8\tmaxttc = 355\tfailed = 0\ttotal = 8\nSHORT_TRAVERSAL:  successful = 12\tmaxttc = 13\tfailed = 0\ttotal = 12\nSHORT_TRAVERSAL_RO:  successful = 20\tmaxttc = 21\tfailed = 0\ttotal = 20\nOPERATION:  successful = 16\tmaxttc = 8\tfailed = 0\ttotal = 16\nOPERATION_RO:  successful = 24\tmaxttc = 2\tfailed = 0\ttotal = 24\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 184.76 op/s (184.76 op/s including failed)\nElapsed time: 0.43 s\n====== scala-stm-bench7 (scala) [default], iteration 1 completed (1520.757 ms) ======\nNOTE: 'naive-bayes' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== naive-bayes (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 168.652 ms, heap usage 402.908 MB -> 155.665 MB.\n====== naive-bayes (apache-spark) [default], iteration 0 completed (38459.475 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 223.365 ms, heap usage 768.209 MB -> 379.081 MB.\n====== naive-bayes (apache-spark) [default], iteration 1 completed (22443.402 ms) ======\nNOTE: 'als' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== als (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 172.998 ms, heap usage 761.633 MB -> 177.000 MB.\n====== als (apache-spark) [default], iteration 0 completed (17943.165 ms) ======\n====== als (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 215.553 ms, heap usage 444.207 MB -> 201.906 MB.\n====== als (apache-spark) [default], iteration 1 completed (11371.264 ms) ======\n====== par-mnemonics (functional) [default], iteration 0 started ======\nGC before operation: completed in 167.128 ms, heap usage 807.826 MB -> 188.115 MB.\n====== par-mnemonics (functional) [default], iteration 0 completed (4686.560 ms) ======\n====== par-mnemonics (functional) [default], iteration 1 started ======\nGC before operation: completed in 186.235 ms, heap usage 319.471 MB -> 187.992 MB.\n====== par-mnemonics (functional) [default], iteration 1 completed (4120.639 ms) ======\n====== scala-kmeans (scala) [default], iteration 0 started ======\nGC before operation: completed in 270.290 ms, heap usage 552.479 MB -> 210.291 MB.\n====== scala-kmeans (scala) [default], iteration 0 completed (310.795 ms) ======\n====== scala-kmeans (scala) [default], iteration 1 started ======\nGC before operation: completed in 198.226 ms, heap usage 239.291 MB -> 210.323 MB.\n====== scala-kmeans (scala) [default], iteration 1 completed (157.114 ms) ======\n====== philosophers (scala) [default], iteration 0 started ======\nGC before operation: completed in 212.293 ms, heap usage 241.823 MB -> 189.325 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 0 completed (1067.200 ms) ======\n====== philosophers (scala) [default], iteration 1 started ======\nGC before operation: completed in 214.823 ms, heap usage 515.825 MB -> 189.246 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 1 completed (507.249 ms) ======\nNOTE: 'log-regression' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== log-regression (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 204.915 ms, heap usage 407.753 MB -> 201.115 MB.\n====== log-regression (apache-spark) [default], iteration 0 completed (8211.225 ms) ======\n====== log-regression (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 229.129 ms, heap usage 822.246 MB -> 281.884 MB.\n====== log-regression (apache-spark) [default], iteration 1 completed (2022.986 ms) ======\nNOTE: 'gauss-mix' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== gauss-mix (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 224.490 ms, heap usage 604.816 MB -> 220.445 MB.\nAccuracy (validation) = 0.97667 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99333 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.91556 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99444 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 0 completed (31857.003 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 283.267 ms, heap usage 240.223 MB -> 227.140 MB.\nAccuracy (validation) = 0.97667 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99333 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.91556 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99444 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 1 completed (27327.487 ms) ======\n====== mnemonics (functional) [default], iteration 0 started ======\nGC before operation: completed in 212.268 ms, heap usage 575.353 MB -> 223.266 MB.\n====== mnemonics (functional) [default], iteration 0 completed (5294.098 ms) ======\n====== mnemonics (functional) [default], iteration 1 started ======\nGC before operation: completed in 210.002 ms, heap usage 344.071 MB -> 223.191 MB.\n====== mnemonics (functional) [default], iteration 1 completed (5201.483 ms) ======\n"
    },
    "dotty": {
        "times": [
            12903.008,
            5069.28
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 102.504 ms, heap usage 148.000 MB -> 75.908 MB.\n====== scrabble (functional) [default], iteration 0 completed (1325.948 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 88.050 ms, heap usage 323.286 MB -> 75.986 MB.\n====== scrabble (functional) [default], iteration 1 completed (616.100 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 27.981 ms, heap usage 647.500 MB -> 29.629 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (19682.231 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 148.599 ms, heap usage 636.551 MB -> 148.832 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (11144.730 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 29.648 ms, heap usage 412.984 MB -> 33.579 MB.\n====== future-genetic (functional) [default], iteration 0 completed (9272.502 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 34.018 ms, heap usage 192.031 MB -> 34.354 MB.\n====== future-genetic (functional) [default], iteration 1 completed (6467.272 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 59.891 ms, heap usage 79.097 MB -> 35.249 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (17557.505 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 86.265 ms, heap usage 373.843 MB -> 66.974 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (14029.363 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 2 (out of 2) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 137.156 ms, heap usage 194.539 MB -> 88.683 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923222022363 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186103233526 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112280854148 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489559965613 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743266133333 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299259573378 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.897937035152542 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701958880671.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (20344.672 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 121.576 ms, heap usage 172.394 MB -> 104.696 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923222022363 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186103233526 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112280854148 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489559965613 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743266133333 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299259573378 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.897937035152542 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701958880671.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (13437.705 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 71.361 ms, heap usage 401.691 MB -> 61.235 MB.\n====== scala-doku (scala) [default], iteration 0 completed (3772.610 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 75.123 ms, heap usage 138.735 MB -> 61.274 MB.\n====== scala-doku (scala) [default], iteration 1 completed (3181.526 ms) ======\nNOTE: 'chi-square' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== chi-square (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 153.320 ms, heap usage 306.961 MB -> 66.511 MB.\n====== chi-square (apache-spark) [default], iteration 0 completed (4336.200 ms) ======\n====== chi-square (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 199.334 ms, heap usage 478.443 MB -> 212.488 MB.\n====== chi-square (apache-spark) [default], iteration 1 completed (1061.151 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 234.375 ms, heap usage 520.283 MB -> 149.281 MB.\n====== fj-kmeans (concurrency) [default], iteration 0 completed (9005.351 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 174.017 ms, heap usage 213.204 MB -> 149.328 MB.\n====== fj-kmeans (concurrency) [default], iteration 1 completed (10174.504 ms) ======\n====== rx-scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 119.598 ms, heap usage 173.866 MB -> 100.311 MB.\n====== rx-scrabble (functional) [default], iteration 0 completed (473.417 ms) ======\n====== rx-scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 140.407 ms, heap usage 253.311 MB -> 100.977 MB.\n====== rx-scrabble (functional) [default], iteration 1 completed (184.937 ms) ======\n====== db-shootout (database) [default], iteration 0 started ======\nGC before operation: completed in 98.698 ms, heap usage 122.359 MB -> 103.088 MB.\n====== db-shootout (database) [default], iteration 0 completed (7306.584 ms) ======\n====== db-shootout (database) [default], iteration 1 started ======\nGC before operation: completed in 137.252 ms, heap usage 324.700 MB -> 173.488 MB.\n====== db-shootout (database) [default], iteration 1 completed (7306.169 ms) ======\nCreating graph database...\nLoading resources...\nPopulating database...\nfinagle-http on :45775 spawning 2 client and default number of server workers.\n====== finagle-http (web) [default], iteration 0 started ======\nGC before operation: completed in 96.401 ms, heap usage 293.434 MB -> 110.941 MB.\n====== finagle-http (web) [default], iteration 0 completed (10148.061 ms) ======\n====== finagle-http (web) [default], iteration 1 started ======\nGC before operation: completed in 161.326 ms, heap usage 253.576 MB -> 113.819 MB.\n====== finagle-http (web) [default], iteration 1 completed (4745.532 ms) ======\n====== reactors (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 109.658 ms, heap usage 159.231 MB -> 115.585 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 0 completed (14358.711 ms) ======\n====== reactors (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 92.642 ms, heap usage 720.591 MB -> 116.771 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 1 completed (12322.901 ms) ======\nNOTE: 'dec-tree' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== dec-tree (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 110.542 ms, heap usage 222.390 MB -> 129.888 MB.\n====== dec-tree (apache-spark) [default], iteration 0 completed (8414.467 ms) ======\n====== dec-tree (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 167.590 ms, heap usage 293.302 MB -> 161.154 MB.\n====== dec-tree (apache-spark) [default], iteration 1 completed (2199.388 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 0 started ======\nGC before operation: completed in 131.572 ms, heap usage 364.941 MB -> 144.116 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 262\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 42\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 4\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 13\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 12\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 8\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 4\tmaxttc = 262\tfailed = 0\ttotal = 4\nSHORT_TRAVERSAL:  successful = 6\tmaxttc = 13\tfailed = 0\ttotal = 6\nSHORT_TRAVERSAL_RO:  successful = 10\tmaxttc = 5\tfailed = 0\ttotal = 10\nOPERATION:  successful = 8\tmaxttc = 8\tfailed = 0\ttotal = 8\nOPERATION_RO:  successful = 12\tmaxttc = 2\tfailed = 0\ttotal = 12\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 119.05 op/s (119.05 op/s including failed)\nElapsed time: 0.34 s\n====== scala-stm-bench7 (scala) [default], iteration 0 completed (1965.254 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 1 started ======\nGC before operation: completed in 143.376 ms, heap usage 542.616 MB -> 144.416 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 355\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 6\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 21\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 8\tmaxttc = 355\tfailed = 0\ttotal = 8\nSHORT_TRAVERSAL:  successful = 12\tmaxttc = 13\tfailed = 0\ttotal = 12\nSHORT_TRAVERSAL_RO:  successful = 20\tmaxttc = 21\tfailed = 0\ttotal = 20\nOPERATION:  successful = 16\tmaxttc = 8\tfailed = 0\ttotal = 16\nOPERATION_RO:  successful = 24\tmaxttc = 2\tfailed = 0\ttotal = 24\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 184.76 op/s (184.76 op/s including failed)\nElapsed time: 0.43 s\n====== scala-stm-bench7 (scala) [default], iteration 1 completed (1520.757 ms) ======\nNOTE: 'naive-bayes' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== naive-bayes (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 168.652 ms, heap usage 402.908 MB -> 155.665 MB.\n====== naive-bayes (apache-spark) [default], iteration 0 completed (38459.475 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 223.365 ms, heap usage 768.209 MB -> 379.081 MB.\n====== naive-bayes (apache-spark) [default], iteration 1 completed (22443.402 ms) ======\nNOTE: 'als' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== als (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 172.998 ms, heap usage 761.633 MB -> 177.000 MB.\n====== als (apache-spark) [default], iteration 0 completed (17943.165 ms) ======\n====== als (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 215.553 ms, heap usage 444.207 MB -> 201.906 MB.\n====== als (apache-spark) [default], iteration 1 completed (11371.264 ms) ======\n====== par-mnemonics (functional) [default], iteration 0 started ======\nGC before operation: completed in 167.128 ms, heap usage 807.826 MB -> 188.115 MB.\n====== par-mnemonics (functional) [default], iteration 0 completed (4686.560 ms) ======\n====== par-mnemonics (functional) [default], iteration 1 started ======\nGC before operation: completed in 186.235 ms, heap usage 319.471 MB -> 187.992 MB.\n====== par-mnemonics (functional) [default], iteration 1 completed (4120.639 ms) ======\n====== scala-kmeans (scala) [default], iteration 0 started ======\nGC before operation: completed in 270.290 ms, heap usage 552.479 MB -> 210.291 MB.\n====== scala-kmeans (scala) [default], iteration 0 completed (310.795 ms) ======\n====== scala-kmeans (scala) [default], iteration 1 started ======\nGC before operation: completed in 198.226 ms, heap usage 239.291 MB -> 210.323 MB.\n====== scala-kmeans (scala) [default], iteration 1 completed (157.114 ms) ======\n====== philosophers (scala) [default], iteration 0 started ======\nGC before operation: completed in 212.293 ms, heap usage 241.823 MB -> 189.325 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 0 completed (1067.200 ms) ======\n====== philosophers (scala) [default], iteration 1 started ======\nGC before operation: completed in 214.823 ms, heap usage 515.825 MB -> 189.246 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 1 completed (507.249 ms) ======\nNOTE: 'log-regression' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== log-regression (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 204.915 ms, heap usage 407.753 MB -> 201.115 MB.\n====== log-regression (apache-spark) [default], iteration 0 completed (8211.225 ms) ======\n====== log-regression (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 229.129 ms, heap usage 822.246 MB -> 281.884 MB.\n====== log-regression (apache-spark) [default], iteration 1 completed (2022.986 ms) ======\nNOTE: 'gauss-mix' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== gauss-mix (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 224.490 ms, heap usage 604.816 MB -> 220.445 MB.\nAccuracy (validation) = 0.97667 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99333 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.91556 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99444 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 0 completed (31857.003 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 283.267 ms, heap usage 240.223 MB -> 227.140 MB.\nAccuracy (validation) = 0.97667 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99333 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.91556 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99444 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 1 completed (27327.487 ms) ======\n====== mnemonics (functional) [default], iteration 0 started ======\nGC before operation: completed in 212.268 ms, heap usage 575.353 MB -> 223.266 MB.\n====== mnemonics (functional) [default], iteration 0 completed (5294.098 ms) ======\n====== mnemonics (functional) [default], iteration 1 started ======\nGC before operation: completed in 210.002 ms, heap usage 344.071 MB -> 223.191 MB.\n====== mnemonics (functional) [default], iteration 1 completed (5201.483 ms) ======\n====== dotty (scala) [default], iteration 0 started ======\nGC before operation: completed in 286.089 ms, heap usage 372.191 MB -> 225.803 MB.\n====== dotty (scala) [default], iteration 0 completed (12903.008 ms) ======\n====== dotty (scala) [default], iteration 1 started ======\nGC before operation: completed in 282.037 ms, heap usage 398.803 MB -> 242.477 MB.\n====== dotty (scala) [default], iteration 1 completed (5069.280 ms) ======\n"
    },
    "finagle-chirper": {
        "times": [
            10812.804,
            4560.61
        ],
        "benchmark_output": "====== scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 102.504 ms, heap usage 148.000 MB -> 75.908 MB.\n====== scrabble (functional) [default], iteration 0 completed (1325.948 ms) ======\n====== scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 88.050 ms, heap usage 323.286 MB -> 75.986 MB.\n====== scrabble (functional) [default], iteration 1 completed (616.100 ms) ======\nNOTE: 'page-rank' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== page-rank (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 27.981 ms, heap usage 647.500 MB -> 29.629 MB.\n====== page-rank (apache-spark) [default], iteration 0 completed (19682.231 ms) ======\n====== page-rank (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 148.599 ms, heap usage 636.551 MB -> 148.832 MB.\n====== page-rank (apache-spark) [default], iteration 1 completed (11144.730 ms) ======\n====== future-genetic (functional) [default], iteration 0 started ======\nGC before operation: completed in 29.648 ms, heap usage 412.984 MB -> 33.579 MB.\n====== future-genetic (functional) [default], iteration 0 completed (9272.502 ms) ======\n====== future-genetic (functional) [default], iteration 1 started ======\nGC before operation: completed in 34.018 ms, heap usage 192.031 MB -> 34.354 MB.\n====== future-genetic (functional) [default], iteration 1 completed (6467.272 ms) ======\n====== akka-uct (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 59.891 ms, heap usage 79.097 MB -> 35.249 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 0 completed (17557.505 ms) ======\n====== akka-uct (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 86.265 ms, heap usage 373.843 MB -> 66.974 MB.\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\nfinal size= 199991\nfinal height= 9\n====== akka-uct (concurrency) [default], iteration 1 completed (14029.363 ms) ======\nNOTE: 'movie-lens' benchmark uses Spark local executor with 2 (out of 2) threads.\nGot 100004 ratings from 671 users on 9066 movies.\nTraining: 60056, validation: 20285, test: 19854\n====== movie-lens (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 137.156 ms, heap usage 194.539 MB -> 88.683 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923222022363 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186103233526 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112280854148 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489559965613 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743266133333 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299259573378 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.897937035152542 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701958880671.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 0 completed (20344.672 ms) ======\n====== movie-lens (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 121.576 ms, heap usage 172.394 MB -> 104.696 MB.\nRMSE (validation) = 3.621968954548762 for the model trained with rank = 8, lambda = 5.0, and numIter = 20.\nRMSE (validation) = 2.1340923222022363 for the model trained with rank = 10, lambda = 2.0, and numIter = 20.\nRMSE (validation) = 1.3105186103233526 for the model trained with rank = 12, lambda = 1.0, and numIter = 20.\nRMSE (validation) = 1.0039112280854148 for the model trained with rank = 8, lambda = 0.05, and numIter = 20.\nRMSE (validation) = 1.2279489559965613 for the model trained with rank = 10, lambda = 0.01, and numIter = 10.\nRMSE (validation) = 1.1317743266133333 for the model trained with rank = 8, lambda = 0.02, and numIter = 10.\nRMSE (validation) = 0.9270299259573378 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.897937035152542 for the model trained with rank = 8, lambda = 0.2, and numIter = 10.\nThe best model was trained with rank = 8 and lambda = 0.2, and numIter = 10, and its RMSE on the test set is 0.9082701958880671.\nThe best model improves the baseline by 14.34%.\nTop recommended movies for user id 72:\n1: Land of Silence and Darkness (Land des Schweigens und der Dunkelheit) (1971) (rating: 4.687, id: 67504)\n2: Goat, The (1921) (rating: 4.687, id: 83318)\n3: Play House, The (1921) (rating: 4.687, id: 83359)\n4: Cops (1922) (rating: 4.687, id: 83411)\n5: Dear Frankie (2004) (rating: 4.297, id: 8530)\n====== movie-lens (apache-spark) [default], iteration 1 completed (13437.705 ms) ======\n====== scala-doku (scala) [default], iteration 0 started ======\nGC before operation: completed in 71.361 ms, heap usage 401.691 MB -> 61.235 MB.\n====== scala-doku (scala) [default], iteration 0 completed (3772.610 ms) ======\n====== scala-doku (scala) [default], iteration 1 started ======\nGC before operation: completed in 75.123 ms, heap usage 138.735 MB -> 61.274 MB.\n====== scala-doku (scala) [default], iteration 1 completed (3181.526 ms) ======\nNOTE: 'chi-square' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== chi-square (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 153.320 ms, heap usage 306.961 MB -> 66.511 MB.\n====== chi-square (apache-spark) [default], iteration 0 completed (4336.200 ms) ======\n====== chi-square (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 199.334 ms, heap usage 478.443 MB -> 212.488 MB.\n====== chi-square (apache-spark) [default], iteration 1 completed (1061.151 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 234.375 ms, heap usage 520.283 MB -> 149.281 MB.\n====== fj-kmeans (concurrency) [default], iteration 0 completed (9005.351 ms) ======\n====== fj-kmeans (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 174.017 ms, heap usage 213.204 MB -> 149.328 MB.\n====== fj-kmeans (concurrency) [default], iteration 1 completed (10174.504 ms) ======\n====== rx-scrabble (functional) [default], iteration 0 started ======\nGC before operation: completed in 119.598 ms, heap usage 173.866 MB -> 100.311 MB.\n====== rx-scrabble (functional) [default], iteration 0 completed (473.417 ms) ======\n====== rx-scrabble (functional) [default], iteration 1 started ======\nGC before operation: completed in 140.407 ms, heap usage 253.311 MB -> 100.977 MB.\n====== rx-scrabble (functional) [default], iteration 1 completed (184.937 ms) ======\n====== db-shootout (database) [default], iteration 0 started ======\nGC before operation: completed in 98.698 ms, heap usage 122.359 MB -> 103.088 MB.\n====== db-shootout (database) [default], iteration 0 completed (7306.584 ms) ======\n====== db-shootout (database) [default], iteration 1 started ======\nGC before operation: completed in 137.252 ms, heap usage 324.700 MB -> 173.488 MB.\n====== db-shootout (database) [default], iteration 1 completed (7306.169 ms) ======\nCreating graph database...\nLoading resources...\nPopulating database...\nfinagle-http on :45775 spawning 2 client and default number of server workers.\n====== finagle-http (web) [default], iteration 0 started ======\nGC before operation: completed in 96.401 ms, heap usage 293.434 MB -> 110.941 MB.\n====== finagle-http (web) [default], iteration 0 completed (10148.061 ms) ======\n====== finagle-http (web) [default], iteration 1 started ======\nGC before operation: completed in 161.326 ms, heap usage 253.576 MB -> 113.819 MB.\n====== finagle-http (web) [default], iteration 1 completed (4745.532 ms) ======\n====== reactors (concurrency) [default], iteration 0 started ======\nGC before operation: completed in 109.658 ms, heap usage 159.231 MB -> 115.585 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 0 completed (14358.711 ms) ======\n====== reactors (concurrency) [default], iteration 1 started ======\nGC before operation: completed in 92.642 ms, heap usage 720.591 MB -> 116.771 MB.\nBaseline workload: Reactor scheduling events\nBigBench workload: Many-to-many message ping pong\nCountingActor workload: Single reactor event processing\nFibonacci workload: Dynamic reactor mix with varying lifetimes\nForkJoinCreation workload: Reactor creation performance\nForkJoinThroughput workload: Reactor processing performance\nPingPong workload: Reactor pair sequential ping pong performance\nStreamingPingPong workload: Reactor pair overlapping ping pong performance\nRoundabout workload: Many channels reactor performance\nThreadRing workload: Reactor ring forwarding performance\n====== reactors (concurrency) [default], iteration 1 completed (12322.901 ms) ======\nNOTE: 'dec-tree' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== dec-tree (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 110.542 ms, heap usage 222.390 MB -> 129.888 MB.\n====== dec-tree (apache-spark) [default], iteration 0 completed (8414.467 ms) ======\n====== dec-tree (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 167.590 ms, heap usage 293.302 MB -> 161.154 MB.\n====== dec-tree (apache-spark) [default], iteration 1 completed (2199.388 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 0 started ======\nGC before operation: completed in 131.572 ms, heap usage 364.941 MB -> 144.116 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 262\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 42\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 4\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 5\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 13\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 12\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 8\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 4\tmaxttc = 262\tfailed = 0\ttotal = 4\nSHORT_TRAVERSAL:  successful = 6\tmaxttc = 13\tfailed = 0\ttotal = 6\nSHORT_TRAVERSAL_RO:  successful = 10\tmaxttc = 5\tfailed = 0\ttotal = 10\nOPERATION:  successful = 8\tmaxttc = 8\tfailed = 0\ttotal = 8\nOPERATION_RO:  successful = 12\tmaxttc = 2\tfailed = 0\ttotal = 12\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 119.05 op/s (119.05 op/s including failed)\nElapsed time: 0.34 s\n====== scala-stm-bench7 (scala) [default], iteration 0 completed (1965.254 ms) ======\n====== scala-stm-bench7 (scala) [default], iteration 1 started ======\nGC before operation: completed in 143.376 ms, heap usage 542.616 MB -> 144.416 MB.\n===============================================================================\nThe STMBench7 Benchmark (Java version)\nA benchmark for comparing synchronization techniques\nVersion: 1.0(15.02.2011)\nMore information: http://lpd.epfl.ch/site/research/tmeval\nCopyright (C) 2006-2008 LPD, I&C, EPFL (http://lpd.epfl.ch)\nImplemented by Michal Kapalka (http://kapalka.eu)\nUpdated by Vincent Gramoli for compliance with the VELOX stack\n===============================================================================\n\n-------------------------------------------------------------------------------\nBenchmark parameters\n-------------------------------------------------------------------------------\nNumber of threads: 2\nLength: 10 s\nWorkload: READ_WRITE\nSynchronization method: STM\nLong traversals enabled\nStructural modification operations enabled\nDesignObjFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$4\nBackendFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$3\nOperationExecutorFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$1\nThreadFactory: stmbench7.scalastm.ScalaSTMInitializer$$anon$5\nSequential replay disabled\nSTM-specific parameters: none\n\nOperation ratios [%]:\nTRAVERSAL: 2.13\nTRAVERSAL_RO: 3.19\nSHORT_TRAVERSAL: 17.02\nSHORT_TRAVERSAL_RO: 25.53\nOPERATION: 19.15\nOPERATION_RO: 28.72\nSTRUCTURAL_MODIFICATION: 4.26\n\n-------------------------------------------------------------------------------\nDetailed results\n-------------------------------------------------------------------------------\nOperation   T1:   successful = 2\tmaxttc = 355\tfailed = 0\nOperation  T2a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T2c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3a:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3b:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  T3c:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   T6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation   Q7:   successful = 2\tmaxttc = 6\tfailed = 0\nOperation  ST1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST2:   successful = 2\tmaxttc = 21\tfailed = 0\nOperation  ST3:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST4:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  ST5:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST6:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST7:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  ST8:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  ST9:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation ST10:   successful = 2\tmaxttc = 1\tfailed = 0\nOperation  OP1:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP2:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP4:   successful = 2\tmaxttc = 2\tfailed = 0\nOperation  OP5:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  OP7:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP8:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  OP9:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP10:   successful = 2\tmaxttc = 3\tfailed = 0\nOperation OP11:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP12:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP13:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation OP14:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation OP15:   successful = 2\tmaxttc = 0\tfailed = 0\nOperation  SM1:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM2:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM3:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM4:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM5:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM6:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM7:   successful = 0\tmaxttc = 0\tfailed = 0\nOperation  SM8:   successful = 0\tmaxttc = 0\tfailed = 0\n\n-------------------------------------------------------------------------------\nSample errors (operation ratios [%])\n-------------------------------------------------------------------------------\nTRAVERSAL:  expected = 2.13\tsuccessful = 0.00\terror = 2.13\t(total = 0.00\terror = 2.13)\nTRAVERSAL_RO:  expected = 3.19\tsuccessful = 10.00\terror = 6.81\t(total = 10.00\terror = 6.81)\nSHORT_TRAVERSAL:  expected = 17.02\tsuccessful = 15.00\terror = 2.02\t(total = 15.00\terror = 2.02)\nSHORT_TRAVERSAL_RO:  expected = 25.53\tsuccessful = 25.00\terror = 0.53\t(total = 25.00\terror = 0.53)\nOPERATION:  expected = 19.15\tsuccessful = 20.00\terror = 0.85\t(total = 20.00\terror = 0.85)\nOPERATION_RO:  expected = 28.72\tsuccessful = 30.00\terror = 1.28\t(total = 30.00\terror = 1.28)\nSTRUCTURAL_MODIFICATION:  expected = 4.26\tsuccessful = 0.00\terror = 4.26\t(total = 0.00\terror = 4.26)\n\n-------------------------------------------------------------------------------\nSummary results\n-------------------------------------------------------------------------------\nTRAVERSAL:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\nTRAVERSAL_RO:  successful = 8\tmaxttc = 355\tfailed = 0\ttotal = 8\nSHORT_TRAVERSAL:  successful = 12\tmaxttc = 13\tfailed = 0\ttotal = 12\nSHORT_TRAVERSAL_RO:  successful = 20\tmaxttc = 21\tfailed = 0\ttotal = 20\nOPERATION:  successful = 16\tmaxttc = 8\tfailed = 0\ttotal = 16\nOPERATION_RO:  successful = 24\tmaxttc = 2\tfailed = 0\ttotal = 24\nSTRUCTURAL_MODIFICATION:  successful = 0\tmaxttc = 0\tfailed = 0\ttotal = 0\n\nTotal sample error: 17.87% (17.87% including failed)\nTotal throughput: 184.76 op/s (184.76 op/s including failed)\nElapsed time: 0.43 s\n====== scala-stm-bench7 (scala) [default], iteration 1 completed (1520.757 ms) ======\nNOTE: 'naive-bayes' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== naive-bayes (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 168.652 ms, heap usage 402.908 MB -> 155.665 MB.\n====== naive-bayes (apache-spark) [default], iteration 0 completed (38459.475 ms) ======\n====== naive-bayes (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 223.365 ms, heap usage 768.209 MB -> 379.081 MB.\n====== naive-bayes (apache-spark) [default], iteration 1 completed (22443.402 ms) ======\nNOTE: 'als' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== als (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 172.998 ms, heap usage 761.633 MB -> 177.000 MB.\n====== als (apache-spark) [default], iteration 0 completed (17943.165 ms) ======\n====== als (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 215.553 ms, heap usage 444.207 MB -> 201.906 MB.\n====== als (apache-spark) [default], iteration 1 completed (11371.264 ms) ======\n====== par-mnemonics (functional) [default], iteration 0 started ======\nGC before operation: completed in 167.128 ms, heap usage 807.826 MB -> 188.115 MB.\n====== par-mnemonics (functional) [default], iteration 0 completed (4686.560 ms) ======\n====== par-mnemonics (functional) [default], iteration 1 started ======\nGC before operation: completed in 186.235 ms, heap usage 319.471 MB -> 187.992 MB.\n====== par-mnemonics (functional) [default], iteration 1 completed (4120.639 ms) ======\n====== scala-kmeans (scala) [default], iteration 0 started ======\nGC before operation: completed in 270.290 ms, heap usage 552.479 MB -> 210.291 MB.\n====== scala-kmeans (scala) [default], iteration 0 completed (310.795 ms) ======\n====== scala-kmeans (scala) [default], iteration 1 started ======\nGC before operation: completed in 198.226 ms, heap usage 239.291 MB -> 210.323 MB.\n====== scala-kmeans (scala) [default], iteration 1 completed (157.114 ms) ======\n====== philosophers (scala) [default], iteration 0 started ======\nGC before operation: completed in 212.293 ms, heap usage 241.823 MB -> 189.325 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 0 completed (1067.200 ms) ======\n====== philosophers (scala) [default], iteration 1 started ======\nGC before operation: completed in 214.823 ms, heap usage 515.825 MB -> 189.246 MB.\nCamera thread performed 122 scans.\n====== philosophers (scala) [default], iteration 1 completed (507.249 ms) ======\nNOTE: 'log-regression' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== log-regression (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 204.915 ms, heap usage 407.753 MB -> 201.115 MB.\n====== log-regression (apache-spark) [default], iteration 0 completed (8211.225 ms) ======\n====== log-regression (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 229.129 ms, heap usage 822.246 MB -> 281.884 MB.\n====== log-regression (apache-spark) [default], iteration 1 completed (2022.986 ms) ======\nNOTE: 'gauss-mix' benchmark uses Spark local executor with 2 (out of 2) threads.\n====== gauss-mix (apache-spark) [default], iteration 0 started ======\nGC before operation: completed in 224.490 ms, heap usage 604.816 MB -> 220.445 MB.\nAccuracy (validation) = 0.97667 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99333 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.91556 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99444 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 0 completed (31857.003 ms) ======\n====== gauss-mix (apache-spark) [default], iteration 1 started ======\nGC before operation: completed in 283.267 ms, heap usage 240.223 MB -> 227.140 MB.\nAccuracy (validation) = 0.97667 for the model trained with K = 12, maxIterations = 25, and seed = 159147643.\nAccuracy (validation) = 0.98333 for the model trained with K = 12, maxIterations = 25, and seed = 159147644.\nAccuracy (validation) = 0.99333 for the model trained with K = 12, maxIterations = 25, and seed = 159147645.\nAccuracy (validation) = 0.91556 for the model trained with K = 12, maxIterations = 25, and seed = 159147646.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147643.\nAccuracy (validation) = 0.99444 for the model trained with K = 9, maxIterations = 30, and seed = 159147644.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147645.\nAccuracy (validation) = 1.00000 for the model trained with K = 9, maxIterations = 30, and seed = 159147646.\n====== gauss-mix (apache-spark) [default], iteration 1 completed (27327.487 ms) ======\n====== mnemonics (functional) [default], iteration 0 started ======\nGC before operation: completed in 212.268 ms, heap usage 575.353 MB -> 223.266 MB.\n====== mnemonics (functional) [default], iteration 0 completed (5294.098 ms) ======\n====== mnemonics (functional) [default], iteration 1 started ======\nGC before operation: completed in 210.002 ms, heap usage 344.071 MB -> 223.191 MB.\n====== mnemonics (functional) [default], iteration 1 completed (5201.483 ms) ======\n====== dotty (scala) [default], iteration 0 started ======\nGC before operation: completed in 286.089 ms, heap usage 372.191 MB -> 225.803 MB.\n====== dotty (scala) [default], iteration 0 completed (12903.008 ms) ======\n====== dotty (scala) [default], iteration 1 started ======\nGC before operation: completed in 282.037 ms, heap usage 398.803 MB -> 242.477 MB.\n====== dotty (scala) [default], iteration 1 completed (5069.280 ms) ======\nMaster port: 42177\nCache ports: 37597, 37037\n====== finagle-chirper (web) [default], iteration 0 started ======\nResetting master, feed map size: 5000\nGC before operation: completed in 345.004 ms, heap usage 342.977 MB -> 235.473 MB.\n====== finagle-chirper (web) [default], iteration 0 completed (10812.804 ms) ======\n====== finagle-chirper (web) [default], iteration 1 started ======\nResetting master, feed map size: 5000\nGC before operation: completed in 276.956 ms, heap usage 547.246 MB -> 236.356 MB.\n====== finagle-chirper (web) [default], iteration 1 completed (4560.610 ms) ======\n"
    },
    "times": [
        259508.846,
        171173.549
    ]
}